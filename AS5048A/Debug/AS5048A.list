
AS5048A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006c18  08006c18  00016c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800703c  0800703c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800703c  0800703c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800703c  0800703c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000174  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016da4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a05  00000000  00000000  00036fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  000399b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  0003a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddbd  00000000  00000000  0003b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013bc4  00000000  00000000  000593fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8557  00000000  00000000  0006cfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00115518  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de8  00000000  00000000  0011556c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0011a354  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000003f  00000000  00000000  0011a378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bfc 	.word	0x08006bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006bfc 	.word	0x08006bfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc8:	6153      	str	r3, [r2, #20]
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_GPIO_Init+0xb8>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f000 fe55 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2108      	movs	r1, #8
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <MX_GPIO_Init+0xbc>)
 8000c18:	f000 fe50 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f000 fccf 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_GPIO_Init+0xbc>)
 8000c52:	f000 fcc1 	bl	80015d8 <HAL_GPIO_Init>

}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000
 8000c64:	48000400 	.word	0x48000400

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fb3c 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f824 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f7ff ff98 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c78:	f000 fa98 	bl	80011ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c7c:	f000 f880 	bl	8000d80 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c80:	f000 fa1a 	bl	80010b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim1);
  setbuf(stdout, NULL);
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <main+0x48>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fe79 	bl	8004984 <setbuf>
  printf("Hello\n");
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <main+0x4c>)
 8000c94:	f003 fe6e 	bl	8004974 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <main+0x50>)
 8000c9e:	f000 fe0d 	bl	80018bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f000 fe07 	bl	80018bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000cae:	e7f3      	b.n	8000c98 <main+0x30>
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	08006c18 	.word	0x08006c18
 8000cb8:	48000400 	.word	0x48000400

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b096      	sub	sp, #88	; 0x58
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 f972 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fde8 	bl	80018ec <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f828 	bl	8000d76 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fcda 	bl	80026fc <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d4e:	f000 f812 	bl	8000d76 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 ff02 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d6a:	f000 f804 	bl	8000d76 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3758      	adds	r7, #88	; 0x58
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7a:	b672      	cpsid	i
}
 8000d7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <Error_Handler+0x8>

08000d80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_SPI1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d9a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000d9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dce:	2207      	movs	r2, #7
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dda:	2208      	movs	r2, #8
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000de0:	f001 ffe8 	bl	8002db4 <HAL_SPI_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f7ff ffc4 	bl	8000d76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000204 	.word	0x20000204
 8000df8:	40013000 	.word	0x40013000

08000dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_SPI_MspInit+0x7c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d128      	bne.n	8000e70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_SPI_MspInit+0x80>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e4e:	23e0      	movs	r3, #224	; 0xe0
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 fbb4 	bl	80015d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 fa2e 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f22:	f002 f841 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000268 	.word	0x20000268

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_kill>:

int _kill(int pid, int sig)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f4a:	f003 f809 	bl	8003f60 <__errno>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2216      	movs	r2, #22
 8000f52:	601a      	str	r2, [r3, #0]
	return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_exit>:

void _exit (int status)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffe7 	bl	8000f40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f72:	e7fe      	b.n	8000f72 <_exit+0x12>

08000f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
	}

return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <_write>:
//int _close(int file)
//{
//	return -1;
//}

int _write(int file, char *ptr, int len) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <_write+0x24>)
 8000fc6:	f002 fbf5 	bl	80037b4 <HAL_UART_Transmit>
	return len;
 8000fca:	687b      	ldr	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200002b4 	.word	0x200002b4

08000fd8 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe8:	605a      	str	r2, [r3, #4]
	return 0;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_isatty>:

int _isatty(int file)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	return 1;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
	return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f002 ff82 	bl	8003f60 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20003000 	.word	0x20003000
 8001088:	00000400 	.word	0x00000400
 800108c:	200001f8 	.word	0x200001f8
 8001090:	20000350 	.word	0x20000350

08001094 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MX_TIM1_Init+0xa0>)
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <MX_TIM1_Init+0xa4>)
 80010da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_TIM1_Init+0xa0>)
 80010de:	2247      	movs	r2, #71	; 0x47
 80010e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_TIM1_Init+0xa0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_TIM1_Init+0xa0>)
 80010ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_TIM1_Init+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_TIM1_Init+0xa0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_TIM1_Init+0xa0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001102:	4815      	ldr	r0, [pc, #84]	; (8001158 <MX_TIM1_Init+0xa0>)
 8001104:	f001 fef9 	bl	8002efa <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800110e:	f7ff fe32 	bl	8000d76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <MX_TIM1_Init+0xa0>)
 8001120:	f002 f861 	bl	80031e6 <HAL_TIM_ConfigClockSource>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800112a:	f7ff fe24 	bl	8000d76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_TIM1_Init+0xa0>)
 8001140:	f002 fa5e 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800114a:	f7ff fe14 	bl	8000d76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000268 	.word	0x20000268
 800115c:	40012c00 	.word	0x40012c00

08001160 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_TIM_Base_MspInit+0x44>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d113      	bne.n	800119a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_TIM_Base_MspInit+0x48>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_TIM_Base_MspInit+0x48>)
 8001178:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_TIM_Base_MspInit+0x48>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2019      	movs	r0, #25
 8001190:	f000 f9eb 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001194:	2019      	movs	r0, #25
 8001196:	f000 fa04 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012c00 	.word	0x40012c00
 80011a8:	40021000 	.word	0x40021000

080011ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_USART2_UART_Init+0x5c>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011f0:	f002 fa92 	bl	8003718 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011fa:	f7ff fdbc 	bl	8000d76 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200002b4 	.word	0x200002b4
 8001208:	40004400 	.word	0x40004400

0800120c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a18      	ldr	r2, [pc, #96]	; (800128c <HAL_UART_MspInit+0x80>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d129      	bne.n	8001282 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0x84>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_UART_MspInit+0x84>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800125e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001270:	2307      	movs	r3, #7
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f000 f9ab 	bl	80015d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40004400 	.word	0x40004400
 8001290:	40021000 	.word	0x40021000

08001294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff fefc 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f002 fe53 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c6:	f7ff fccf 	bl	8000c68 <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80012d8:	08007044 	.word	0x08007044
  ldr r2, =_sbss
 80012dc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80012e0:	20000350 	.word	0x20000350

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f92b 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fdbc 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f943 	bl	80015be <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001350:	f000 f90b 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	20000008 	.word	0x20000008
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	2000033c 	.word	0x2000033c

0800139c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000033c 	.word	0x2000033c

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff29 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff3e 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff8e 	bl	80014a8 <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff31 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffa2 	bl	8001510 <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	e14e      	b.n	8001886 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8140 	beq.w	8001880 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x40>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 809a 	beq.w	8001880 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001764:	4a50      	ldr	r2, [pc, #320]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1e0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a46      	ldr	r2, [pc, #280]	; (80018ac <HAL_GPIO_Init+0x2d4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1dc>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <HAL_GPIO_Init+0x2d8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1d8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a44      	ldr	r2, [pc, #272]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1d4>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e006      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e004      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b8:	2300      	movs	r3, #0
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4093      	lsls	r3, r2
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ca:	4937      	ldr	r1, [pc, #220]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017fc:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001826:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f aea9 	bne.w	80015e8 <HAL_GPIO_Init+0x10>
  }
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	f000 bef4 	b.w	80026ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 816a 	beq.w	8001bea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001916:	4bb3      	ldr	r3, [pc, #716]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00c      	beq.n	800193c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001922:	4bb0      	ldr	r3, [pc, #704]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d159      	bne.n	80019e2 <HAL_RCC_OscConfig+0xf6>
 800192e:	4bad      	ldr	r3, [pc, #692]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193a:	d152      	bne.n	80019e2 <HAL_RCC_OscConfig+0xf6>
 800193c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001940:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001950:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_RCC_OscConfig+0x82>
 8001968:	4b9e      	ldr	r3, [pc, #632]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0xae>
 800196e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001972:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001986:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800198a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001996:	4b93      	ldr	r3, [pc, #588]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019a6:	fa92 f2a2 	rbit	r2, r2
 80019aa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019b2:	fab2 f282 	clz	r2, r2
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f042 0220 	orr.w	r2, r2, #32
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f002 021f 	and.w	r2, r2, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 810c 	beq.w	8001be8 <HAL_RCC_OscConfig+0x2fc>
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 8106 	bne.w	8001be8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	f000 be86 	b.w	80026ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x110>
 80019ee:	4b7d      	ldr	r3, [pc, #500]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7c      	ldr	r2, [pc, #496]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e030      	b.n	8001a5e <HAL_RCC_OscConfig+0x172>
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x134>
 8001a06:	4b77      	ldr	r3, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a76      	ldr	r2, [pc, #472]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b74      	ldr	r3, [pc, #464]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a73      	ldr	r2, [pc, #460]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01e      	b.n	8001a5e <HAL_RCC_OscConfig+0x172>
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x15a>
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6c      	ldr	r2, [pc, #432]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a69      	ldr	r2, [pc, #420]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x172>
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a66      	ldr	r2, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b64      	ldr	r3, [pc, #400]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a63      	ldr	r2, [pc, #396]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a5e:	4b61      	ldr	r3, [pc, #388]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f023 020f 	bic.w	r2, r3, #15
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	495d      	ldr	r1, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d059      	beq.n	8001b30 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fc8e 	bl	800139c <HAL_GetTick>
 8001a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a86:	f7ff fc89 	bl	800139c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d902      	bls.n	8001a9c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f000 be29 	b.w	80026ee <HAL_RCC_OscConfig+0xe02>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ab0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0x1e2>
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x20e>
 8001ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001afe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b02:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b06:	fa92 f2a2 	rbit	r2, r2
 8001b0a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b0e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b12:	fab2 f282 	clz	r2, r2
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f042 0220 	orr.w	r2, r2, #32
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	f002 021f 	and.w	r2, r2, #31
 8001b22:	2101      	movs	r1, #1
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ab      	beq.n	8001a86 <HAL_RCC_OscConfig+0x19a>
 8001b2e:	e05c      	b.n	8001bea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fc34 	bl	800139c <HAL_GetTick>
 8001b34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fc2f 	bl	800139c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d902      	bls.n	8001b50 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	f000 bdcf 	b.w	80026ee <HAL_RCC_OscConfig+0xe02>
 8001b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b54:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0x296>
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x2c2>
 8001b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b9e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_RCC_OscConfig+0x2f8>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bb6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bba:	fa92 f2a2 	rbit	r2, r2
 8001bbe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001bc2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001bc6:	fab2 f282 	clz	r2, r2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f042 0220 	orr.w	r2, r2, #32
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f002 021f 	and.w	r2, r2, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ab      	bne.n	8001b3a <HAL_RCC_OscConfig+0x24e>
 8001be2:	e002      	b.n	8001bea <HAL_RCC_OscConfig+0x2fe>
 8001be4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 816f 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bfa:	4bd0      	ldr	r3, [pc, #832]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c06:	4bcd      	ldr	r3, [pc, #820]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d16c      	bne.n	8001cec <HAL_RCC_OscConfig+0x400>
 8001c12:	4bca      	ldr	r3, [pc, #808]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d166      	bne.n	8001cec <HAL_RCC_OscConfig+0x400>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_OscConfig+0x362>
 8001c48:	4bbc      	ldr	r3, [pc, #752]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	e013      	b.n	8001c76 <HAL_RCC_OscConfig+0x38a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c60:	2302      	movs	r3, #2
 8001c62:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c72:	4bb2      	ldr	r3, [pc, #712]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	2202      	movs	r2, #2
 8001c78:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c7c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c80:	fa92 f2a2 	rbit	r2, r2
 8001c84:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c88:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f000 bd1b 	b.w	80026ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	21f8      	movs	r1, #248	; 0xf8
 8001cc8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cd0:	fa91 f1a1 	rbit	r1, r1
 8001cd4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cd8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cdc:	fab1 f181 	clz	r1, r1
 8001ce0:	b2c9      	uxtb	r1, r1
 8001ce2:	408b      	lsls	r3, r1
 8001ce4:	4995      	ldr	r1, [pc, #596]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e0f5      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8085 	beq.w	8001e02 <HAL_RCC_OscConfig+0x516>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2301      	movs	r3, #1
 8001d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fb3a 	bl	800139c <HAL_GetTick>
 8001d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fb35 	bl	800139c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d902      	bls.n	8001d44 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	f000 bcd5 	b.w	80026ee <HAL_RCC_OscConfig+0xe02>
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_OscConfig+0x488>
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e013      	b.n	8001d9c <HAL_RCC_OscConfig+0x4b0>
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d86:	2302      	movs	r3, #2
 8001d88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001da2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001da6:	fa92 f2a2 	rbit	r2, r2
 8001daa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f042 0220 	orr.w	r2, r2, #32
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f002 021f 	and.w	r2, r2, #31
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0af      	beq.n	8001d2e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	21f8      	movs	r1, #248	; 0xf8
 8001dde:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001de6:	fa91 f1a1 	rbit	r1, r1
 8001dea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001dee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001df2:	fab1 f181 	clz	r1, r1
 8001df6:	b2c9      	uxtb	r1, r1
 8001df8:	408b      	lsls	r3, r1
 8001dfa:	4950      	ldr	r1, [pc, #320]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e06a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5ec>
 8001e02:	2301      	movs	r3, #1
 8001e04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fab5 	bl	800139c <HAL_GetTick>
 8001e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e38:	f7ff fab0 	bl	800139c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d902      	bls.n	8001e4e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	f000 bc50 	b.w	80026ee <HAL_RCC_OscConfig+0xe02>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_RCC_OscConfig+0x592>
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	e013      	b.n	8001ea6 <HAL_RCC_OscConfig+0x5ba>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x650>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001eac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001eb8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f042 0220 	orr.w	r2, r2, #32
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f002 021f 	and.w	r2, r2, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1af      	bne.n	8001e38 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80da 	beq.w	800209c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d069      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x6da>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_OscConfig+0x654>)
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	461a      	mov	r2, r3
 8001f18:	2301      	movs	r3, #1
 8001f1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fa3e 	bl	800139c <HAL_GetTick>
 8001f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f24:	e00e      	b.n	8001f44 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff fa39 	bl	800139c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d906      	bls.n	8001f44 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e3d9      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	10908120 	.word	0x10908120
 8001f44:	2302      	movs	r3, #2
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f72:	2202      	movs	r2, #2
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	fa93 f2a3 	rbit	r2, r3
 8001f80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	4ba5      	ldr	r3, [pc, #660]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8001f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f8e:	2102      	movs	r1, #2
 8001f90:	6019      	str	r1, [r3, #0]
 8001f92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f1a3 	rbit	r1, r3
 8001f9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fa0:	6019      	str	r1, [r3, #0]
  return result;
 8001fa2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	2101      	movs	r1, #1
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0b0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x63a>
 8001fc4:	e06a      	b.n	800209c <HAL_RCC_OscConfig+0x7b0>
 8001fc6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fa93 f2a3 	rbit	r2, r3
 8001fd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fdc:	601a      	str	r2, [r3, #0]
  return result;
 8001fde:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fe2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <HAL_RCC_OscConfig+0x934>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f9d0 	bl	800139c <HAL_GetTick>
 8001ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	e009      	b.n	8002016 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff f9cb 	bl	800139c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e36b      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
 8002016:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800201a:	2202      	movs	r2, #2
 800201c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fa93 f2a3 	rbit	r2, r3
 8002028:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800204a:	2202      	movs	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800205c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205e:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002062:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002066:	2102      	movs	r1, #2
 8002068:	6019      	str	r1, [r3, #0]
 800206a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f1a3 	rbit	r1, r3
 8002074:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002078:	6019      	str	r1, [r3, #0]
  return result;
 800207a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1b2      	bne.n	8002002 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8158 	beq.w	800235c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b5a      	ldr	r3, [pc, #360]	; (800221c <HAL_RCC_OscConfig+0x930>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d112      	bne.n	80020e4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x930>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_RCC_OscConfig+0x930>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b54      	ldr	r3, [pc, #336]	; (800221c <HAL_RCC_OscConfig+0x930>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b4f      	ldr	r3, [pc, #316]	; (8002224 <HAL_RCC_OscConfig+0x938>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d11a      	bne.n	8002126 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCC_OscConfig+0x938>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_RCC_OscConfig+0x938>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7ff f94e 	bl	800139c <HAL_GetTick>
 8002100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e009      	b.n	800211a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7ff f949 	bl	800139c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e2e9      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_RCC_OscConfig+0x938>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ef      	beq.n	8002106 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x852>
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a39      	ldr	r2, [pc, #228]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e02f      	b.n	800219e <HAL_RCC_OscConfig+0x8b2>
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10c      	bne.n	8002162 <HAL_RCC_OscConfig+0x876>
 8002148:	4b34      	ldr	r3, [pc, #208]	; (800221c <HAL_RCC_OscConfig+0x930>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a33      	ldr	r2, [pc, #204]	; (800221c <HAL_RCC_OscConfig+0x930>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a30      	ldr	r2, [pc, #192]	; (800221c <HAL_RCC_OscConfig+0x930>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e01d      	b.n	800219e <HAL_RCC_OscConfig+0x8b2>
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_OscConfig+0x89a>
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x930>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_RCC_OscConfig+0x930>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x930>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0x8b2>
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a24      	ldr	r2, [pc, #144]	; (800221c <HAL_RCC_OscConfig+0x930>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a21      	ldr	r2, [pc, #132]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d06b      	beq.n	8002280 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff f8f8 	bl	800139c <HAL_GetTick>
 80021ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00b      	b.n	80021ca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff f8f3 	bl	800139c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e291      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
 80021ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021ce:	2202      	movs	r2, #2
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021e6:	2202      	movs	r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021f8:	601a      	str	r2, [r3, #0]
  return result;
 80021fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d109      	bne.n	8002228 <HAL_RCC_OscConfig+0x93c>
 8002214:	4b01      	ldr	r3, [pc, #4]	; (800221c <HAL_RCC_OscConfig+0x930>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x958>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	10908120 	.word	0x10908120
 8002224:	40007000 	.word	0x40007000
 8002228:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	4bbb      	ldr	r3, [pc, #748]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002248:	2102      	movs	r1, #2
 800224a:	6011      	str	r1, [r2, #0]
 800224c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	fa92 f1a2 	rbit	r1, r2
 8002256:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800225a:	6011      	str	r1, [r2, #0]
  return result;
 800225c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d099      	beq.n	80021b2 <HAL_RCC_OscConfig+0x8c6>
 800227e:	e063      	b.n	8002348 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff f88c 	bl	800139c <HAL_GetTick>
 8002284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00b      	b.n	80022a2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff f887 	bl	800139c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e225      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
 80022a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022d0:	601a      	str	r2, [r3, #0]
  return result;
 80022d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d102      	bne.n	80022f2 <HAL_RCC_OscConfig+0xa06>
 80022ec:	4b90      	ldr	r3, [pc, #576]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	e00d      	b.n	800230e <HAL_RCC_OscConfig+0xa22>
 80022f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022f6:	2202      	movs	r2, #2
 80022f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	4b89      	ldr	r3, [pc, #548]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002312:	2102      	movs	r1, #2
 8002314:	6011      	str	r1, [r2, #0]
 8002316:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	fa92 f1a2 	rbit	r1, r2
 8002320:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002324:	6011      	str	r1, [r2, #0]
  return result;
 8002326:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1a0      	bne.n	800228a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002348:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002350:	4b77      	ldr	r3, [pc, #476]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	4a76      	ldr	r2, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 81c2 	beq.w	80026ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002368:	4b71      	ldr	r3, [pc, #452]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	f000 819c 	beq.w	80026ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b02      	cmp	r3, #2
 800237e:	f040 8114 	bne.w	80025aa <HAL_RCC_OscConfig+0xcbe>
 8002382:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002386:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800238a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	fa93 f2a3 	rbit	r2, r3
 8002396:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800239a:	601a      	str	r2, [r3, #0]
  return result;
 800239c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	461a      	mov	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fff0 	bl	800139c <HAL_GetTick>
 80023bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	e009      	b.n	80023d6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe ffeb 	bl	800139c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e18b      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
 80023d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ee:	601a      	str	r2, [r3, #0]
  return result;
 80023f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0xb24>
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0xb5c>
 8002410:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800242e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800244c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	fa92 f1a2 	rbit	r1, r2
 800245c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002460:	6011      	str	r1, [r2, #0]
  return result;
 8002462:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f042 0220 	orr.w	r2, r2, #32
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f002 021f 	and.w	r2, r2, #31
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f202 	lsl.w	r2, r1, r2
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d19e      	bne.n	80023c2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	430b      	orrs	r3, r1
 800249a:	4925      	ldr	r1, [pc, #148]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024b8:	601a      	str	r2, [r3, #0]
  return result;
 80024ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024be:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	461a      	mov	r2, r3
 80024d2:	2301      	movs	r3, #1
 80024d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff61 	bl	800139c <HAL_GetTick>
 80024da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024de:	e009      	b.n	80024f4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe ff5c 	bl	800139c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0fc      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
 80024f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800250c:	601a      	str	r2, [r3, #0]
  return result;
 800250e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002512:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0xc48>
 8002528:	4b01      	ldr	r3, [pc, #4]	; (8002530 <HAL_RCC_OscConfig+0xc44>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e01e      	b.n	800256c <HAL_RCC_OscConfig+0xc80>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	fa93 f2a3 	rbit	r2, r3
 8002548:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCC_OscConfig+0xe0c>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002570:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	fa92 f1a2 	rbit	r1, r2
 8002580:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002584:	6011      	str	r1, [r2, #0]
  return result;
 8002586:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f042 0220 	orr.w	r2, r2, #32
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d09b      	beq.n	80024e0 <HAL_RCC_OscConfig+0xbf4>
 80025a8:	e0a0      	b.n	80026ec <HAL_RCC_OscConfig+0xe00>
 80025aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fa93 f2a3 	rbit	r2, r3
 80025be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c2:	601a      	str	r2, [r3, #0]
  return result;
 80025c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	461a      	mov	r2, r3
 80025dc:	2300      	movs	r3, #0
 80025de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe fedc 	bl	800139c <HAL_GetTick>
 80025e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	e009      	b.n	80025fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe fed7 	bl	800139c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e077      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
 80025fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002616:	601a      	str	r2, [r3, #0]
  return result;
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_RCC_OscConfig+0xd4c>
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_RCC_OscConfig+0xe0c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	e01b      	b.n	8002670 <HAL_RCC_OscConfig+0xd84>
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f107 0318 	add.w	r3, r7, #24
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa93 f2a3 	rbit	r2, r3
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCC_OscConfig+0xe0c>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f107 0210 	add.w	r2, r7, #16
 8002674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002678:	6011      	str	r1, [r2, #0]
 800267a:	f107 0210 	add.w	r2, r7, #16
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	fa92 f1a2 	rbit	r1, r2
 8002684:	f107 020c 	add.w	r2, r7, #12
 8002688:	6011      	str	r1, [r2, #0]
  return result;
 800268a:	f107 020c 	add.w	r2, r7, #12
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	fab2 f282 	clz	r2, r2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f042 0220 	orr.w	r2, r2, #32
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f002 021f 	and.w	r2, r2, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f202 	lsl.w	r2, r1, r2
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d19e      	bne.n	80025ea <HAL_RCC_OscConfig+0xcfe>
 80026ac:	e01e      	b.n	80026ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e018      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_RCC_OscConfig+0xe0c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b09e      	sub	sp, #120	; 0x78
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e162      	b.n	80029da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b90      	ldr	r3, [pc, #576]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	498b      	ldr	r1, [pc, #556]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b89      	ldr	r3, [pc, #548]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e14a      	b.n	80029da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b82      	ldr	r3, [pc, #520]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	497f      	ldr	r1, [pc, #508]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80dc 	beq.w	8002928 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d13c      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xf6>
 8002778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800277c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d102      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xa6>
 800279c:	4b6f      	ldr	r3, [pc, #444]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e00f      	b.n	80027c2 <HAL_RCC_ClockConfig+0xc6>
 80027a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	667b      	str	r3, [r7, #100]	; 0x64
 80027b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b4:	663b      	str	r3, [r7, #96]	; 0x60
 80027b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027be:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80027c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ca:	fa92 f2a2 	rbit	r2, r2
 80027ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027d2:	fab2 f282 	clz	r2, r2
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f042 0220 	orr.w	r2, r2, #32
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f002 021f 	and.w	r2, r2, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d17b      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0f3      	b.n	80029da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d13c      	bne.n	8002874 <HAL_RCC_ClockConfig+0x178>
 80027fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d102      	bne.n	8002824 <HAL_RCC_ClockConfig+0x128>
 800281e:	4b4f      	ldr	r3, [pc, #316]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	e00f      	b.n	8002844 <HAL_RCC_ClockConfig+0x148>
 8002824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002828:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	647b      	str	r3, [r7, #68]	; 0x44
 8002832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002836:	643b      	str	r3, [r7, #64]	; 0x40
 8002838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002848:	63ba      	str	r2, [r7, #56]	; 0x38
 800284a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800284c:	fa92 f2a2 	rbit	r2, r2
 8002850:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f002 021f 	and.w	r2, r2, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d13a      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0b2      	b.n	80029da <HAL_RCC_ClockConfig+0x2de>
 8002874:	2302      	movs	r3, #2
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d102      	bne.n	800289c <HAL_RCC_ClockConfig+0x1a0>
 8002896:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	e00d      	b.n	80028b8 <HAL_RCC_ClockConfig+0x1bc>
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	2302      	movs	r3, #2
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	2202      	movs	r2, #2
 80028ba:	61ba      	str	r2, [r7, #24]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	fa92 f2a2 	rbit	r2, r2
 80028c2:	617a      	str	r2, [r7, #20]
  return result;
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	fab2 f282 	clz	r2, r2
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f002 021f 	and.w	r2, r2, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f202 	lsl.w	r2, r1, r2
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e079      	b.n	80029da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	491a      	ldr	r1, [pc, #104]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7fe fd50 	bl	800139c <HAL_GetTick>
 80028fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7fe fd4c 	bl	800139c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e061      	b.n	80029da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d214      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4906      	ldr	r1, [pc, #24]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e040      	b.n	80029da <HAL_RCC_ClockConfig+0x2de>
 8002958:	40022000 	.word	0x40022000
 800295c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCC_ClockConfig+0x2e8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	491a      	ldr	r1, [pc, #104]	; (80029e4 <HAL_RCC_ClockConfig+0x2e8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x2e8>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4912      	ldr	r1, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x2e8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800299e:	f000 f829 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4601      	mov	r1, r0
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_RCC_ClockConfig+0x2e8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ac:	22f0      	movs	r2, #240	; 0xf0
 80029ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	fa92 f2a2 	rbit	r2, r2
 80029b6:	60fa      	str	r2, [r7, #12]
  return result;
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	fab2 f282 	clz	r2, r2
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	40d3      	lsrs	r3, r2
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x2ec>)
 80029c4:	5cd3      	ldrb	r3, [r2, r3]
 80029c6:	fa21 f303 	lsr.w	r3, r1, r3
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_RCC_ClockConfig+0x2f0>)
 80029cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_RCC_ClockConfig+0x2f4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fc9e 	bl	8001314 <HAL_InitTick>
  
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3778      	adds	r7, #120	; 0x78
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08006c20 	.word	0x08006c20
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b08b      	sub	sp, #44	; 0x2c
 80029f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a0e:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x30>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x36>
 8002a22:	e03c      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a24:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a26:	623b      	str	r3, [r7, #32]
      break;
 8002a28:	e03c      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a34:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	607a      	str	r2, [r7, #4]
  return result;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	220f      	movs	r2, #15
 8002a58:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	fa92 f2a2 	rbit	r2, r2
 8002a60:	60fa      	str	r2, [r7, #12]
  return result;
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	40d3      	lsrs	r3, r2
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	e004      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	623b      	str	r3, [r7, #32]
      break;
 8002a9c:	e002      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa0:	623b      	str	r3, [r7, #32]
      break;
 8002aa2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	372c      	adds	r7, #44	; 0x2c
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	007a1200 	.word	0x007a1200
 8002abc:	08006c38 	.word	0x08006c38
 8002ac0:	08006c48 	.word	0x08006c48
 8002ac4:	003d0900 	.word	0x003d0900

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ae6:	f7ff ffef 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002aea:	4601      	mov	r1, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002af4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002af8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	603a      	str	r2, [r7, #0]
  return result;
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	40d3      	lsrs	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08006c30 	.word	0x08006c30

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b2a:	f7ff ffcd 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b2e:	4601      	mov	r1, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	fa92 f2a2 	rbit	r2, r2
 8002b44:	603a      	str	r2, [r7, #0]
  return result;
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	40d3      	lsrs	r3, r2
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08006c30 	.word	0x08006c30

08002b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b092      	sub	sp, #72	; 0x48
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80cd 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8c:	4b86      	ldr	r3, [pc, #536]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10e      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b83      	ldr	r3, [pc, #524]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	4a82      	ldr	r2, [pc, #520]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	61d3      	str	r3, [r2, #28]
 8002ba4:	4b80      	ldr	r3, [pc, #512]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b7d      	ldr	r3, [pc, #500]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b7a      	ldr	r3, [pc, #488]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a79      	ldr	r2, [pc, #484]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fbe5 	bl	800139c <HAL_GetTick>
 8002bd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e008      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7fe fbe1 	bl	800139c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	; 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0db      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	4b70      	ldr	r3, [pc, #448]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d07d      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d076      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c12:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2300      	movs	r3, #0
 8002c62:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c64:	4a50      	ldr	r2, [pc, #320]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c68:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d045      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fb92 	bl	800139c <HAL_GetTick>
 8002c78:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fb8e 	bl	800139c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e086      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002c92:	2302      	movs	r3, #2
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	61fb      	str	r3, [r7, #28]
  return result;
 8002caa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	e007      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	613a      	str	r2, [r7, #16]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	fa92 f2a2 	rbit	r2, r2
 8002ce0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0bd      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4926      	ldr	r1, [pc, #152]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	491a      	ldr	r1, [pc, #104]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	f023 0210 	bic.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	490b      	ldr	r1, [pc, #44]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3748      	adds	r7, #72	; 0x48
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
 8002db0:	10908100 	.word	0x10908100

08002db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e095      	b.n	8002ef2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d108      	bne.n	8002de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd6:	d009      	beq.n	8002dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
 8002dde:	e005      	b.n	8002dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fff8 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e2c:	d902      	bls.n	8002e34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e002      	b.n	8002e3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e42:	d007      	beq.n	8002e54 <HAL_SPI_Init+0xa0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	ea42 0103 	orr.w	r1, r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	f003 0204 	and.w	r2, r3, #4
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ed0:	ea42 0103 	orr.w	r1, r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e049      	b.n	8002fa0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fe f91d 	bl	8001160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3304      	adds	r3, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f000 fa4f 	bl	80033dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0202 	mvn.w	r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9d8 	bl	80033a0 <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f9ca 	bl	800338c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f9db 	bl	80033b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9ae 	bl	80033a0 <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9a0 	bl	800338c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9b1 	bl	80033b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0208 	mvn.w	r2, #8
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f984 	bl	80033a0 <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f976 	bl	800338c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f987 	bl	80033b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0210 	mvn.w	r2, #16
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2208      	movs	r2, #8
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f95a 	bl	80033a0 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f94c 	bl	800338c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f95d 	bl	80033b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f926 	bl	8003378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 facc 	bl	80036f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d10e      	bne.n	8003186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d107      	bne.n	8003186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800317e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fabf 	bl	8003704 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d10e      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f90b 	bl	80033c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d10e      	bne.n	80031de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d107      	bne.n	80031de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0220 	mvn.w	r2, #32
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fa7f 	bl	80036dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_ConfigClockSource+0x1c>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0b6      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x18a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003224:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d03e      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xd8>
 8003240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003244:	f200 8087 	bhi.w	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	f000 8086 	beq.w	800335c <HAL_TIM_ConfigClockSource+0x176>
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003254:	d87f      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003256:	2b70      	cmp	r3, #112	; 0x70
 8003258:	d01a      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0xaa>
 800325a:	2b70      	cmp	r3, #112	; 0x70
 800325c:	d87b      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 800325e:	2b60      	cmp	r3, #96	; 0x60
 8003260:	d050      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0x11e>
 8003262:	2b60      	cmp	r3, #96	; 0x60
 8003264:	d877      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003266:	2b50      	cmp	r3, #80	; 0x50
 8003268:	d03c      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xfe>
 800326a:	2b50      	cmp	r3, #80	; 0x50
 800326c:	d873      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d058      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0x13e>
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d86f      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003276:	2b30      	cmp	r3, #48	; 0x30
 8003278:	d064      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d86b      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 800327e:	2b20      	cmp	r3, #32
 8003280:	d060      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 8003282:	2b20      	cmp	r3, #32
 8003284:	d867      	bhi.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d05c      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 800328a:	2b10      	cmp	r3, #16
 800328c:	d05a      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x15e>
 800328e:	e062      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f000 f98e 	bl	80035c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e04f      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f000 f977 	bl	80035c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e0:	609a      	str	r2, [r3, #8]
      break;
 80032e2:	e03c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f000 f8eb 	bl	80034cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2150      	movs	r1, #80	; 0x50
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f944 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003302:	e02c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	461a      	mov	r2, r3
 8003312:	f000 f90a 	bl	800352a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2160      	movs	r1, #96	; 0x60
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f934 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003322:	e01c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	461a      	mov	r2, r3
 8003332:	f000 f8cb 	bl	80034cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f924 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003342:	e00c      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 f91b 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8003354:	e003      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
      break;
 800335a:	e000      	b.n	800335e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800335c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <TIM_Base_SetConfig+0xdc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_Base_SetConfig+0x28>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fa:	d003      	beq.n	8003404 <TIM_Base_SetConfig+0x28>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <TIM_Base_SetConfig+0xe0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d108      	bne.n	8003416 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <TIM_Base_SetConfig+0xdc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <TIM_Base_SetConfig+0x6a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d00f      	beq.n	8003446 <TIM_Base_SetConfig+0x6a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a24      	ldr	r2, [pc, #144]	; (80034bc <TIM_Base_SetConfig+0xe0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_Base_SetConfig+0x6a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <TIM_Base_SetConfig+0xe4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_Base_SetConfig+0x6a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <TIM_Base_SetConfig+0xe8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_Base_SetConfig+0x6a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <TIM_Base_SetConfig+0xec>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d108      	bne.n	8003458 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <TIM_Base_SetConfig+0xdc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00b      	beq.n	800349c <TIM_Base_SetConfig+0xc0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <TIM_Base_SetConfig+0xe4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <TIM_Base_SetConfig+0xc0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <TIM_Base_SetConfig+0xe8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_Base_SetConfig+0xc0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <TIM_Base_SetConfig+0xec>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d103      	bne.n	80034a4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	615a      	str	r2, [r3, #20]
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40014000 	.word	0x40014000
 80034c4:	40014400 	.word	0x40014400
 80034c8:	40014800 	.word	0x40014800

080034cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0201 	bic.w	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 030a 	bic.w	r3, r3, #10
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0210 	bic.w	r2, r3, #16
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f043 0307 	orr.w	r3, r3, #7
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003614:	2302      	movs	r3, #2
 8003616:	e054      	b.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a24      	ldr	r2, [pc, #144]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003648:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d009      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10c      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40014000 	.word	0x40014000

080036dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e040      	b.n	80037ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fd66 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8b6 	bl	80038c8 <UART_SetConfig>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e022      	b.n	80037ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9e0 	bl	8003b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fa67 	bl	8003c78 <UART_CheckIdleState>
 80037aa:	4603      	mov	r3, r0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d178      	bne.n	80038be <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Transmit+0x24>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e071      	b.n	80038c0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2221      	movs	r2, #33	; 0x21
 80037e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ea:	f7fd fdd7 	bl	800139c <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	88fa      	ldrh	r2, [r7, #6]
 80037f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d108      	bne.n	800381c <HAL_UART_Transmit+0x68>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	e003      	b.n	8003824 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003824:	e030      	b.n	8003888 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fac9 	bl	8003dc8 <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e03c      	b.n	80038c0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003858:	b292      	uxth	r2, r2
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	3302      	adds	r3, #2
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e008      	b.n	8003876 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	b292      	uxth	r2, r2
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1c8      	bne.n	8003826 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	2140      	movs	r1, #64	; 0x40
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa92 	bl	8003dc8 <UART_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e005      	b.n	80038c0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e000      	b.n	80038c0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
  }
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b8a      	ldr	r3, [pc, #552]	; (8003b1c <UART_SetConfig+0x254>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a78      	ldr	r2, [pc, #480]	; (8003b20 <UART_SetConfig+0x258>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d120      	bne.n	8003986 <UART_SetConfig+0xbe>
 8003944:	4b77      	ldr	r3, [pc, #476]	; (8003b24 <UART_SetConfig+0x25c>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b03      	cmp	r3, #3
 800394e:	d817      	bhi.n	8003980 <UART_SetConfig+0xb8>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <UART_SetConfig+0x90>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	08003969 	.word	0x08003969
 800395c:	08003975 	.word	0x08003975
 8003960:	0800397b 	.word	0x0800397b
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2300      	movs	r3, #0
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e01d      	b.n	80039aa <UART_SetConfig+0xe2>
 800396e:	2302      	movs	r3, #2
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e01a      	b.n	80039aa <UART_SetConfig+0xe2>
 8003974:	2304      	movs	r3, #4
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e017      	b.n	80039aa <UART_SetConfig+0xe2>
 800397a:	2308      	movs	r3, #8
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e014      	b.n	80039aa <UART_SetConfig+0xe2>
 8003980:	2310      	movs	r3, #16
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e011      	b.n	80039aa <UART_SetConfig+0xe2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <UART_SetConfig+0x260>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d102      	bne.n	8003996 <UART_SetConfig+0xce>
 8003990:	2300      	movs	r3, #0
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e009      	b.n	80039aa <UART_SetConfig+0xe2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a64      	ldr	r2, [pc, #400]	; (8003b2c <UART_SetConfig+0x264>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d102      	bne.n	80039a6 <UART_SetConfig+0xde>
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e001      	b.n	80039aa <UART_SetConfig+0xe2>
 80039a6:	2310      	movs	r3, #16
 80039a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b2:	d15a      	bne.n	8003a6a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d827      	bhi.n	8003a0a <UART_SetConfig+0x142>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <UART_SetConfig+0xf8>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039ed 	.word	0x080039ed
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	08003a0b 	.word	0x08003a0b
 80039d0:	080039fb 	.word	0x080039fb
 80039d4:	08003a0b 	.word	0x08003a0b
 80039d8:	08003a0b 	.word	0x08003a0b
 80039dc:	08003a0b 	.word	0x08003a0b
 80039e0:	08003a03 	.word	0x08003a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e4:	f7ff f87c 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80039e8:	61b8      	str	r0, [r7, #24]
        break;
 80039ea:	e013      	b.n	8003a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039ec:	f7ff f89a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80039f0:	61b8      	str	r0, [r7, #24]
        break;
 80039f2:	e00f      	b.n	8003a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f4:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <UART_SetConfig+0x268>)
 80039f6:	61bb      	str	r3, [r7, #24]
        break;
 80039f8:	e00c      	b.n	8003a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fa:	f7fe fffb 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80039fe:	61b8      	str	r0, [r7, #24]
        break;
 8003a00:	e008      	b.n	8003a14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e004      	b.n	8003a14 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	77bb      	strb	r3, [r7, #30]
        break;
 8003a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d074      	beq.n	8003b04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	005a      	lsls	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	d916      	bls.n	8003a64 <UART_SetConfig+0x19c>
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d212      	bcs.n	8003a64 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f023 030f 	bic.w	r3, r3, #15
 8003a46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	89fa      	ldrh	r2, [r7, #14]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	e04f      	b.n	8003b04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	77bb      	strb	r3, [r7, #30]
 8003a68:	e04c      	b.n	8003b04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a6a:	7ffb      	ldrb	r3, [r7, #31]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d828      	bhi.n	8003ac2 <UART_SetConfig+0x1fa>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <UART_SetConfig+0x1b0>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003aad 	.word	0x08003aad
 8003a84:	08003ac3 	.word	0x08003ac3
 8003a88:	08003ab3 	.word	0x08003ab3
 8003a8c:	08003ac3 	.word	0x08003ac3
 8003a90:	08003ac3 	.word	0x08003ac3
 8003a94:	08003ac3 	.word	0x08003ac3
 8003a98:	08003abb 	.word	0x08003abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7ff f820 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003aa0:	61b8      	str	r0, [r7, #24]
        break;
 8003aa2:	e013      	b.n	8003acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa4:	f7ff f83e 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8003aa8:	61b8      	str	r0, [r7, #24]
        break;
 8003aaa:	e00f      	b.n	8003acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aac:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <UART_SetConfig+0x268>)
 8003aae:	61bb      	str	r3, [r7, #24]
        break;
 8003ab0:	e00c      	b.n	8003acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab2:	f7fe ff9f 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 8003ab6:	61b8      	str	r0, [r7, #24]
        break;
 8003ab8:	e008      	b.n	8003acc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e004      	b.n	8003acc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aca:	bf00      	nop
    }

    if (pclk != 0U)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d018      	beq.n	8003b04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	085a      	lsrs	r2, r3, #1
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	441a      	add	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d909      	bls.n	8003b00 <UART_SetConfig+0x238>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d205      	bcs.n	8003b00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	e001      	b.n	8003b04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b10:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	efff69f3 	.word	0xefff69f3
 8003b20:	40013800 	.word	0x40013800
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40004400 	.word	0x40004400
 8003b2c:	40004800 	.word	0x40004800
 8003b30:	007a1200 	.word	0x007a1200

08003b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01a      	beq.n	8003c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c32:	d10a      	bne.n	8003c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b098      	sub	sp, #96	; 0x60
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c88:	f7fd fb88 	bl	800139c <HAL_GetTick>
 8003c8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d12e      	bne.n	8003cfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f88c 	bl	8003dc8 <UART_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d021      	beq.n	8003cfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cca:	653b      	str	r3, [r7, #80]	; 0x50
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e6      	bne.n	8003cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e062      	b.n	8003dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d149      	bne.n	8003d9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d10:	2200      	movs	r2, #0
 8003d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f856 	bl	8003dc8 <UART_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d03c      	beq.n	8003d9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
 8003d42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e6      	bne.n	8003d22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d74:	61fa      	str	r2, [r7, #28]
 8003d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	617b      	str	r3, [r7, #20]
   return(result);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e011      	b.n	8003dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3758      	adds	r7, #88	; 0x58
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd8:	e049      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de0:	d045      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fd fadb 	bl	800139c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e048      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d031      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d110      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f838 	bl	8003e96 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e029      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e48:	d111      	bne.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f81e 	bl	8003e96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e00f      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d0a6      	beq.n	8003dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b095      	sub	sp, #84	; 0x54
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e6      	bne.n	8003e9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d118      	bne.n	8003f3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
 8003f20:	647b      	str	r3, [r7, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	613b      	str	r3, [r7, #16]
   return(result);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e6      	bne.n	8003f0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f52:	bf00      	nop
 8003f54:	3754      	adds	r7, #84	; 0x54
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <__errno>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	; (8003f68 <__errno+0x8>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	2000000c 	.word	0x2000000c

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4d0d      	ldr	r5, [pc, #52]	; (8003fa4 <__libc_init_array+0x38>)
 8003f70:	4c0d      	ldr	r4, [pc, #52]	; (8003fa8 <__libc_init_array+0x3c>)
 8003f72:	1b64      	subs	r4, r4, r5
 8003f74:	10a4      	asrs	r4, r4, #2
 8003f76:	2600      	movs	r6, #0
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	4d0b      	ldr	r5, [pc, #44]	; (8003fac <__libc_init_array+0x40>)
 8003f7e:	4c0c      	ldr	r4, [pc, #48]	; (8003fb0 <__libc_init_array+0x44>)
 8003f80:	f002 fe3c 	bl	8006bfc <_init>
 8003f84:	1b64      	subs	r4, r4, r5
 8003f86:	10a4      	asrs	r4, r4, #2
 8003f88:	2600      	movs	r6, #0
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	0800703c 	.word	0x0800703c
 8003fa8:	0800703c 	.word	0x0800703c
 8003fac:	0800703c 	.word	0x0800703c
 8003fb0:	08007040 	.word	0x08007040

08003fb4 <memset>:
 8003fb4:	4402      	add	r2, r0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <__cvt>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	ec55 4b10 	vmov	r4, r5, d0
 8003fcc:	2d00      	cmp	r5, #0
 8003fce:	460e      	mov	r6, r1
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	462b      	mov	r3, r5
 8003fd4:	bfbb      	ittet	lt
 8003fd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003fda:	461d      	movlt	r5, r3
 8003fdc:	2300      	movge	r3, #0
 8003fde:	232d      	movlt	r3, #45	; 0x2d
 8003fe0:	700b      	strb	r3, [r1, #0]
 8003fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fe4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fe8:	4691      	mov	r9, r2
 8003fea:	f023 0820 	bic.w	r8, r3, #32
 8003fee:	bfbc      	itt	lt
 8003ff0:	4622      	movlt	r2, r4
 8003ff2:	4614      	movlt	r4, r2
 8003ff4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ff8:	d005      	beq.n	8004006 <__cvt+0x42>
 8003ffa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ffe:	d100      	bne.n	8004002 <__cvt+0x3e>
 8004000:	3601      	adds	r6, #1
 8004002:	2102      	movs	r1, #2
 8004004:	e000      	b.n	8004008 <__cvt+0x44>
 8004006:	2103      	movs	r1, #3
 8004008:	ab03      	add	r3, sp, #12
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	ab02      	add	r3, sp, #8
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	ec45 4b10 	vmov	d0, r4, r5
 8004014:	4653      	mov	r3, sl
 8004016:	4632      	mov	r2, r6
 8004018:	f000 fece 	bl	8004db8 <_dtoa_r>
 800401c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004020:	4607      	mov	r7, r0
 8004022:	d102      	bne.n	800402a <__cvt+0x66>
 8004024:	f019 0f01 	tst.w	r9, #1
 8004028:	d022      	beq.n	8004070 <__cvt+0xac>
 800402a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800402e:	eb07 0906 	add.w	r9, r7, r6
 8004032:	d110      	bne.n	8004056 <__cvt+0x92>
 8004034:	783b      	ldrb	r3, [r7, #0]
 8004036:	2b30      	cmp	r3, #48	; 0x30
 8004038:	d10a      	bne.n	8004050 <__cvt+0x8c>
 800403a:	2200      	movs	r2, #0
 800403c:	2300      	movs	r3, #0
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 8004046:	b918      	cbnz	r0, 8004050 <__cvt+0x8c>
 8004048:	f1c6 0601 	rsb	r6, r6, #1
 800404c:	f8ca 6000 	str.w	r6, [sl]
 8004050:	f8da 3000 	ldr.w	r3, [sl]
 8004054:	4499      	add	r9, r3
 8004056:	2200      	movs	r2, #0
 8004058:	2300      	movs	r3, #0
 800405a:	4620      	mov	r0, r4
 800405c:	4629      	mov	r1, r5
 800405e:	f7fc fd33 	bl	8000ac8 <__aeabi_dcmpeq>
 8004062:	b108      	cbz	r0, 8004068 <__cvt+0xa4>
 8004064:	f8cd 900c 	str.w	r9, [sp, #12]
 8004068:	2230      	movs	r2, #48	; 0x30
 800406a:	9b03      	ldr	r3, [sp, #12]
 800406c:	454b      	cmp	r3, r9
 800406e:	d307      	bcc.n	8004080 <__cvt+0xbc>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004074:	1bdb      	subs	r3, r3, r7
 8004076:	4638      	mov	r0, r7
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	b004      	add	sp, #16
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004080:	1c59      	adds	r1, r3, #1
 8004082:	9103      	str	r1, [sp, #12]
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	e7f0      	b.n	800406a <__cvt+0xa6>

08004088 <__exponent>:
 8004088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800408a:	4603      	mov	r3, r0
 800408c:	2900      	cmp	r1, #0
 800408e:	bfb8      	it	lt
 8004090:	4249      	neglt	r1, r1
 8004092:	f803 2b02 	strb.w	r2, [r3], #2
 8004096:	bfb4      	ite	lt
 8004098:	222d      	movlt	r2, #45	; 0x2d
 800409a:	222b      	movge	r2, #43	; 0x2b
 800409c:	2909      	cmp	r1, #9
 800409e:	7042      	strb	r2, [r0, #1]
 80040a0:	dd2a      	ble.n	80040f8 <__exponent+0x70>
 80040a2:	f10d 0407 	add.w	r4, sp, #7
 80040a6:	46a4      	mov	ip, r4
 80040a8:	270a      	movs	r7, #10
 80040aa:	46a6      	mov	lr, r4
 80040ac:	460a      	mov	r2, r1
 80040ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80040b2:	fb07 1516 	mls	r5, r7, r6, r1
 80040b6:	3530      	adds	r5, #48	; 0x30
 80040b8:	2a63      	cmp	r2, #99	; 0x63
 80040ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80040be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040c2:	4631      	mov	r1, r6
 80040c4:	dcf1      	bgt.n	80040aa <__exponent+0x22>
 80040c6:	3130      	adds	r1, #48	; 0x30
 80040c8:	f1ae 0502 	sub.w	r5, lr, #2
 80040cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040d0:	1c44      	adds	r4, r0, #1
 80040d2:	4629      	mov	r1, r5
 80040d4:	4561      	cmp	r1, ip
 80040d6:	d30a      	bcc.n	80040ee <__exponent+0x66>
 80040d8:	f10d 0209 	add.w	r2, sp, #9
 80040dc:	eba2 020e 	sub.w	r2, r2, lr
 80040e0:	4565      	cmp	r5, ip
 80040e2:	bf88      	it	hi
 80040e4:	2200      	movhi	r2, #0
 80040e6:	4413      	add	r3, r2
 80040e8:	1a18      	subs	r0, r3, r0
 80040ea:	b003      	add	sp, #12
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040f6:	e7ed      	b.n	80040d4 <__exponent+0x4c>
 80040f8:	2330      	movs	r3, #48	; 0x30
 80040fa:	3130      	adds	r1, #48	; 0x30
 80040fc:	7083      	strb	r3, [r0, #2]
 80040fe:	70c1      	strb	r1, [r0, #3]
 8004100:	1d03      	adds	r3, r0, #4
 8004102:	e7f1      	b.n	80040e8 <__exponent+0x60>

08004104 <_printf_float>:
 8004104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004108:	ed2d 8b02 	vpush	{d8}
 800410c:	b08d      	sub	sp, #52	; 0x34
 800410e:	460c      	mov	r4, r1
 8004110:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004114:	4616      	mov	r6, r2
 8004116:	461f      	mov	r7, r3
 8004118:	4605      	mov	r5, r0
 800411a:	f001 fdf1 	bl	8005d00 <_localeconv_r>
 800411e:	f8d0 a000 	ldr.w	sl, [r0]
 8004122:	4650      	mov	r0, sl
 8004124:	f7fc f854 	bl	80001d0 <strlen>
 8004128:	2300      	movs	r3, #0
 800412a:	930a      	str	r3, [sp, #40]	; 0x28
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	9305      	str	r3, [sp, #20]
 8004130:	f8d8 3000 	ldr.w	r3, [r8]
 8004134:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004138:	3307      	adds	r3, #7
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	f103 0208 	add.w	r2, r3, #8
 8004142:	f8c8 2000 	str.w	r2, [r8]
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800414e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004156:	9307      	str	r3, [sp, #28]
 8004158:	f8cd 8018 	str.w	r8, [sp, #24]
 800415c:	ee08 0a10 	vmov	s16, r0
 8004160:	4b9f      	ldr	r3, [pc, #636]	; (80043e0 <_printf_float+0x2dc>)
 8004162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800416a:	f7fc fcdf 	bl	8000b2c <__aeabi_dcmpun>
 800416e:	bb88      	cbnz	r0, 80041d4 <_printf_float+0xd0>
 8004170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <_printf_float+0x2dc>)
 8004176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800417a:	f7fc fcb9 	bl	8000af0 <__aeabi_dcmple>
 800417e:	bb48      	cbnz	r0, 80041d4 <_printf_float+0xd0>
 8004180:	2200      	movs	r2, #0
 8004182:	2300      	movs	r3, #0
 8004184:	4640      	mov	r0, r8
 8004186:	4649      	mov	r1, r9
 8004188:	f7fc fca8 	bl	8000adc <__aeabi_dcmplt>
 800418c:	b110      	cbz	r0, 8004194 <_printf_float+0x90>
 800418e:	232d      	movs	r3, #45	; 0x2d
 8004190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004194:	4b93      	ldr	r3, [pc, #588]	; (80043e4 <_printf_float+0x2e0>)
 8004196:	4894      	ldr	r0, [pc, #592]	; (80043e8 <_printf_float+0x2e4>)
 8004198:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800419c:	bf94      	ite	ls
 800419e:	4698      	movls	r8, r3
 80041a0:	4680      	movhi	r8, r0
 80041a2:	2303      	movs	r3, #3
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	9b05      	ldr	r3, [sp, #20]
 80041a8:	f023 0204 	bic.w	r2, r3, #4
 80041ac:	6022      	str	r2, [r4, #0]
 80041ae:	f04f 0900 	mov.w	r9, #0
 80041b2:	9700      	str	r7, [sp, #0]
 80041b4:	4633      	mov	r3, r6
 80041b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 f9d8 	bl	8004570 <_printf_common>
 80041c0:	3001      	adds	r0, #1
 80041c2:	f040 8090 	bne.w	80042e6 <_printf_float+0x1e2>
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ca:	b00d      	add	sp, #52	; 0x34
 80041cc:	ecbd 8b02 	vpop	{d8}
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	4642      	mov	r2, r8
 80041d6:	464b      	mov	r3, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	4649      	mov	r1, r9
 80041dc:	f7fc fca6 	bl	8000b2c <__aeabi_dcmpun>
 80041e0:	b140      	cbz	r0, 80041f4 <_printf_float+0xf0>
 80041e2:	464b      	mov	r3, r9
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bfbc      	itt	lt
 80041e8:	232d      	movlt	r3, #45	; 0x2d
 80041ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041ee:	487f      	ldr	r0, [pc, #508]	; (80043ec <_printf_float+0x2e8>)
 80041f0:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <_printf_float+0x2ec>)
 80041f2:	e7d1      	b.n	8004198 <_printf_float+0x94>
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041fa:	9206      	str	r2, [sp, #24]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	d13f      	bne.n	8004280 <_printf_float+0x17c>
 8004200:	2306      	movs	r3, #6
 8004202:	6063      	str	r3, [r4, #4]
 8004204:	9b05      	ldr	r3, [sp, #20]
 8004206:	6861      	ldr	r1, [r4, #4]
 8004208:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800420c:	2300      	movs	r3, #0
 800420e:	9303      	str	r3, [sp, #12]
 8004210:	ab0a      	add	r3, sp, #40	; 0x28
 8004212:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004216:	ab09      	add	r3, sp, #36	; 0x24
 8004218:	ec49 8b10 	vmov	d0, r8, r9
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	6022      	str	r2, [r4, #0]
 8004220:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004224:	4628      	mov	r0, r5
 8004226:	f7ff fecd 	bl	8003fc4 <__cvt>
 800422a:	9b06      	ldr	r3, [sp, #24]
 800422c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800422e:	2b47      	cmp	r3, #71	; 0x47
 8004230:	4680      	mov	r8, r0
 8004232:	d108      	bne.n	8004246 <_printf_float+0x142>
 8004234:	1cc8      	adds	r0, r1, #3
 8004236:	db02      	blt.n	800423e <_printf_float+0x13a>
 8004238:	6863      	ldr	r3, [r4, #4]
 800423a:	4299      	cmp	r1, r3
 800423c:	dd41      	ble.n	80042c2 <_printf_float+0x1be>
 800423e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004242:	fa5f fb8b 	uxtb.w	fp, fp
 8004246:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800424a:	d820      	bhi.n	800428e <_printf_float+0x18a>
 800424c:	3901      	subs	r1, #1
 800424e:	465a      	mov	r2, fp
 8004250:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004254:	9109      	str	r1, [sp, #36]	; 0x24
 8004256:	f7ff ff17 	bl	8004088 <__exponent>
 800425a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425c:	1813      	adds	r3, r2, r0
 800425e:	2a01      	cmp	r2, #1
 8004260:	4681      	mov	r9, r0
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	dc02      	bgt.n	800426c <_printf_float+0x168>
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	07d2      	lsls	r2, r2, #31
 800426a:	d501      	bpl.n	8004270 <_printf_float+0x16c>
 800426c:	3301      	adds	r3, #1
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004274:	2b00      	cmp	r3, #0
 8004276:	d09c      	beq.n	80041b2 <_printf_float+0xae>
 8004278:	232d      	movs	r3, #45	; 0x2d
 800427a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427e:	e798      	b.n	80041b2 <_printf_float+0xae>
 8004280:	9a06      	ldr	r2, [sp, #24]
 8004282:	2a47      	cmp	r2, #71	; 0x47
 8004284:	d1be      	bne.n	8004204 <_printf_float+0x100>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1bc      	bne.n	8004204 <_printf_float+0x100>
 800428a:	2301      	movs	r3, #1
 800428c:	e7b9      	b.n	8004202 <_printf_float+0xfe>
 800428e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004292:	d118      	bne.n	80042c6 <_printf_float+0x1c2>
 8004294:	2900      	cmp	r1, #0
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	dd0b      	ble.n	80042b2 <_printf_float+0x1ae>
 800429a:	6121      	str	r1, [r4, #16]
 800429c:	b913      	cbnz	r3, 80042a4 <_printf_float+0x1a0>
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	07d0      	lsls	r0, r2, #31
 80042a2:	d502      	bpl.n	80042aa <_printf_float+0x1a6>
 80042a4:	3301      	adds	r3, #1
 80042a6:	440b      	add	r3, r1
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80042ac:	f04f 0900 	mov.w	r9, #0
 80042b0:	e7de      	b.n	8004270 <_printf_float+0x16c>
 80042b2:	b913      	cbnz	r3, 80042ba <_printf_float+0x1b6>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	07d2      	lsls	r2, r2, #31
 80042b8:	d501      	bpl.n	80042be <_printf_float+0x1ba>
 80042ba:	3302      	adds	r3, #2
 80042bc:	e7f4      	b.n	80042a8 <_printf_float+0x1a4>
 80042be:	2301      	movs	r3, #1
 80042c0:	e7f2      	b.n	80042a8 <_printf_float+0x1a4>
 80042c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80042c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c8:	4299      	cmp	r1, r3
 80042ca:	db05      	blt.n	80042d8 <_printf_float+0x1d4>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	6121      	str	r1, [r4, #16]
 80042d0:	07d8      	lsls	r0, r3, #31
 80042d2:	d5ea      	bpl.n	80042aa <_printf_float+0x1a6>
 80042d4:	1c4b      	adds	r3, r1, #1
 80042d6:	e7e7      	b.n	80042a8 <_printf_float+0x1a4>
 80042d8:	2900      	cmp	r1, #0
 80042da:	bfd4      	ite	le
 80042dc:	f1c1 0202 	rsble	r2, r1, #2
 80042e0:	2201      	movgt	r2, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	e7e0      	b.n	80042a8 <_printf_float+0x1a4>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	055a      	lsls	r2, r3, #21
 80042ea:	d407      	bmi.n	80042fc <_printf_float+0x1f8>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	4642      	mov	r2, r8
 80042f0:	4631      	mov	r1, r6
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	d12c      	bne.n	8004354 <_printf_float+0x250>
 80042fa:	e764      	b.n	80041c6 <_printf_float+0xc2>
 80042fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004300:	f240 80e0 	bls.w	80044c4 <_printf_float+0x3c0>
 8004304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	f7fc fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004310:	2800      	cmp	r0, #0
 8004312:	d034      	beq.n	800437e <_printf_float+0x27a>
 8004314:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <_printf_float+0x2f0>)
 8004316:	2301      	movs	r3, #1
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f af51 	beq.w	80041c6 <_printf_float+0xc2>
 8004324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004328:	429a      	cmp	r2, r3
 800432a:	db02      	blt.n	8004332 <_printf_float+0x22e>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	07d8      	lsls	r0, r3, #31
 8004330:	d510      	bpl.n	8004354 <_printf_float+0x250>
 8004332:	ee18 3a10 	vmov	r3, s16
 8004336:	4652      	mov	r2, sl
 8004338:	4631      	mov	r1, r6
 800433a:	4628      	mov	r0, r5
 800433c:	47b8      	blx	r7
 800433e:	3001      	adds	r0, #1
 8004340:	f43f af41 	beq.w	80041c6 <_printf_float+0xc2>
 8004344:	f04f 0800 	mov.w	r8, #0
 8004348:	f104 091a 	add.w	r9, r4, #26
 800434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	4543      	cmp	r3, r8
 8004352:	dc09      	bgt.n	8004368 <_printf_float+0x264>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	079b      	lsls	r3, r3, #30
 8004358:	f100 8105 	bmi.w	8004566 <_printf_float+0x462>
 800435c:	68e0      	ldr	r0, [r4, #12]
 800435e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004360:	4298      	cmp	r0, r3
 8004362:	bfb8      	it	lt
 8004364:	4618      	movlt	r0, r3
 8004366:	e730      	b.n	80041ca <_printf_float+0xc6>
 8004368:	2301      	movs	r3, #1
 800436a:	464a      	mov	r2, r9
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f af27 	beq.w	80041c6 <_printf_float+0xc2>
 8004378:	f108 0801 	add.w	r8, r8, #1
 800437c:	e7e6      	b.n	800434c <_printf_float+0x248>
 800437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	dc39      	bgt.n	80043f8 <_printf_float+0x2f4>
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <_printf_float+0x2f0>)
 8004386:	2301      	movs	r3, #1
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	47b8      	blx	r7
 800438e:	3001      	adds	r0, #1
 8004390:	f43f af19 	beq.w	80041c6 <_printf_float+0xc2>
 8004394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004398:	4313      	orrs	r3, r2
 800439a:	d102      	bne.n	80043a2 <_printf_float+0x29e>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	07d9      	lsls	r1, r3, #31
 80043a0:	d5d8      	bpl.n	8004354 <_printf_float+0x250>
 80043a2:	ee18 3a10 	vmov	r3, s16
 80043a6:	4652      	mov	r2, sl
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	f43f af09 	beq.w	80041c6 <_printf_float+0xc2>
 80043b4:	f04f 0900 	mov.w	r9, #0
 80043b8:	f104 0a1a 	add.w	sl, r4, #26
 80043bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043be:	425b      	negs	r3, r3
 80043c0:	454b      	cmp	r3, r9
 80043c2:	dc01      	bgt.n	80043c8 <_printf_float+0x2c4>
 80043c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c6:	e792      	b.n	80042ee <_printf_float+0x1ea>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4652      	mov	r2, sl
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f aef7 	beq.w	80041c6 <_printf_float+0xc2>
 80043d8:	f109 0901 	add.w	r9, r9, #1
 80043dc:	e7ee      	b.n	80043bc <_printf_float+0x2b8>
 80043de:	bf00      	nop
 80043e0:	7fefffff 	.word	0x7fefffff
 80043e4:	08006c5c 	.word	0x08006c5c
 80043e8:	08006c60 	.word	0x08006c60
 80043ec:	08006c68 	.word	0x08006c68
 80043f0:	08006c64 	.word	0x08006c64
 80043f4:	08006c6c 	.word	0x08006c6c
 80043f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bfa8      	it	ge
 8004400:	461a      	movge	r2, r3
 8004402:	2a00      	cmp	r2, #0
 8004404:	4691      	mov	r9, r2
 8004406:	dc37      	bgt.n	8004478 <_printf_float+0x374>
 8004408:	f04f 0b00 	mov.w	fp, #0
 800440c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004410:	f104 021a 	add.w	r2, r4, #26
 8004414:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004416:	9305      	str	r3, [sp, #20]
 8004418:	eba3 0309 	sub.w	r3, r3, r9
 800441c:	455b      	cmp	r3, fp
 800441e:	dc33      	bgt.n	8004488 <_printf_float+0x384>
 8004420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004424:	429a      	cmp	r2, r3
 8004426:	db3b      	blt.n	80044a0 <_printf_float+0x39c>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	07da      	lsls	r2, r3, #31
 800442c:	d438      	bmi.n	80044a0 <_printf_float+0x39c>
 800442e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004430:	9b05      	ldr	r3, [sp, #20]
 8004432:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	eba2 0901 	sub.w	r9, r2, r1
 800443a:	4599      	cmp	r9, r3
 800443c:	bfa8      	it	ge
 800443e:	4699      	movge	r9, r3
 8004440:	f1b9 0f00 	cmp.w	r9, #0
 8004444:	dc35      	bgt.n	80044b2 <_printf_float+0x3ae>
 8004446:	f04f 0800 	mov.w	r8, #0
 800444a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800444e:	f104 0a1a 	add.w	sl, r4, #26
 8004452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	eba3 0309 	sub.w	r3, r3, r9
 800445c:	4543      	cmp	r3, r8
 800445e:	f77f af79 	ble.w	8004354 <_printf_float+0x250>
 8004462:	2301      	movs	r3, #1
 8004464:	4652      	mov	r2, sl
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	f43f aeaa 	beq.w	80041c6 <_printf_float+0xc2>
 8004472:	f108 0801 	add.w	r8, r8, #1
 8004476:	e7ec      	b.n	8004452 <_printf_float+0x34e>
 8004478:	4613      	mov	r3, r2
 800447a:	4631      	mov	r1, r6
 800447c:	4642      	mov	r2, r8
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	d1c0      	bne.n	8004408 <_printf_float+0x304>
 8004486:	e69e      	b.n	80041c6 <_printf_float+0xc2>
 8004488:	2301      	movs	r3, #1
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	9205      	str	r2, [sp, #20]
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f43f ae97 	beq.w	80041c6 <_printf_float+0xc2>
 8004498:	9a05      	ldr	r2, [sp, #20]
 800449a:	f10b 0b01 	add.w	fp, fp, #1
 800449e:	e7b9      	b.n	8004414 <_printf_float+0x310>
 80044a0:	ee18 3a10 	vmov	r3, s16
 80044a4:	4652      	mov	r2, sl
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	47b8      	blx	r7
 80044ac:	3001      	adds	r0, #1
 80044ae:	d1be      	bne.n	800442e <_printf_float+0x32a>
 80044b0:	e689      	b.n	80041c6 <_printf_float+0xc2>
 80044b2:	9a05      	ldr	r2, [sp, #20]
 80044b4:	464b      	mov	r3, r9
 80044b6:	4442      	add	r2, r8
 80044b8:	4631      	mov	r1, r6
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	d1c1      	bne.n	8004446 <_printf_float+0x342>
 80044c2:	e680      	b.n	80041c6 <_printf_float+0xc2>
 80044c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044c6:	2a01      	cmp	r2, #1
 80044c8:	dc01      	bgt.n	80044ce <_printf_float+0x3ca>
 80044ca:	07db      	lsls	r3, r3, #31
 80044cc:	d538      	bpl.n	8004540 <_printf_float+0x43c>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4642      	mov	r2, r8
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	47b8      	blx	r7
 80044d8:	3001      	adds	r0, #1
 80044da:	f43f ae74 	beq.w	80041c6 <_printf_float+0xc2>
 80044de:	ee18 3a10 	vmov	r3, s16
 80044e2:	4652      	mov	r2, sl
 80044e4:	4631      	mov	r1, r6
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f ae6b 	beq.w	80041c6 <_printf_float+0xc2>
 80044f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044f4:	2200      	movs	r2, #0
 80044f6:	2300      	movs	r3, #0
 80044f8:	f7fc fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80044fc:	b9d8      	cbnz	r0, 8004536 <_printf_float+0x432>
 80044fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004500:	f108 0201 	add.w	r2, r8, #1
 8004504:	3b01      	subs	r3, #1
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	d10e      	bne.n	800452e <_printf_float+0x42a>
 8004510:	e659      	b.n	80041c6 <_printf_float+0xc2>
 8004512:	2301      	movs	r3, #1
 8004514:	4652      	mov	r2, sl
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f ae52 	beq.w	80041c6 <_printf_float+0xc2>
 8004522:	f108 0801 	add.w	r8, r8, #1
 8004526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004528:	3b01      	subs	r3, #1
 800452a:	4543      	cmp	r3, r8
 800452c:	dcf1      	bgt.n	8004512 <_printf_float+0x40e>
 800452e:	464b      	mov	r3, r9
 8004530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004534:	e6dc      	b.n	80042f0 <_printf_float+0x1ec>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	f104 0a1a 	add.w	sl, r4, #26
 800453e:	e7f2      	b.n	8004526 <_printf_float+0x422>
 8004540:	2301      	movs	r3, #1
 8004542:	4642      	mov	r2, r8
 8004544:	e7df      	b.n	8004506 <_printf_float+0x402>
 8004546:	2301      	movs	r3, #1
 8004548:	464a      	mov	r2, r9
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae38 	beq.w	80041c6 <_printf_float+0xc2>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800455e:	1a5b      	subs	r3, r3, r1
 8004560:	4543      	cmp	r3, r8
 8004562:	dcf0      	bgt.n	8004546 <_printf_float+0x442>
 8004564:	e6fa      	b.n	800435c <_printf_float+0x258>
 8004566:	f04f 0800 	mov.w	r8, #0
 800456a:	f104 0919 	add.w	r9, r4, #25
 800456e:	e7f4      	b.n	800455a <_printf_float+0x456>

08004570 <_printf_common>:
 8004570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	4616      	mov	r6, r2
 8004576:	4699      	mov	r9, r3
 8004578:	688a      	ldr	r2, [r1, #8]
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004580:	4293      	cmp	r3, r2
 8004582:	bfb8      	it	lt
 8004584:	4613      	movlt	r3, r2
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800458c:	4607      	mov	r7, r0
 800458e:	460c      	mov	r4, r1
 8004590:	b10a      	cbz	r2, 8004596 <_printf_common+0x26>
 8004592:	3301      	adds	r3, #1
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	0699      	lsls	r1, r3, #26
 800459a:	bf42      	ittt	mi
 800459c:	6833      	ldrmi	r3, [r6, #0]
 800459e:	3302      	addmi	r3, #2
 80045a0:	6033      	strmi	r3, [r6, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	f015 0506 	ands.w	r5, r5, #6
 80045a8:	d106      	bne.n	80045b8 <_printf_common+0x48>
 80045aa:	f104 0a19 	add.w	sl, r4, #25
 80045ae:	68e3      	ldr	r3, [r4, #12]
 80045b0:	6832      	ldr	r2, [r6, #0]
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	dc26      	bgt.n	8004606 <_printf_common+0x96>
 80045b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045bc:	1e13      	subs	r3, r2, #0
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	bf18      	it	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	0692      	lsls	r2, r2, #26
 80045c6:	d42b      	bmi.n	8004620 <_printf_common+0xb0>
 80045c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045cc:	4649      	mov	r1, r9
 80045ce:	4638      	mov	r0, r7
 80045d0:	47c0      	blx	r8
 80045d2:	3001      	adds	r0, #1
 80045d4:	d01e      	beq.n	8004614 <_printf_common+0xa4>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	68e5      	ldr	r5, [r4, #12]
 80045da:	6832      	ldr	r2, [r6, #0]
 80045dc:	f003 0306 	and.w	r3, r3, #6
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	bf08      	it	eq
 80045e4:	1aad      	subeq	r5, r5, r2
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	bf0c      	ite	eq
 80045ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f0:	2500      	movne	r5, #0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bfc4      	itt	gt
 80045f6:	1a9b      	subgt	r3, r3, r2
 80045f8:	18ed      	addgt	r5, r5, r3
 80045fa:	2600      	movs	r6, #0
 80045fc:	341a      	adds	r4, #26
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d11a      	bne.n	8004638 <_printf_common+0xc8>
 8004602:	2000      	movs	r0, #0
 8004604:	e008      	b.n	8004618 <_printf_common+0xa8>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4649      	mov	r1, r9
 800460c:	4638      	mov	r0, r7
 800460e:	47c0      	blx	r8
 8004610:	3001      	adds	r0, #1
 8004612:	d103      	bne.n	800461c <_printf_common+0xac>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	3501      	adds	r5, #1
 800461e:	e7c6      	b.n	80045ae <_printf_common+0x3e>
 8004620:	18e1      	adds	r1, r4, r3
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	2030      	movs	r0, #48	; 0x30
 8004626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800462a:	4422      	add	r2, r4
 800462c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004634:	3302      	adds	r3, #2
 8004636:	e7c7      	b.n	80045c8 <_printf_common+0x58>
 8004638:	2301      	movs	r3, #1
 800463a:	4622      	mov	r2, r4
 800463c:	4649      	mov	r1, r9
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d0e6      	beq.n	8004614 <_printf_common+0xa4>
 8004646:	3601      	adds	r6, #1
 8004648:	e7d9      	b.n	80045fe <_printf_common+0x8e>
	...

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	460c      	mov	r4, r1
 8004652:	4691      	mov	r9, r2
 8004654:	7e27      	ldrb	r7, [r4, #24]
 8004656:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004658:	2f78      	cmp	r7, #120	; 0x78
 800465a:	4680      	mov	r8, r0
 800465c:	469a      	mov	sl, r3
 800465e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	; 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d8 	beq.w	800481e <_printf_i+0x1d2>
 800466e:	2f58      	cmp	r7, #88	; 0x58
 8004670:	f000 80a3 	beq.w	80047ba <_printf_i+0x16e>
 8004674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a001      	add	r0, pc, #4	; (adr r0, 800468c <_printf_i+0x40>)
 8004688:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	08004805 	.word	0x08004805
 80046bc:	08004729 	.word	0x08004729
 80046c0:	080047e7 	.word	0x080047e7
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004827 	.word	0x08004827
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047ef 	.word	0x080047ef
 80046e4:	680b      	ldr	r3, [r1, #0]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	600a      	str	r2, [r1, #0]
 80046ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0a3      	b.n	8004840 <_printf_i+0x1f4>
 80046f8:	6825      	ldr	r5, [r4, #0]
 80046fa:	6808      	ldr	r0, [r1, #0]
 80046fc:	062e      	lsls	r6, r5, #24
 80046fe:	f100 0304 	add.w	r3, r0, #4
 8004702:	d50a      	bpl.n	800471a <_printf_i+0xce>
 8004704:	6805      	ldr	r5, [r0, #0]
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	2d00      	cmp	r5, #0
 800470a:	da03      	bge.n	8004714 <_printf_i+0xc8>
 800470c:	232d      	movs	r3, #45	; 0x2d
 800470e:	426d      	negs	r5, r5
 8004710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004714:	485e      	ldr	r0, [pc, #376]	; (8004890 <_printf_i+0x244>)
 8004716:	230a      	movs	r3, #10
 8004718:	e019      	b.n	800474e <_printf_i+0x102>
 800471a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800471e:	6805      	ldr	r5, [r0, #0]
 8004720:	600b      	str	r3, [r1, #0]
 8004722:	bf18      	it	ne
 8004724:	b22d      	sxthne	r5, r5
 8004726:	e7ef      	b.n	8004708 <_printf_i+0xbc>
 8004728:	680b      	ldr	r3, [r1, #0]
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	1d18      	adds	r0, r3, #4
 800472e:	6008      	str	r0, [r1, #0]
 8004730:	0628      	lsls	r0, r5, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xec>
 8004734:	681d      	ldr	r5, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0xf2>
 8004738:	0669      	lsls	r1, r5, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xe8>
 800473c:	881d      	ldrh	r5, [r3, #0]
 800473e:	4854      	ldr	r0, [pc, #336]	; (8004890 <_printf_i+0x244>)
 8004740:	2f6f      	cmp	r7, #111	; 0x6f
 8004742:	bf0c      	ite	eq
 8004744:	2308      	moveq	r3, #8
 8004746:	230a      	movne	r3, #10
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474e:	6866      	ldr	r6, [r4, #4]
 8004750:	60a6      	str	r6, [r4, #8]
 8004752:	2e00      	cmp	r6, #0
 8004754:	bfa2      	ittt	ge
 8004756:	6821      	ldrge	r1, [r4, #0]
 8004758:	f021 0104 	bicge.w	r1, r1, #4
 800475c:	6021      	strge	r1, [r4, #0]
 800475e:	b90d      	cbnz	r5, 8004764 <_printf_i+0x118>
 8004760:	2e00      	cmp	r6, #0
 8004762:	d04d      	beq.n	8004800 <_printf_i+0x1b4>
 8004764:	4616      	mov	r6, r2
 8004766:	fbb5 f1f3 	udiv	r1, r5, r3
 800476a:	fb03 5711 	mls	r7, r3, r1, r5
 800476e:	5dc7      	ldrb	r7, [r0, r7]
 8004770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004774:	462f      	mov	r7, r5
 8004776:	42bb      	cmp	r3, r7
 8004778:	460d      	mov	r5, r1
 800477a:	d9f4      	bls.n	8004766 <_printf_i+0x11a>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d10b      	bne.n	8004798 <_printf_i+0x14c>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	07df      	lsls	r7, r3, #31
 8004784:	d508      	bpl.n	8004798 <_printf_i+0x14c>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6861      	ldr	r1, [r4, #4]
 800478a:	4299      	cmp	r1, r3
 800478c:	bfde      	ittt	le
 800478e:	2330      	movle	r3, #48	; 0x30
 8004790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004794:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004798:	1b92      	subs	r2, r2, r6
 800479a:	6122      	str	r2, [r4, #16]
 800479c:	f8cd a000 	str.w	sl, [sp]
 80047a0:	464b      	mov	r3, r9
 80047a2:	aa03      	add	r2, sp, #12
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fee2 	bl	8004570 <_printf_common>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d14c      	bne.n	800484a <_printf_i+0x1fe>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b4:	b004      	add	sp, #16
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	4835      	ldr	r0, [pc, #212]	; (8004890 <_printf_i+0x244>)
 80047bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	680e      	ldr	r6, [r1, #0]
 80047c4:	061f      	lsls	r7, r3, #24
 80047c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80047ca:	600e      	str	r6, [r1, #0]
 80047cc:	d514      	bpl.n	80047f8 <_printf_i+0x1ac>
 80047ce:	07d9      	lsls	r1, r3, #31
 80047d0:	bf44      	itt	mi
 80047d2:	f043 0320 	orrmi.w	r3, r3, #32
 80047d6:	6023      	strmi	r3, [r4, #0]
 80047d8:	b91d      	cbnz	r5, 80047e2 <_printf_i+0x196>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f023 0320 	bic.w	r3, r3, #32
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	2310      	movs	r3, #16
 80047e4:	e7b0      	b.n	8004748 <_printf_i+0xfc>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	f043 0320 	orr.w	r3, r3, #32
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	2378      	movs	r3, #120	; 0x78
 80047f0:	4828      	ldr	r0, [pc, #160]	; (8004894 <_printf_i+0x248>)
 80047f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047f6:	e7e3      	b.n	80047c0 <_printf_i+0x174>
 80047f8:	065e      	lsls	r6, r3, #25
 80047fa:	bf48      	it	mi
 80047fc:	b2ad      	uxthmi	r5, r5
 80047fe:	e7e6      	b.n	80047ce <_printf_i+0x182>
 8004800:	4616      	mov	r6, r2
 8004802:	e7bb      	b.n	800477c <_printf_i+0x130>
 8004804:	680b      	ldr	r3, [r1, #0]
 8004806:	6826      	ldr	r6, [r4, #0]
 8004808:	6960      	ldr	r0, [r4, #20]
 800480a:	1d1d      	adds	r5, r3, #4
 800480c:	600d      	str	r5, [r1, #0]
 800480e:	0635      	lsls	r5, r6, #24
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	d501      	bpl.n	8004818 <_printf_i+0x1cc>
 8004814:	6018      	str	r0, [r3, #0]
 8004816:	e002      	b.n	800481e <_printf_i+0x1d2>
 8004818:	0671      	lsls	r1, r6, #25
 800481a:	d5fb      	bpl.n	8004814 <_printf_i+0x1c8>
 800481c:	8018      	strh	r0, [r3, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	4616      	mov	r6, r2
 8004824:	e7ba      	b.n	800479c <_printf_i+0x150>
 8004826:	680b      	ldr	r3, [r1, #0]
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	600a      	str	r2, [r1, #0]
 800482c:	681e      	ldr	r6, [r3, #0]
 800482e:	6862      	ldr	r2, [r4, #4]
 8004830:	2100      	movs	r1, #0
 8004832:	4630      	mov	r0, r6
 8004834:	f7fb fcd4 	bl	80001e0 <memchr>
 8004838:	b108      	cbz	r0, 800483e <_printf_i+0x1f2>
 800483a:	1b80      	subs	r0, r0, r6
 800483c:	6060      	str	r0, [r4, #4]
 800483e:	6863      	ldr	r3, [r4, #4]
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	2300      	movs	r3, #0
 8004844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004848:	e7a8      	b.n	800479c <_printf_i+0x150>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	4632      	mov	r2, r6
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	47d0      	blx	sl
 8004854:	3001      	adds	r0, #1
 8004856:	d0ab      	beq.n	80047b0 <_printf_i+0x164>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	079b      	lsls	r3, r3, #30
 800485c:	d413      	bmi.n	8004886 <_printf_i+0x23a>
 800485e:	68e0      	ldr	r0, [r4, #12]
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	4298      	cmp	r0, r3
 8004864:	bfb8      	it	lt
 8004866:	4618      	movlt	r0, r3
 8004868:	e7a4      	b.n	80047b4 <_printf_i+0x168>
 800486a:	2301      	movs	r3, #1
 800486c:	4632      	mov	r2, r6
 800486e:	4649      	mov	r1, r9
 8004870:	4640      	mov	r0, r8
 8004872:	47d0      	blx	sl
 8004874:	3001      	adds	r0, #1
 8004876:	d09b      	beq.n	80047b0 <_printf_i+0x164>
 8004878:	3501      	adds	r5, #1
 800487a:	68e3      	ldr	r3, [r4, #12]
 800487c:	9903      	ldr	r1, [sp, #12]
 800487e:	1a5b      	subs	r3, r3, r1
 8004880:	42ab      	cmp	r3, r5
 8004882:	dcf2      	bgt.n	800486a <_printf_i+0x21e>
 8004884:	e7eb      	b.n	800485e <_printf_i+0x212>
 8004886:	2500      	movs	r5, #0
 8004888:	f104 0619 	add.w	r6, r4, #25
 800488c:	e7f5      	b.n	800487a <_printf_i+0x22e>
 800488e:	bf00      	nop
 8004890:	08006c6e 	.word	0x08006c6e
 8004894:	08006c7f 	.word	0x08006c7f

08004898 <_puts_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	460e      	mov	r6, r1
 800489c:	4605      	mov	r5, r0
 800489e:	b118      	cbz	r0, 80048a8 <_puts_r+0x10>
 80048a0:	6983      	ldr	r3, [r0, #24]
 80048a2:	b90b      	cbnz	r3, 80048a8 <_puts_r+0x10>
 80048a4:	f001 f98e 	bl	8005bc4 <__sinit>
 80048a8:	69ab      	ldr	r3, [r5, #24]
 80048aa:	68ac      	ldr	r4, [r5, #8]
 80048ac:	b913      	cbnz	r3, 80048b4 <_puts_r+0x1c>
 80048ae:	4628      	mov	r0, r5
 80048b0:	f001 f988 	bl	8005bc4 <__sinit>
 80048b4:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <_puts_r+0xd0>)
 80048b6:	429c      	cmp	r4, r3
 80048b8:	d120      	bne.n	80048fc <_puts_r+0x64>
 80048ba:	686c      	ldr	r4, [r5, #4]
 80048bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048be:	07db      	lsls	r3, r3, #31
 80048c0:	d405      	bmi.n	80048ce <_puts_r+0x36>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	0598      	lsls	r0, r3, #22
 80048c6:	d402      	bmi.n	80048ce <_puts_r+0x36>
 80048c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ca:	f001 fa1e 	bl	8005d0a <__retarget_lock_acquire_recursive>
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	0719      	lsls	r1, r3, #28
 80048d2:	d51d      	bpl.n	8004910 <_puts_r+0x78>
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	b1db      	cbz	r3, 8004910 <_puts_r+0x78>
 80048d8:	3e01      	subs	r6, #1
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048e0:	3b01      	subs	r3, #1
 80048e2:	60a3      	str	r3, [r4, #8]
 80048e4:	bb39      	cbnz	r1, 8004936 <_puts_r+0x9e>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da38      	bge.n	800495c <_puts_r+0xc4>
 80048ea:	4622      	mov	r2, r4
 80048ec:	210a      	movs	r1, #10
 80048ee:	4628      	mov	r0, r5
 80048f0:	f000 f916 	bl	8004b20 <__swbuf_r>
 80048f4:	3001      	adds	r0, #1
 80048f6:	d011      	beq.n	800491c <_puts_r+0x84>
 80048f8:	250a      	movs	r5, #10
 80048fa:	e011      	b.n	8004920 <_puts_r+0x88>
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <_puts_r+0xd4>)
 80048fe:	429c      	cmp	r4, r3
 8004900:	d101      	bne.n	8004906 <_puts_r+0x6e>
 8004902:	68ac      	ldr	r4, [r5, #8]
 8004904:	e7da      	b.n	80048bc <_puts_r+0x24>
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <_puts_r+0xd8>)
 8004908:	429c      	cmp	r4, r3
 800490a:	bf08      	it	eq
 800490c:	68ec      	ldreq	r4, [r5, #12]
 800490e:	e7d5      	b.n	80048bc <_puts_r+0x24>
 8004910:	4621      	mov	r1, r4
 8004912:	4628      	mov	r0, r5
 8004914:	f000 f956 	bl	8004bc4 <__swsetup_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	d0dd      	beq.n	80048d8 <_puts_r+0x40>
 800491c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004922:	07da      	lsls	r2, r3, #31
 8004924:	d405      	bmi.n	8004932 <_puts_r+0x9a>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	059b      	lsls	r3, r3, #22
 800492a:	d402      	bmi.n	8004932 <_puts_r+0x9a>
 800492c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800492e:	f001 f9ed 	bl	8005d0c <__retarget_lock_release_recursive>
 8004932:	4628      	mov	r0, r5
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	2b00      	cmp	r3, #0
 8004938:	da04      	bge.n	8004944 <_puts_r+0xac>
 800493a:	69a2      	ldr	r2, [r4, #24]
 800493c:	429a      	cmp	r2, r3
 800493e:	dc06      	bgt.n	800494e <_puts_r+0xb6>
 8004940:	290a      	cmp	r1, #10
 8004942:	d004      	beq.n	800494e <_puts_r+0xb6>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	6022      	str	r2, [r4, #0]
 800494a:	7019      	strb	r1, [r3, #0]
 800494c:	e7c5      	b.n	80048da <_puts_r+0x42>
 800494e:	4622      	mov	r2, r4
 8004950:	4628      	mov	r0, r5
 8004952:	f000 f8e5 	bl	8004b20 <__swbuf_r>
 8004956:	3001      	adds	r0, #1
 8004958:	d1bf      	bne.n	80048da <_puts_r+0x42>
 800495a:	e7df      	b.n	800491c <_puts_r+0x84>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	250a      	movs	r5, #10
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	701d      	strb	r5, [r3, #0]
 8004966:	e7db      	b.n	8004920 <_puts_r+0x88>
 8004968:	08006d44 	.word	0x08006d44
 800496c:	08006d64 	.word	0x08006d64
 8004970:	08006d24 	.word	0x08006d24

08004974 <puts>:
 8004974:	4b02      	ldr	r3, [pc, #8]	; (8004980 <puts+0xc>)
 8004976:	4601      	mov	r1, r0
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f7ff bf8d 	b.w	8004898 <_puts_r>
 800497e:	bf00      	nop
 8004980:	2000000c 	.word	0x2000000c

08004984 <setbuf>:
 8004984:	2900      	cmp	r1, #0
 8004986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498a:	bf0c      	ite	eq
 800498c:	2202      	moveq	r2, #2
 800498e:	2200      	movne	r2, #0
 8004990:	f000 b800 	b.w	8004994 <setvbuf>

08004994 <setvbuf>:
 8004994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004998:	461d      	mov	r5, r3
 800499a:	4b5d      	ldr	r3, [pc, #372]	; (8004b10 <setvbuf+0x17c>)
 800499c:	681f      	ldr	r7, [r3, #0]
 800499e:	4604      	mov	r4, r0
 80049a0:	460e      	mov	r6, r1
 80049a2:	4690      	mov	r8, r2
 80049a4:	b127      	cbz	r7, 80049b0 <setvbuf+0x1c>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	b913      	cbnz	r3, 80049b0 <setvbuf+0x1c>
 80049aa:	4638      	mov	r0, r7
 80049ac:	f001 f90a 	bl	8005bc4 <__sinit>
 80049b0:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <setvbuf+0x180>)
 80049b2:	429c      	cmp	r4, r3
 80049b4:	d167      	bne.n	8004a86 <setvbuf+0xf2>
 80049b6:	687c      	ldr	r4, [r7, #4]
 80049b8:	f1b8 0f02 	cmp.w	r8, #2
 80049bc:	d006      	beq.n	80049cc <setvbuf+0x38>
 80049be:	f1b8 0f01 	cmp.w	r8, #1
 80049c2:	f200 809f 	bhi.w	8004b04 <setvbuf+0x170>
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	f2c0 809c 	blt.w	8004b04 <setvbuf+0x170>
 80049cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ce:	07db      	lsls	r3, r3, #31
 80049d0:	d405      	bmi.n	80049de <setvbuf+0x4a>
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	0598      	lsls	r0, r3, #22
 80049d6:	d402      	bmi.n	80049de <setvbuf+0x4a>
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	f001 f996 	bl	8005d0a <__retarget_lock_acquire_recursive>
 80049de:	4621      	mov	r1, r4
 80049e0:	4638      	mov	r0, r7
 80049e2:	f001 f85b 	bl	8005a9c <_fflush_r>
 80049e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049e8:	b141      	cbz	r1, 80049fc <setvbuf+0x68>
 80049ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ee:	4299      	cmp	r1, r3
 80049f0:	d002      	beq.n	80049f8 <setvbuf+0x64>
 80049f2:	4638      	mov	r0, r7
 80049f4:	f001 fd94 	bl	8006520 <_free_r>
 80049f8:	2300      	movs	r3, #0
 80049fa:	6363      	str	r3, [r4, #52]	; 0x34
 80049fc:	2300      	movs	r3, #0
 80049fe:	61a3      	str	r3, [r4, #24]
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	0619      	lsls	r1, r3, #24
 8004a06:	d503      	bpl.n	8004a10 <setvbuf+0x7c>
 8004a08:	6921      	ldr	r1, [r4, #16]
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	f001 fd88 	bl	8006520 <_free_r>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	f1b8 0f02 	cmp.w	r8, #2
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	d06c      	beq.n	8004afc <setvbuf+0x168>
 8004a22:	ab01      	add	r3, sp, #4
 8004a24:	466a      	mov	r2, sp
 8004a26:	4621      	mov	r1, r4
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f001 f970 	bl	8005d0e <__swhatbuf_r>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	4318      	orrs	r0, r3
 8004a32:	81a0      	strh	r0, [r4, #12]
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	d130      	bne.n	8004a9a <setvbuf+0x106>
 8004a38:	9d00      	ldr	r5, [sp, #0]
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f001 f9cc 	bl	8005dd8 <malloc>
 8004a40:	4606      	mov	r6, r0
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d155      	bne.n	8004af2 <setvbuf+0x15e>
 8004a46:	f8dd 9000 	ldr.w	r9, [sp]
 8004a4a:	45a9      	cmp	r9, r5
 8004a4c:	d14a      	bne.n	8004ae4 <setvbuf+0x150>
 8004a4e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004a52:	2200      	movs	r2, #0
 8004a54:	60a2      	str	r2, [r4, #8]
 8004a56:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004a5a:	6022      	str	r2, [r4, #0]
 8004a5c:	6122      	str	r2, [r4, #16]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a64:	6162      	str	r2, [r4, #20]
 8004a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	07d2      	lsls	r2, r2, #31
 8004a6e:	81a3      	strh	r3, [r4, #12]
 8004a70:	d405      	bmi.n	8004a7e <setvbuf+0xea>
 8004a72:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a76:	d102      	bne.n	8004a7e <setvbuf+0xea>
 8004a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7a:	f001 f947 	bl	8005d0c <__retarget_lock_release_recursive>
 8004a7e:	4628      	mov	r0, r5
 8004a80:	b003      	add	sp, #12
 8004a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <setvbuf+0x184>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	d101      	bne.n	8004a90 <setvbuf+0xfc>
 8004a8c:	68bc      	ldr	r4, [r7, #8]
 8004a8e:	e793      	b.n	80049b8 <setvbuf+0x24>
 8004a90:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <setvbuf+0x188>)
 8004a92:	429c      	cmp	r4, r3
 8004a94:	bf08      	it	eq
 8004a96:	68fc      	ldreq	r4, [r7, #12]
 8004a98:	e78e      	b.n	80049b8 <setvbuf+0x24>
 8004a9a:	2e00      	cmp	r6, #0
 8004a9c:	d0cd      	beq.n	8004a3a <setvbuf+0xa6>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	b913      	cbnz	r3, 8004aa8 <setvbuf+0x114>
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f001 f88e 	bl	8005bc4 <__sinit>
 8004aa8:	f1b8 0f01 	cmp.w	r8, #1
 8004aac:	bf08      	it	eq
 8004aae:	89a3      	ldrheq	r3, [r4, #12]
 8004ab0:	6026      	str	r6, [r4, #0]
 8004ab2:	bf04      	itt	eq
 8004ab4:	f043 0301 	orreq.w	r3, r3, #1
 8004ab8:	81a3      	strheq	r3, [r4, #12]
 8004aba:	89a2      	ldrh	r2, [r4, #12]
 8004abc:	f012 0308 	ands.w	r3, r2, #8
 8004ac0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004ac4:	d01c      	beq.n	8004b00 <setvbuf+0x16c>
 8004ac6:	07d3      	lsls	r3, r2, #31
 8004ac8:	bf41      	itttt	mi
 8004aca:	2300      	movmi	r3, #0
 8004acc:	426d      	negmi	r5, r5
 8004ace:	60a3      	strmi	r3, [r4, #8]
 8004ad0:	61a5      	strmi	r5, [r4, #24]
 8004ad2:	bf58      	it	pl
 8004ad4:	60a5      	strpl	r5, [r4, #8]
 8004ad6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004ad8:	f015 0501 	ands.w	r5, r5, #1
 8004adc:	d115      	bne.n	8004b0a <setvbuf+0x176>
 8004ade:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004ae2:	e7c8      	b.n	8004a76 <setvbuf+0xe2>
 8004ae4:	4648      	mov	r0, r9
 8004ae6:	f001 f977 	bl	8005dd8 <malloc>
 8004aea:	4606      	mov	r6, r0
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d0ae      	beq.n	8004a4e <setvbuf+0xba>
 8004af0:	464d      	mov	r5, r9
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	e7d0      	b.n	8004a9e <setvbuf+0x10a>
 8004afc:	2500      	movs	r5, #0
 8004afe:	e7a8      	b.n	8004a52 <setvbuf+0xbe>
 8004b00:	60a3      	str	r3, [r4, #8]
 8004b02:	e7e8      	b.n	8004ad6 <setvbuf+0x142>
 8004b04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b08:	e7b9      	b.n	8004a7e <setvbuf+0xea>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	e7b7      	b.n	8004a7e <setvbuf+0xea>
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c
 8004b14:	08006d44 	.word	0x08006d44
 8004b18:	08006d64 	.word	0x08006d64
 8004b1c:	08006d24 	.word	0x08006d24

08004b20 <__swbuf_r>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	460e      	mov	r6, r1
 8004b24:	4614      	mov	r4, r2
 8004b26:	4605      	mov	r5, r0
 8004b28:	b118      	cbz	r0, 8004b32 <__swbuf_r+0x12>
 8004b2a:	6983      	ldr	r3, [r0, #24]
 8004b2c:	b90b      	cbnz	r3, 8004b32 <__swbuf_r+0x12>
 8004b2e:	f001 f849 	bl	8005bc4 <__sinit>
 8004b32:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <__swbuf_r+0x98>)
 8004b34:	429c      	cmp	r4, r3
 8004b36:	d12b      	bne.n	8004b90 <__swbuf_r+0x70>
 8004b38:	686c      	ldr	r4, [r5, #4]
 8004b3a:	69a3      	ldr	r3, [r4, #24]
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	071a      	lsls	r2, r3, #28
 8004b42:	d52f      	bpl.n	8004ba4 <__swbuf_r+0x84>
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	b36b      	cbz	r3, 8004ba4 <__swbuf_r+0x84>
 8004b48:	6923      	ldr	r3, [r4, #16]
 8004b4a:	6820      	ldr	r0, [r4, #0]
 8004b4c:	1ac0      	subs	r0, r0, r3
 8004b4e:	6963      	ldr	r3, [r4, #20]
 8004b50:	b2f6      	uxtb	r6, r6
 8004b52:	4283      	cmp	r3, r0
 8004b54:	4637      	mov	r7, r6
 8004b56:	dc04      	bgt.n	8004b62 <__swbuf_r+0x42>
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f000 ff9e 	bl	8005a9c <_fflush_r>
 8004b60:	bb30      	cbnz	r0, 8004bb0 <__swbuf_r+0x90>
 8004b62:	68a3      	ldr	r3, [r4, #8]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	60a3      	str	r3, [r4, #8]
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	6022      	str	r2, [r4, #0]
 8004b6e:	701e      	strb	r6, [r3, #0]
 8004b70:	6963      	ldr	r3, [r4, #20]
 8004b72:	3001      	adds	r0, #1
 8004b74:	4283      	cmp	r3, r0
 8004b76:	d004      	beq.n	8004b82 <__swbuf_r+0x62>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	07db      	lsls	r3, r3, #31
 8004b7c:	d506      	bpl.n	8004b8c <__swbuf_r+0x6c>
 8004b7e:	2e0a      	cmp	r6, #10
 8004b80:	d104      	bne.n	8004b8c <__swbuf_r+0x6c>
 8004b82:	4621      	mov	r1, r4
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 ff89 	bl	8005a9c <_fflush_r>
 8004b8a:	b988      	cbnz	r0, 8004bb0 <__swbuf_r+0x90>
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <__swbuf_r+0x9c>)
 8004b92:	429c      	cmp	r4, r3
 8004b94:	d101      	bne.n	8004b9a <__swbuf_r+0x7a>
 8004b96:	68ac      	ldr	r4, [r5, #8]
 8004b98:	e7cf      	b.n	8004b3a <__swbuf_r+0x1a>
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <__swbuf_r+0xa0>)
 8004b9c:	429c      	cmp	r4, r3
 8004b9e:	bf08      	it	eq
 8004ba0:	68ec      	ldreq	r4, [r5, #12]
 8004ba2:	e7ca      	b.n	8004b3a <__swbuf_r+0x1a>
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 f80c 	bl	8004bc4 <__swsetup_r>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d0cb      	beq.n	8004b48 <__swbuf_r+0x28>
 8004bb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bb4:	e7ea      	b.n	8004b8c <__swbuf_r+0x6c>
 8004bb6:	bf00      	nop
 8004bb8:	08006d44 	.word	0x08006d44
 8004bbc:	08006d64 	.word	0x08006d64
 8004bc0:	08006d24 	.word	0x08006d24

08004bc4 <__swsetup_r>:
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <__swsetup_r+0xcc>)
 8004bc6:	b570      	push	{r4, r5, r6, lr}
 8004bc8:	681d      	ldr	r5, [r3, #0]
 8004bca:	4606      	mov	r6, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	b125      	cbz	r5, 8004bda <__swsetup_r+0x16>
 8004bd0:	69ab      	ldr	r3, [r5, #24]
 8004bd2:	b913      	cbnz	r3, 8004bda <__swsetup_r+0x16>
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 fff5 	bl	8005bc4 <__sinit>
 8004bda:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <__swsetup_r+0xd0>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d10f      	bne.n	8004c00 <__swsetup_r+0x3c>
 8004be0:	686c      	ldr	r4, [r5, #4]
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be8:	0719      	lsls	r1, r3, #28
 8004bea:	d42c      	bmi.n	8004c46 <__swsetup_r+0x82>
 8004bec:	06dd      	lsls	r5, r3, #27
 8004bee:	d411      	bmi.n	8004c14 <__swsetup_r+0x50>
 8004bf0:	2309      	movs	r3, #9
 8004bf2:	6033      	str	r3, [r6, #0]
 8004bf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bfe:	e03e      	b.n	8004c7e <__swsetup_r+0xba>
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <__swsetup_r+0xd4>)
 8004c02:	429c      	cmp	r4, r3
 8004c04:	d101      	bne.n	8004c0a <__swsetup_r+0x46>
 8004c06:	68ac      	ldr	r4, [r5, #8]
 8004c08:	e7eb      	b.n	8004be2 <__swsetup_r+0x1e>
 8004c0a:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <__swsetup_r+0xd8>)
 8004c0c:	429c      	cmp	r4, r3
 8004c0e:	bf08      	it	eq
 8004c10:	68ec      	ldreq	r4, [r5, #12]
 8004c12:	e7e6      	b.n	8004be2 <__swsetup_r+0x1e>
 8004c14:	0758      	lsls	r0, r3, #29
 8004c16:	d512      	bpl.n	8004c3e <__swsetup_r+0x7a>
 8004c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c1a:	b141      	cbz	r1, 8004c2e <__swsetup_r+0x6a>
 8004c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c20:	4299      	cmp	r1, r3
 8004c22:	d002      	beq.n	8004c2a <__swsetup_r+0x66>
 8004c24:	4630      	mov	r0, r6
 8004c26:	f001 fc7b 	bl	8006520 <_free_r>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	2300      	movs	r3, #0
 8004c38:	6063      	str	r3, [r4, #4]
 8004c3a:	6923      	ldr	r3, [r4, #16]
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	f043 0308 	orr.w	r3, r3, #8
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	b94b      	cbnz	r3, 8004c5e <__swsetup_r+0x9a>
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c54:	d003      	beq.n	8004c5e <__swsetup_r+0x9a>
 8004c56:	4621      	mov	r1, r4
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f001 f87d 	bl	8005d58 <__smakebuf_r>
 8004c5e:	89a0      	ldrh	r0, [r4, #12]
 8004c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c64:	f010 0301 	ands.w	r3, r0, #1
 8004c68:	d00a      	beq.n	8004c80 <__swsetup_r+0xbc>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60a3      	str	r3, [r4, #8]
 8004c6e:	6963      	ldr	r3, [r4, #20]
 8004c70:	425b      	negs	r3, r3
 8004c72:	61a3      	str	r3, [r4, #24]
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	b943      	cbnz	r3, 8004c8a <__swsetup_r+0xc6>
 8004c78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c7c:	d1ba      	bne.n	8004bf4 <__swsetup_r+0x30>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	0781      	lsls	r1, r0, #30
 8004c82:	bf58      	it	pl
 8004c84:	6963      	ldrpl	r3, [r4, #20]
 8004c86:	60a3      	str	r3, [r4, #8]
 8004c88:	e7f4      	b.n	8004c74 <__swsetup_r+0xb0>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e7f7      	b.n	8004c7e <__swsetup_r+0xba>
 8004c8e:	bf00      	nop
 8004c90:	2000000c 	.word	0x2000000c
 8004c94:	08006d44 	.word	0x08006d44
 8004c98:	08006d64 	.word	0x08006d64
 8004c9c:	08006d24 	.word	0x08006d24

08004ca0 <quorem>:
 8004ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	6903      	ldr	r3, [r0, #16]
 8004ca6:	690c      	ldr	r4, [r1, #16]
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	4607      	mov	r7, r0
 8004cac:	f2c0 8081 	blt.w	8004db2 <quorem+0x112>
 8004cb0:	3c01      	subs	r4, #1
 8004cb2:	f101 0814 	add.w	r8, r1, #20
 8004cb6:	f100 0514 	add.w	r5, r0, #20
 8004cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004cd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cd8:	d331      	bcc.n	8004d3e <quorem+0x9e>
 8004cda:	f04f 0e00 	mov.w	lr, #0
 8004cde:	4640      	mov	r0, r8
 8004ce0:	46ac      	mov	ip, r5
 8004ce2:	46f2      	mov	sl, lr
 8004ce4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ce8:	b293      	uxth	r3, r2
 8004cea:	fb06 e303 	mla	r3, r6, r3, lr
 8004cee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	ebaa 0303 	sub.w	r3, sl, r3
 8004cf8:	0c12      	lsrs	r2, r2, #16
 8004cfa:	f8dc a000 	ldr.w	sl, [ip]
 8004cfe:	fb06 e202 	mla	r2, r6, r2, lr
 8004d02:	fa13 f38a 	uxtah	r3, r3, sl
 8004d06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d0a:	fa1f fa82 	uxth.w	sl, r2
 8004d0e:	f8dc 2000 	ldr.w	r2, [ip]
 8004d12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004d16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d20:	4581      	cmp	r9, r0
 8004d22:	f84c 3b04 	str.w	r3, [ip], #4
 8004d26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d2a:	d2db      	bcs.n	8004ce4 <quorem+0x44>
 8004d2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d30:	b92b      	cbnz	r3, 8004d3e <quorem+0x9e>
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	429d      	cmp	r5, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	d32e      	bcc.n	8004d9a <quorem+0xfa>
 8004d3c:	613c      	str	r4, [r7, #16]
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f001 fade 	bl	8006300 <__mcmp>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	db24      	blt.n	8004d92 <quorem+0xf2>
 8004d48:	3601      	adds	r6, #1
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f04f 0c00 	mov.w	ip, #0
 8004d50:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d54:	f8d0 e000 	ldr.w	lr, [r0]
 8004d58:	b293      	uxth	r3, r2
 8004d5a:	ebac 0303 	sub.w	r3, ip, r3
 8004d5e:	0c12      	lsrs	r2, r2, #16
 8004d60:	fa13 f38e 	uxtah	r3, r3, lr
 8004d64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d72:	45c1      	cmp	r9, r8
 8004d74:	f840 3b04 	str.w	r3, [r0], #4
 8004d78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d7c:	d2e8      	bcs.n	8004d50 <quorem+0xb0>
 8004d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d86:	b922      	cbnz	r2, 8004d92 <quorem+0xf2>
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	429d      	cmp	r5, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	d30a      	bcc.n	8004da6 <quorem+0x106>
 8004d90:	613c      	str	r4, [r7, #16]
 8004d92:	4630      	mov	r0, r6
 8004d94:	b003      	add	sp, #12
 8004d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	3b04      	subs	r3, #4
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	d1cc      	bne.n	8004d3c <quorem+0x9c>
 8004da2:	3c01      	subs	r4, #1
 8004da4:	e7c7      	b.n	8004d36 <quorem+0x96>
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	3b04      	subs	r3, #4
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	d1f0      	bne.n	8004d90 <quorem+0xf0>
 8004dae:	3c01      	subs	r4, #1
 8004db0:	e7eb      	b.n	8004d8a <quorem+0xea>
 8004db2:	2000      	movs	r0, #0
 8004db4:	e7ee      	b.n	8004d94 <quorem+0xf4>
	...

08004db8 <_dtoa_r>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	ed2d 8b02 	vpush	{d8}
 8004dc0:	ec57 6b10 	vmov	r6, r7, d0
 8004dc4:	b095      	sub	sp, #84	; 0x54
 8004dc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004dc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004dcc:	9105      	str	r1, [sp, #20]
 8004dce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8004dd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dd8:	b975      	cbnz	r5, 8004df8 <_dtoa_r+0x40>
 8004dda:	2010      	movs	r0, #16
 8004ddc:	f000 fffc 	bl	8005dd8 <malloc>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6260      	str	r0, [r4, #36]	; 0x24
 8004de4:	b920      	cbnz	r0, 8004df0 <_dtoa_r+0x38>
 8004de6:	4bb2      	ldr	r3, [pc, #712]	; (80050b0 <_dtoa_r+0x2f8>)
 8004de8:	21ea      	movs	r1, #234	; 0xea
 8004dea:	48b2      	ldr	r0, [pc, #712]	; (80050b4 <_dtoa_r+0x2fc>)
 8004dec:	f001 fca8 	bl	8006740 <__assert_func>
 8004df0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004df4:	6005      	str	r5, [r0, #0]
 8004df6:	60c5      	str	r5, [r0, #12]
 8004df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dfa:	6819      	ldr	r1, [r3, #0]
 8004dfc:	b151      	cbz	r1, 8004e14 <_dtoa_r+0x5c>
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	604a      	str	r2, [r1, #4]
 8004e02:	2301      	movs	r3, #1
 8004e04:	4093      	lsls	r3, r2
 8004e06:	608b      	str	r3, [r1, #8]
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f001 f83b 	bl	8005e84 <_Bfree>
 8004e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	1e3b      	subs	r3, r7, #0
 8004e16:	bfb9      	ittee	lt
 8004e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e1c:	9303      	strlt	r3, [sp, #12]
 8004e1e:	2300      	movge	r3, #0
 8004e20:	f8c8 3000 	strge.w	r3, [r8]
 8004e24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004e28:	4ba3      	ldr	r3, [pc, #652]	; (80050b8 <_dtoa_r+0x300>)
 8004e2a:	bfbc      	itt	lt
 8004e2c:	2201      	movlt	r2, #1
 8004e2e:	f8c8 2000 	strlt.w	r2, [r8]
 8004e32:	ea33 0309 	bics.w	r3, r3, r9
 8004e36:	d11b      	bne.n	8004e70 <_dtoa_r+0xb8>
 8004e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e44:	4333      	orrs	r3, r6
 8004e46:	f000 857a 	beq.w	800593e <_dtoa_r+0xb86>
 8004e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e4c:	b963      	cbnz	r3, 8004e68 <_dtoa_r+0xb0>
 8004e4e:	4b9b      	ldr	r3, [pc, #620]	; (80050bc <_dtoa_r+0x304>)
 8004e50:	e024      	b.n	8004e9c <_dtoa_r+0xe4>
 8004e52:	4b9b      	ldr	r3, [pc, #620]	; (80050c0 <_dtoa_r+0x308>)
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	9800      	ldr	r0, [sp, #0]
 8004e5e:	b015      	add	sp, #84	; 0x54
 8004e60:	ecbd 8b02 	vpop	{d8}
 8004e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e68:	4b94      	ldr	r3, [pc, #592]	; (80050bc <_dtoa_r+0x304>)
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	3303      	adds	r3, #3
 8004e6e:	e7f3      	b.n	8004e58 <_dtoa_r+0xa0>
 8004e70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e74:	2200      	movs	r2, #0
 8004e76:	ec51 0b17 	vmov	r0, r1, d7
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004e80:	f7fb fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e84:	4680      	mov	r8, r0
 8004e86:	b158      	cbz	r0, 8004ea0 <_dtoa_r+0xe8>
 8004e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8551 	beq.w	8005938 <_dtoa_r+0xb80>
 8004e96:	488b      	ldr	r0, [pc, #556]	; (80050c4 <_dtoa_r+0x30c>)
 8004e98:	6018      	str	r0, [r3, #0]
 8004e9a:	1e43      	subs	r3, r0, #1
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	e7dd      	b.n	8004e5c <_dtoa_r+0xa4>
 8004ea0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004ea4:	aa12      	add	r2, sp, #72	; 0x48
 8004ea6:	a913      	add	r1, sp, #76	; 0x4c
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f001 facd 	bl	8006448 <__d2b>
 8004eae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004eb2:	4683      	mov	fp, r0
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	d07c      	beq.n	8004fb2 <_dtoa_r+0x1fa>
 8004eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ec2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004ec6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004eca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ed2:	4b7d      	ldr	r3, [pc, #500]	; (80050c8 <_dtoa_r+0x310>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb f9d5 	bl	8000288 <__aeabi_dsub>
 8004ede:	a36e      	add	r3, pc, #440	; (adr r3, 8005098 <_dtoa_r+0x2e0>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fb88 	bl	80005f8 <__aeabi_dmul>
 8004ee8:	a36d      	add	r3, pc, #436	; (adr r3, 80050a0 <_dtoa_r+0x2e8>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f7fb f9cd 	bl	800028c <__adddf3>
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	460f      	mov	r7, r1
 8004ef8:	f7fb fb14 	bl	8000524 <__aeabi_i2d>
 8004efc:	a36a      	add	r3, pc, #424	; (adr r3, 80050a8 <_dtoa_r+0x2f0>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f7fb fb79 	bl	80005f8 <__aeabi_dmul>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	4639      	mov	r1, r7
 8004f0e:	f7fb f9bd 	bl	800028c <__adddf3>
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	f7fb fe1f 	bl	8000b58 <__aeabi_d2iz>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	4682      	mov	sl, r0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4630      	mov	r0, r6
 8004f22:	4639      	mov	r1, r7
 8004f24:	f7fb fdda 	bl	8000adc <__aeabi_dcmplt>
 8004f28:	b148      	cbz	r0, 8004f3e <_dtoa_r+0x186>
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	f7fb fafa 	bl	8000524 <__aeabi_i2d>
 8004f30:	4632      	mov	r2, r6
 8004f32:	463b      	mov	r3, r7
 8004f34:	f7fb fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f38:	b908      	cbnz	r0, 8004f3e <_dtoa_r+0x186>
 8004f3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f3e:	f1ba 0f16 	cmp.w	sl, #22
 8004f42:	d854      	bhi.n	8004fee <_dtoa_r+0x236>
 8004f44:	4b61      	ldr	r3, [pc, #388]	; (80050cc <_dtoa_r+0x314>)
 8004f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f52:	f7fb fdc3 	bl	8000adc <__aeabi_dcmplt>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d04b      	beq.n	8004ff2 <_dtoa_r+0x23a>
 8004f5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f5e:	2300      	movs	r3, #0
 8004f60:	930e      	str	r3, [sp, #56]	; 0x38
 8004f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f64:	1b5d      	subs	r5, r3, r5
 8004f66:	1e6b      	subs	r3, r5, #1
 8004f68:	9304      	str	r3, [sp, #16]
 8004f6a:	bf43      	ittte	mi
 8004f6c:	2300      	movmi	r3, #0
 8004f6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004f72:	9304      	strmi	r3, [sp, #16]
 8004f74:	f04f 0800 	movpl.w	r8, #0
 8004f78:	f1ba 0f00 	cmp.w	sl, #0
 8004f7c:	db3b      	blt.n	8004ff6 <_dtoa_r+0x23e>
 8004f7e:	9b04      	ldr	r3, [sp, #16]
 8004f80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004f84:	4453      	add	r3, sl
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9306      	str	r3, [sp, #24]
 8004f8c:	9b05      	ldr	r3, [sp, #20]
 8004f8e:	2b09      	cmp	r3, #9
 8004f90:	d869      	bhi.n	8005066 <_dtoa_r+0x2ae>
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	bfc4      	itt	gt
 8004f96:	3b04      	subgt	r3, #4
 8004f98:	9305      	strgt	r3, [sp, #20]
 8004f9a:	9b05      	ldr	r3, [sp, #20]
 8004f9c:	f1a3 0302 	sub.w	r3, r3, #2
 8004fa0:	bfcc      	ite	gt
 8004fa2:	2500      	movgt	r5, #0
 8004fa4:	2501      	movle	r5, #1
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d869      	bhi.n	800507e <_dtoa_r+0x2c6>
 8004faa:	e8df f003 	tbb	[pc, r3]
 8004fae:	4e2c      	.short	0x4e2c
 8004fb0:	5a4c      	.short	0x5a4c
 8004fb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004fb6:	441d      	add	r5, r3
 8004fb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	bfc1      	itttt	gt
 8004fc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004fc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004fc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8004fcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004fd0:	bfda      	itte	le
 8004fd2:	f1c3 0320 	rsble	r3, r3, #32
 8004fd6:	fa06 f003 	lslle.w	r0, r6, r3
 8004fda:	4318      	orrgt	r0, r3
 8004fdc:	f7fb fa92 	bl	8000504 <__aeabi_ui2d>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004fe8:	3d01      	subs	r5, #1
 8004fea:	9310      	str	r3, [sp, #64]	; 0x40
 8004fec:	e771      	b.n	8004ed2 <_dtoa_r+0x11a>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e7b6      	b.n	8004f60 <_dtoa_r+0x1a8>
 8004ff2:	900e      	str	r0, [sp, #56]	; 0x38
 8004ff4:	e7b5      	b.n	8004f62 <_dtoa_r+0x1aa>
 8004ff6:	f1ca 0300 	rsb	r3, sl, #0
 8004ffa:	9306      	str	r3, [sp, #24]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	eba8 080a 	sub.w	r8, r8, sl
 8005002:	930d      	str	r3, [sp, #52]	; 0x34
 8005004:	e7c2      	b.n	8004f8c <_dtoa_r+0x1d4>
 8005006:	2300      	movs	r3, #0
 8005008:	9308      	str	r3, [sp, #32]
 800500a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	dc39      	bgt.n	8005084 <_dtoa_r+0x2cc>
 8005010:	f04f 0901 	mov.w	r9, #1
 8005014:	f8cd 9004 	str.w	r9, [sp, #4]
 8005018:	464b      	mov	r3, r9
 800501a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800501e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005020:	2200      	movs	r2, #0
 8005022:	6042      	str	r2, [r0, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	f102 0614 	add.w	r6, r2, #20
 800502a:	429e      	cmp	r6, r3
 800502c:	6841      	ldr	r1, [r0, #4]
 800502e:	d92f      	bls.n	8005090 <_dtoa_r+0x2d8>
 8005030:	4620      	mov	r0, r4
 8005032:	f000 fee7 	bl	8005e04 <_Balloc>
 8005036:	9000      	str	r0, [sp, #0]
 8005038:	2800      	cmp	r0, #0
 800503a:	d14b      	bne.n	80050d4 <_dtoa_r+0x31c>
 800503c:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <_dtoa_r+0x318>)
 800503e:	4602      	mov	r2, r0
 8005040:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005044:	e6d1      	b.n	8004dea <_dtoa_r+0x32>
 8005046:	2301      	movs	r3, #1
 8005048:	e7de      	b.n	8005008 <_dtoa_r+0x250>
 800504a:	2300      	movs	r3, #0
 800504c:	9308      	str	r3, [sp, #32]
 800504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005050:	eb0a 0903 	add.w	r9, sl, r3
 8005054:	f109 0301 	add.w	r3, r9, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	bfb8      	it	lt
 800505e:	2301      	movlt	r3, #1
 8005060:	e7dd      	b.n	800501e <_dtoa_r+0x266>
 8005062:	2301      	movs	r3, #1
 8005064:	e7f2      	b.n	800504c <_dtoa_r+0x294>
 8005066:	2501      	movs	r5, #1
 8005068:	2300      	movs	r3, #0
 800506a:	9305      	str	r3, [sp, #20]
 800506c:	9508      	str	r5, [sp, #32]
 800506e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005072:	2200      	movs	r2, #0
 8005074:	f8cd 9004 	str.w	r9, [sp, #4]
 8005078:	2312      	movs	r3, #18
 800507a:	9209      	str	r2, [sp, #36]	; 0x24
 800507c:	e7cf      	b.n	800501e <_dtoa_r+0x266>
 800507e:	2301      	movs	r3, #1
 8005080:	9308      	str	r3, [sp, #32]
 8005082:	e7f4      	b.n	800506e <_dtoa_r+0x2b6>
 8005084:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005088:	f8cd 9004 	str.w	r9, [sp, #4]
 800508c:	464b      	mov	r3, r9
 800508e:	e7c6      	b.n	800501e <_dtoa_r+0x266>
 8005090:	3101      	adds	r1, #1
 8005092:	6041      	str	r1, [r0, #4]
 8005094:	0052      	lsls	r2, r2, #1
 8005096:	e7c6      	b.n	8005026 <_dtoa_r+0x26e>
 8005098:	636f4361 	.word	0x636f4361
 800509c:	3fd287a7 	.word	0x3fd287a7
 80050a0:	8b60c8b3 	.word	0x8b60c8b3
 80050a4:	3fc68a28 	.word	0x3fc68a28
 80050a8:	509f79fb 	.word	0x509f79fb
 80050ac:	3fd34413 	.word	0x3fd34413
 80050b0:	08006c9d 	.word	0x08006c9d
 80050b4:	08006cb4 	.word	0x08006cb4
 80050b8:	7ff00000 	.word	0x7ff00000
 80050bc:	08006c99 	.word	0x08006c99
 80050c0:	08006c90 	.word	0x08006c90
 80050c4:	08006c6d 	.word	0x08006c6d
 80050c8:	3ff80000 	.word	0x3ff80000
 80050cc:	08006e10 	.word	0x08006e10
 80050d0:	08006d13 	.word	0x08006d13
 80050d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d6:	9a00      	ldr	r2, [sp, #0]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	9b01      	ldr	r3, [sp, #4]
 80050dc:	2b0e      	cmp	r3, #14
 80050de:	f200 80ad 	bhi.w	800523c <_dtoa_r+0x484>
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	f000 80aa 	beq.w	800523c <_dtoa_r+0x484>
 80050e8:	f1ba 0f00 	cmp.w	sl, #0
 80050ec:	dd36      	ble.n	800515c <_dtoa_r+0x3a4>
 80050ee:	4ac3      	ldr	r2, [pc, #780]	; (80053fc <_dtoa_r+0x644>)
 80050f0:	f00a 030f 	and.w	r3, sl, #15
 80050f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050f8:	ed93 7b00 	vldr	d7, [r3]
 80050fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005100:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005104:	eeb0 8a47 	vmov.f32	s16, s14
 8005108:	eef0 8a67 	vmov.f32	s17, s15
 800510c:	d016      	beq.n	800513c <_dtoa_r+0x384>
 800510e:	4bbc      	ldr	r3, [pc, #752]	; (8005400 <_dtoa_r+0x648>)
 8005110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005118:	f7fb fb98 	bl	800084c <__aeabi_ddiv>
 800511c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005120:	f007 070f 	and.w	r7, r7, #15
 8005124:	2503      	movs	r5, #3
 8005126:	4eb6      	ldr	r6, [pc, #728]	; (8005400 <_dtoa_r+0x648>)
 8005128:	b957      	cbnz	r7, 8005140 <_dtoa_r+0x388>
 800512a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512e:	ec53 2b18 	vmov	r2, r3, d8
 8005132:	f7fb fb8b 	bl	800084c <__aeabi_ddiv>
 8005136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800513a:	e029      	b.n	8005190 <_dtoa_r+0x3d8>
 800513c:	2502      	movs	r5, #2
 800513e:	e7f2      	b.n	8005126 <_dtoa_r+0x36e>
 8005140:	07f9      	lsls	r1, r7, #31
 8005142:	d508      	bpl.n	8005156 <_dtoa_r+0x39e>
 8005144:	ec51 0b18 	vmov	r0, r1, d8
 8005148:	e9d6 2300 	ldrd	r2, r3, [r6]
 800514c:	f7fb fa54 	bl	80005f8 <__aeabi_dmul>
 8005150:	ec41 0b18 	vmov	d8, r0, r1
 8005154:	3501      	adds	r5, #1
 8005156:	107f      	asrs	r7, r7, #1
 8005158:	3608      	adds	r6, #8
 800515a:	e7e5      	b.n	8005128 <_dtoa_r+0x370>
 800515c:	f000 80a6 	beq.w	80052ac <_dtoa_r+0x4f4>
 8005160:	f1ca 0600 	rsb	r6, sl, #0
 8005164:	4ba5      	ldr	r3, [pc, #660]	; (80053fc <_dtoa_r+0x644>)
 8005166:	4fa6      	ldr	r7, [pc, #664]	; (8005400 <_dtoa_r+0x648>)
 8005168:	f006 020f 	and.w	r2, r6, #15
 800516c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005178:	f7fb fa3e 	bl	80005f8 <__aeabi_dmul>
 800517c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005180:	1136      	asrs	r6, r6, #4
 8005182:	2300      	movs	r3, #0
 8005184:	2502      	movs	r5, #2
 8005186:	2e00      	cmp	r6, #0
 8005188:	f040 8085 	bne.w	8005296 <_dtoa_r+0x4de>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1d2      	bne.n	8005136 <_dtoa_r+0x37e>
 8005190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 808c 	beq.w	80052b0 <_dtoa_r+0x4f8>
 8005198:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800519c:	4b99      	ldr	r3, [pc, #612]	; (8005404 <_dtoa_r+0x64c>)
 800519e:	2200      	movs	r2, #0
 80051a0:	4630      	mov	r0, r6
 80051a2:	4639      	mov	r1, r7
 80051a4:	f7fb fc9a 	bl	8000adc <__aeabi_dcmplt>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f000 8081 	beq.w	80052b0 <_dtoa_r+0x4f8>
 80051ae:	9b01      	ldr	r3, [sp, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d07d      	beq.n	80052b0 <_dtoa_r+0x4f8>
 80051b4:	f1b9 0f00 	cmp.w	r9, #0
 80051b8:	dd3c      	ble.n	8005234 <_dtoa_r+0x47c>
 80051ba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80051be:	9307      	str	r3, [sp, #28]
 80051c0:	2200      	movs	r2, #0
 80051c2:	4b91      	ldr	r3, [pc, #580]	; (8005408 <_dtoa_r+0x650>)
 80051c4:	4630      	mov	r0, r6
 80051c6:	4639      	mov	r1, r7
 80051c8:	f7fb fa16 	bl	80005f8 <__aeabi_dmul>
 80051cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d0:	3501      	adds	r5, #1
 80051d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80051d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051da:	4628      	mov	r0, r5
 80051dc:	f7fb f9a2 	bl	8000524 <__aeabi_i2d>
 80051e0:	4632      	mov	r2, r6
 80051e2:	463b      	mov	r3, r7
 80051e4:	f7fb fa08 	bl	80005f8 <__aeabi_dmul>
 80051e8:	4b88      	ldr	r3, [pc, #544]	; (800540c <_dtoa_r+0x654>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	f7fb f84e 	bl	800028c <__adddf3>
 80051f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80051f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051f8:	9303      	str	r3, [sp, #12]
 80051fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d15c      	bne.n	80052ba <_dtoa_r+0x502>
 8005200:	4b83      	ldr	r3, [pc, #524]	; (8005410 <_dtoa_r+0x658>)
 8005202:	2200      	movs	r2, #0
 8005204:	4630      	mov	r0, r6
 8005206:	4639      	mov	r1, r7
 8005208:	f7fb f83e 	bl	8000288 <__aeabi_dsub>
 800520c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005210:	4606      	mov	r6, r0
 8005212:	460f      	mov	r7, r1
 8005214:	f7fb fc80 	bl	8000b18 <__aeabi_dcmpgt>
 8005218:	2800      	cmp	r0, #0
 800521a:	f040 8296 	bne.w	800574a <_dtoa_r+0x992>
 800521e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005222:	4630      	mov	r0, r6
 8005224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005228:	4639      	mov	r1, r7
 800522a:	f7fb fc57 	bl	8000adc <__aeabi_dcmplt>
 800522e:	2800      	cmp	r0, #0
 8005230:	f040 8288 	bne.w	8005744 <_dtoa_r+0x98c>
 8005234:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005238:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800523c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800523e:	2b00      	cmp	r3, #0
 8005240:	f2c0 8158 	blt.w	80054f4 <_dtoa_r+0x73c>
 8005244:	f1ba 0f0e 	cmp.w	sl, #14
 8005248:	f300 8154 	bgt.w	80054f4 <_dtoa_r+0x73c>
 800524c:	4b6b      	ldr	r3, [pc, #428]	; (80053fc <_dtoa_r+0x644>)
 800524e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005252:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	f280 80e3 	bge.w	8005424 <_dtoa_r+0x66c>
 800525e:	9b01      	ldr	r3, [sp, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f300 80df 	bgt.w	8005424 <_dtoa_r+0x66c>
 8005266:	f040 826d 	bne.w	8005744 <_dtoa_r+0x98c>
 800526a:	4b69      	ldr	r3, [pc, #420]	; (8005410 <_dtoa_r+0x658>)
 800526c:	2200      	movs	r2, #0
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fb f9c1 	bl	80005f8 <__aeabi_dmul>
 8005276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800527a:	f7fb fc43 	bl	8000b04 <__aeabi_dcmpge>
 800527e:	9e01      	ldr	r6, [sp, #4]
 8005280:	4637      	mov	r7, r6
 8005282:	2800      	cmp	r0, #0
 8005284:	f040 8243 	bne.w	800570e <_dtoa_r+0x956>
 8005288:	9d00      	ldr	r5, [sp, #0]
 800528a:	2331      	movs	r3, #49	; 0x31
 800528c:	f805 3b01 	strb.w	r3, [r5], #1
 8005290:	f10a 0a01 	add.w	sl, sl, #1
 8005294:	e23f      	b.n	8005716 <_dtoa_r+0x95e>
 8005296:	07f2      	lsls	r2, r6, #31
 8005298:	d505      	bpl.n	80052a6 <_dtoa_r+0x4ee>
 800529a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529e:	f7fb f9ab 	bl	80005f8 <__aeabi_dmul>
 80052a2:	3501      	adds	r5, #1
 80052a4:	2301      	movs	r3, #1
 80052a6:	1076      	asrs	r6, r6, #1
 80052a8:	3708      	adds	r7, #8
 80052aa:	e76c      	b.n	8005186 <_dtoa_r+0x3ce>
 80052ac:	2502      	movs	r5, #2
 80052ae:	e76f      	b.n	8005190 <_dtoa_r+0x3d8>
 80052b0:	9b01      	ldr	r3, [sp, #4]
 80052b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80052b6:	930c      	str	r3, [sp, #48]	; 0x30
 80052b8:	e78d      	b.n	80051d6 <_dtoa_r+0x41e>
 80052ba:	9900      	ldr	r1, [sp, #0]
 80052bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80052be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052c0:	4b4e      	ldr	r3, [pc, #312]	; (80053fc <_dtoa_r+0x644>)
 80052c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052c6:	4401      	add	r1, r0
 80052c8:	9102      	str	r1, [sp, #8]
 80052ca:	9908      	ldr	r1, [sp, #32]
 80052cc:	eeb0 8a47 	vmov.f32	s16, s14
 80052d0:	eef0 8a67 	vmov.f32	s17, s15
 80052d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052dc:	2900      	cmp	r1, #0
 80052de:	d045      	beq.n	800536c <_dtoa_r+0x5b4>
 80052e0:	494c      	ldr	r1, [pc, #304]	; (8005414 <_dtoa_r+0x65c>)
 80052e2:	2000      	movs	r0, #0
 80052e4:	f7fb fab2 	bl	800084c <__aeabi_ddiv>
 80052e8:	ec53 2b18 	vmov	r2, r3, d8
 80052ec:	f7fa ffcc 	bl	8000288 <__aeabi_dsub>
 80052f0:	9d00      	ldr	r5, [sp, #0]
 80052f2:	ec41 0b18 	vmov	d8, r0, r1
 80052f6:	4639      	mov	r1, r7
 80052f8:	4630      	mov	r0, r6
 80052fa:	f7fb fc2d 	bl	8000b58 <__aeabi_d2iz>
 80052fe:	900c      	str	r0, [sp, #48]	; 0x30
 8005300:	f7fb f910 	bl	8000524 <__aeabi_i2d>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4630      	mov	r0, r6
 800530a:	4639      	mov	r1, r7
 800530c:	f7fa ffbc 	bl	8000288 <__aeabi_dsub>
 8005310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005312:	3330      	adds	r3, #48	; 0x30
 8005314:	f805 3b01 	strb.w	r3, [r5], #1
 8005318:	ec53 2b18 	vmov	r2, r3, d8
 800531c:	4606      	mov	r6, r0
 800531e:	460f      	mov	r7, r1
 8005320:	f7fb fbdc 	bl	8000adc <__aeabi_dcmplt>
 8005324:	2800      	cmp	r0, #0
 8005326:	d165      	bne.n	80053f4 <_dtoa_r+0x63c>
 8005328:	4632      	mov	r2, r6
 800532a:	463b      	mov	r3, r7
 800532c:	4935      	ldr	r1, [pc, #212]	; (8005404 <_dtoa_r+0x64c>)
 800532e:	2000      	movs	r0, #0
 8005330:	f7fa ffaa 	bl	8000288 <__aeabi_dsub>
 8005334:	ec53 2b18 	vmov	r2, r3, d8
 8005338:	f7fb fbd0 	bl	8000adc <__aeabi_dcmplt>
 800533c:	2800      	cmp	r0, #0
 800533e:	f040 80b9 	bne.w	80054b4 <_dtoa_r+0x6fc>
 8005342:	9b02      	ldr	r3, [sp, #8]
 8005344:	429d      	cmp	r5, r3
 8005346:	f43f af75 	beq.w	8005234 <_dtoa_r+0x47c>
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <_dtoa_r+0x650>)
 800534c:	ec51 0b18 	vmov	r0, r1, d8
 8005350:	2200      	movs	r2, #0
 8005352:	f7fb f951 	bl	80005f8 <__aeabi_dmul>
 8005356:	4b2c      	ldr	r3, [pc, #176]	; (8005408 <_dtoa_r+0x650>)
 8005358:	ec41 0b18 	vmov	d8, r0, r1
 800535c:	2200      	movs	r2, #0
 800535e:	4630      	mov	r0, r6
 8005360:	4639      	mov	r1, r7
 8005362:	f7fb f949 	bl	80005f8 <__aeabi_dmul>
 8005366:	4606      	mov	r6, r0
 8005368:	460f      	mov	r7, r1
 800536a:	e7c4      	b.n	80052f6 <_dtoa_r+0x53e>
 800536c:	ec51 0b17 	vmov	r0, r1, d7
 8005370:	f7fb f942 	bl	80005f8 <__aeabi_dmul>
 8005374:	9b02      	ldr	r3, [sp, #8]
 8005376:	9d00      	ldr	r5, [sp, #0]
 8005378:	930c      	str	r3, [sp, #48]	; 0x30
 800537a:	ec41 0b18 	vmov	d8, r0, r1
 800537e:	4639      	mov	r1, r7
 8005380:	4630      	mov	r0, r6
 8005382:	f7fb fbe9 	bl	8000b58 <__aeabi_d2iz>
 8005386:	9011      	str	r0, [sp, #68]	; 0x44
 8005388:	f7fb f8cc 	bl	8000524 <__aeabi_i2d>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fa ff78 	bl	8000288 <__aeabi_dsub>
 8005398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800539a:	3330      	adds	r3, #48	; 0x30
 800539c:	f805 3b01 	strb.w	r3, [r5], #1
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	429d      	cmp	r5, r3
 80053a4:	4606      	mov	r6, r0
 80053a6:	460f      	mov	r7, r1
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	d134      	bne.n	8005418 <_dtoa_r+0x660>
 80053ae:	4b19      	ldr	r3, [pc, #100]	; (8005414 <_dtoa_r+0x65c>)
 80053b0:	ec51 0b18 	vmov	r0, r1, d8
 80053b4:	f7fa ff6a 	bl	800028c <__adddf3>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4630      	mov	r0, r6
 80053be:	4639      	mov	r1, r7
 80053c0:	f7fb fbaa 	bl	8000b18 <__aeabi_dcmpgt>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d175      	bne.n	80054b4 <_dtoa_r+0x6fc>
 80053c8:	ec53 2b18 	vmov	r2, r3, d8
 80053cc:	4911      	ldr	r1, [pc, #68]	; (8005414 <_dtoa_r+0x65c>)
 80053ce:	2000      	movs	r0, #0
 80053d0:	f7fa ff5a 	bl	8000288 <__aeabi_dsub>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4630      	mov	r0, r6
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fb fb7e 	bl	8000adc <__aeabi_dcmplt>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f43f af27 	beq.w	8005234 <_dtoa_r+0x47c>
 80053e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053e8:	1e6b      	subs	r3, r5, #1
 80053ea:	930c      	str	r3, [sp, #48]	; 0x30
 80053ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d0f8      	beq.n	80053e6 <_dtoa_r+0x62e>
 80053f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80053f8:	e04a      	b.n	8005490 <_dtoa_r+0x6d8>
 80053fa:	bf00      	nop
 80053fc:	08006e10 	.word	0x08006e10
 8005400:	08006de8 	.word	0x08006de8
 8005404:	3ff00000 	.word	0x3ff00000
 8005408:	40240000 	.word	0x40240000
 800540c:	401c0000 	.word	0x401c0000
 8005410:	40140000 	.word	0x40140000
 8005414:	3fe00000 	.word	0x3fe00000
 8005418:	4baf      	ldr	r3, [pc, #700]	; (80056d8 <_dtoa_r+0x920>)
 800541a:	f7fb f8ed 	bl	80005f8 <__aeabi_dmul>
 800541e:	4606      	mov	r6, r0
 8005420:	460f      	mov	r7, r1
 8005422:	e7ac      	b.n	800537e <_dtoa_r+0x5c6>
 8005424:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005428:	9d00      	ldr	r5, [sp, #0]
 800542a:	4642      	mov	r2, r8
 800542c:	464b      	mov	r3, r9
 800542e:	4630      	mov	r0, r6
 8005430:	4639      	mov	r1, r7
 8005432:	f7fb fa0b 	bl	800084c <__aeabi_ddiv>
 8005436:	f7fb fb8f 	bl	8000b58 <__aeabi_d2iz>
 800543a:	9002      	str	r0, [sp, #8]
 800543c:	f7fb f872 	bl	8000524 <__aeabi_i2d>
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	f7fb f8d8 	bl	80005f8 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fa ff1a 	bl	8000288 <__aeabi_dsub>
 8005454:	9e02      	ldr	r6, [sp, #8]
 8005456:	9f01      	ldr	r7, [sp, #4]
 8005458:	3630      	adds	r6, #48	; 0x30
 800545a:	f805 6b01 	strb.w	r6, [r5], #1
 800545e:	9e00      	ldr	r6, [sp, #0]
 8005460:	1bae      	subs	r6, r5, r6
 8005462:	42b7      	cmp	r7, r6
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	d137      	bne.n	80054da <_dtoa_r+0x722>
 800546a:	f7fa ff0f 	bl	800028c <__adddf3>
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	4606      	mov	r6, r0
 8005474:	460f      	mov	r7, r1
 8005476:	f7fb fb4f 	bl	8000b18 <__aeabi_dcmpgt>
 800547a:	b9c8      	cbnz	r0, 80054b0 <_dtoa_r+0x6f8>
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	4630      	mov	r0, r6
 8005482:	4639      	mov	r1, r7
 8005484:	f7fb fb20 	bl	8000ac8 <__aeabi_dcmpeq>
 8005488:	b110      	cbz	r0, 8005490 <_dtoa_r+0x6d8>
 800548a:	9b02      	ldr	r3, [sp, #8]
 800548c:	07d9      	lsls	r1, r3, #31
 800548e:	d40f      	bmi.n	80054b0 <_dtoa_r+0x6f8>
 8005490:	4620      	mov	r0, r4
 8005492:	4659      	mov	r1, fp
 8005494:	f000 fcf6 	bl	8005e84 <_Bfree>
 8005498:	2300      	movs	r3, #0
 800549a:	702b      	strb	r3, [r5, #0]
 800549c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800549e:	f10a 0001 	add.w	r0, sl, #1
 80054a2:	6018      	str	r0, [r3, #0]
 80054a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f43f acd8 	beq.w	8004e5c <_dtoa_r+0xa4>
 80054ac:	601d      	str	r5, [r3, #0]
 80054ae:	e4d5      	b.n	8004e5c <_dtoa_r+0xa4>
 80054b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80054b4:	462b      	mov	r3, r5
 80054b6:	461d      	mov	r5, r3
 80054b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054bc:	2a39      	cmp	r2, #57	; 0x39
 80054be:	d108      	bne.n	80054d2 <_dtoa_r+0x71a>
 80054c0:	9a00      	ldr	r2, [sp, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d1f7      	bne.n	80054b6 <_dtoa_r+0x6fe>
 80054c6:	9a07      	ldr	r2, [sp, #28]
 80054c8:	9900      	ldr	r1, [sp, #0]
 80054ca:	3201      	adds	r2, #1
 80054cc:	9207      	str	r2, [sp, #28]
 80054ce:	2230      	movs	r2, #48	; 0x30
 80054d0:	700a      	strb	r2, [r1, #0]
 80054d2:	781a      	ldrb	r2, [r3, #0]
 80054d4:	3201      	adds	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	e78c      	b.n	80053f4 <_dtoa_r+0x63c>
 80054da:	4b7f      	ldr	r3, [pc, #508]	; (80056d8 <_dtoa_r+0x920>)
 80054dc:	2200      	movs	r2, #0
 80054de:	f7fb f88b 	bl	80005f8 <__aeabi_dmul>
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	4606      	mov	r6, r0
 80054e8:	460f      	mov	r7, r1
 80054ea:	f7fb faed 	bl	8000ac8 <__aeabi_dcmpeq>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d09b      	beq.n	800542a <_dtoa_r+0x672>
 80054f2:	e7cd      	b.n	8005490 <_dtoa_r+0x6d8>
 80054f4:	9a08      	ldr	r2, [sp, #32]
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	f000 80c4 	beq.w	8005684 <_dtoa_r+0x8cc>
 80054fc:	9a05      	ldr	r2, [sp, #20]
 80054fe:	2a01      	cmp	r2, #1
 8005500:	f300 80a8 	bgt.w	8005654 <_dtoa_r+0x89c>
 8005504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005506:	2a00      	cmp	r2, #0
 8005508:	f000 80a0 	beq.w	800564c <_dtoa_r+0x894>
 800550c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005510:	9e06      	ldr	r6, [sp, #24]
 8005512:	4645      	mov	r5, r8
 8005514:	9a04      	ldr	r2, [sp, #16]
 8005516:	2101      	movs	r1, #1
 8005518:	441a      	add	r2, r3
 800551a:	4620      	mov	r0, r4
 800551c:	4498      	add	r8, r3
 800551e:	9204      	str	r2, [sp, #16]
 8005520:	f000 fd6c 	bl	8005ffc <__i2b>
 8005524:	4607      	mov	r7, r0
 8005526:	2d00      	cmp	r5, #0
 8005528:	dd0b      	ble.n	8005542 <_dtoa_r+0x78a>
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	dd08      	ble.n	8005542 <_dtoa_r+0x78a>
 8005530:	42ab      	cmp	r3, r5
 8005532:	9a04      	ldr	r2, [sp, #16]
 8005534:	bfa8      	it	ge
 8005536:	462b      	movge	r3, r5
 8005538:	eba8 0803 	sub.w	r8, r8, r3
 800553c:	1aed      	subs	r5, r5, r3
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	b1fb      	cbz	r3, 8005586 <_dtoa_r+0x7ce>
 8005546:	9b08      	ldr	r3, [sp, #32]
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 809f 	beq.w	800568c <_dtoa_r+0x8d4>
 800554e:	2e00      	cmp	r6, #0
 8005550:	dd11      	ble.n	8005576 <_dtoa_r+0x7be>
 8005552:	4639      	mov	r1, r7
 8005554:	4632      	mov	r2, r6
 8005556:	4620      	mov	r0, r4
 8005558:	f000 fe0c 	bl	8006174 <__pow5mult>
 800555c:	465a      	mov	r2, fp
 800555e:	4601      	mov	r1, r0
 8005560:	4607      	mov	r7, r0
 8005562:	4620      	mov	r0, r4
 8005564:	f000 fd60 	bl	8006028 <__multiply>
 8005568:	4659      	mov	r1, fp
 800556a:	9007      	str	r0, [sp, #28]
 800556c:	4620      	mov	r0, r4
 800556e:	f000 fc89 	bl	8005e84 <_Bfree>
 8005572:	9b07      	ldr	r3, [sp, #28]
 8005574:	469b      	mov	fp, r3
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	1b9a      	subs	r2, r3, r6
 800557a:	d004      	beq.n	8005586 <_dtoa_r+0x7ce>
 800557c:	4659      	mov	r1, fp
 800557e:	4620      	mov	r0, r4
 8005580:	f000 fdf8 	bl	8006174 <__pow5mult>
 8005584:	4683      	mov	fp, r0
 8005586:	2101      	movs	r1, #1
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fd37 	bl	8005ffc <__i2b>
 800558e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005590:	2b00      	cmp	r3, #0
 8005592:	4606      	mov	r6, r0
 8005594:	dd7c      	ble.n	8005690 <_dtoa_r+0x8d8>
 8005596:	461a      	mov	r2, r3
 8005598:	4601      	mov	r1, r0
 800559a:	4620      	mov	r0, r4
 800559c:	f000 fdea 	bl	8006174 <__pow5mult>
 80055a0:	9b05      	ldr	r3, [sp, #20]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	4606      	mov	r6, r0
 80055a6:	dd76      	ble.n	8005696 <_dtoa_r+0x8de>
 80055a8:	2300      	movs	r3, #0
 80055aa:	9306      	str	r3, [sp, #24]
 80055ac:	6933      	ldr	r3, [r6, #16]
 80055ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055b2:	6918      	ldr	r0, [r3, #16]
 80055b4:	f000 fcd2 	bl	8005f5c <__hi0bits>
 80055b8:	f1c0 0020 	rsb	r0, r0, #32
 80055bc:	9b04      	ldr	r3, [sp, #16]
 80055be:	4418      	add	r0, r3
 80055c0:	f010 001f 	ands.w	r0, r0, #31
 80055c4:	f000 8086 	beq.w	80056d4 <_dtoa_r+0x91c>
 80055c8:	f1c0 0320 	rsb	r3, r0, #32
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	dd7f      	ble.n	80056d0 <_dtoa_r+0x918>
 80055d0:	f1c0 001c 	rsb	r0, r0, #28
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	4403      	add	r3, r0
 80055d8:	4480      	add	r8, r0
 80055da:	4405      	add	r5, r0
 80055dc:	9304      	str	r3, [sp, #16]
 80055de:	f1b8 0f00 	cmp.w	r8, #0
 80055e2:	dd05      	ble.n	80055f0 <_dtoa_r+0x838>
 80055e4:	4659      	mov	r1, fp
 80055e6:	4642      	mov	r2, r8
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 fe1d 	bl	8006228 <__lshift>
 80055ee:	4683      	mov	fp, r0
 80055f0:	9b04      	ldr	r3, [sp, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	dd05      	ble.n	8005602 <_dtoa_r+0x84a>
 80055f6:	4631      	mov	r1, r6
 80055f8:	461a      	mov	r2, r3
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 fe14 	bl	8006228 <__lshift>
 8005600:	4606      	mov	r6, r0
 8005602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d069      	beq.n	80056dc <_dtoa_r+0x924>
 8005608:	4631      	mov	r1, r6
 800560a:	4658      	mov	r0, fp
 800560c:	f000 fe78 	bl	8006300 <__mcmp>
 8005610:	2800      	cmp	r0, #0
 8005612:	da63      	bge.n	80056dc <_dtoa_r+0x924>
 8005614:	2300      	movs	r3, #0
 8005616:	4659      	mov	r1, fp
 8005618:	220a      	movs	r2, #10
 800561a:	4620      	mov	r0, r4
 800561c:	f000 fc54 	bl	8005ec8 <__multadd>
 8005620:	9b08      	ldr	r3, [sp, #32]
 8005622:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005626:	4683      	mov	fp, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 818f 	beq.w	800594c <_dtoa_r+0xb94>
 800562e:	4639      	mov	r1, r7
 8005630:	2300      	movs	r3, #0
 8005632:	220a      	movs	r2, #10
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fc47 	bl	8005ec8 <__multadd>
 800563a:	f1b9 0f00 	cmp.w	r9, #0
 800563e:	4607      	mov	r7, r0
 8005640:	f300 808e 	bgt.w	8005760 <_dtoa_r+0x9a8>
 8005644:	9b05      	ldr	r3, [sp, #20]
 8005646:	2b02      	cmp	r3, #2
 8005648:	dc50      	bgt.n	80056ec <_dtoa_r+0x934>
 800564a:	e089      	b.n	8005760 <_dtoa_r+0x9a8>
 800564c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800564e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005652:	e75d      	b.n	8005510 <_dtoa_r+0x758>
 8005654:	9b01      	ldr	r3, [sp, #4]
 8005656:	1e5e      	subs	r6, r3, #1
 8005658:	9b06      	ldr	r3, [sp, #24]
 800565a:	42b3      	cmp	r3, r6
 800565c:	bfbf      	itttt	lt
 800565e:	9b06      	ldrlt	r3, [sp, #24]
 8005660:	9606      	strlt	r6, [sp, #24]
 8005662:	1af2      	sublt	r2, r6, r3
 8005664:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005666:	bfb6      	itet	lt
 8005668:	189b      	addlt	r3, r3, r2
 800566a:	1b9e      	subge	r6, r3, r6
 800566c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800566e:	9b01      	ldr	r3, [sp, #4]
 8005670:	bfb8      	it	lt
 8005672:	2600      	movlt	r6, #0
 8005674:	2b00      	cmp	r3, #0
 8005676:	bfb5      	itete	lt
 8005678:	eba8 0503 	sublt.w	r5, r8, r3
 800567c:	9b01      	ldrge	r3, [sp, #4]
 800567e:	2300      	movlt	r3, #0
 8005680:	4645      	movge	r5, r8
 8005682:	e747      	b.n	8005514 <_dtoa_r+0x75c>
 8005684:	9e06      	ldr	r6, [sp, #24]
 8005686:	9f08      	ldr	r7, [sp, #32]
 8005688:	4645      	mov	r5, r8
 800568a:	e74c      	b.n	8005526 <_dtoa_r+0x76e>
 800568c:	9a06      	ldr	r2, [sp, #24]
 800568e:	e775      	b.n	800557c <_dtoa_r+0x7c4>
 8005690:	9b05      	ldr	r3, [sp, #20]
 8005692:	2b01      	cmp	r3, #1
 8005694:	dc18      	bgt.n	80056c8 <_dtoa_r+0x910>
 8005696:	9b02      	ldr	r3, [sp, #8]
 8005698:	b9b3      	cbnz	r3, 80056c8 <_dtoa_r+0x910>
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a0:	b9a3      	cbnz	r3, 80056cc <_dtoa_r+0x914>
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056a8:	0d1b      	lsrs	r3, r3, #20
 80056aa:	051b      	lsls	r3, r3, #20
 80056ac:	b12b      	cbz	r3, 80056ba <_dtoa_r+0x902>
 80056ae:	9b04      	ldr	r3, [sp, #16]
 80056b0:	3301      	adds	r3, #1
 80056b2:	9304      	str	r3, [sp, #16]
 80056b4:	f108 0801 	add.w	r8, r8, #1
 80056b8:	2301      	movs	r3, #1
 80056ba:	9306      	str	r3, [sp, #24]
 80056bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f47f af74 	bne.w	80055ac <_dtoa_r+0x7f4>
 80056c4:	2001      	movs	r0, #1
 80056c6:	e779      	b.n	80055bc <_dtoa_r+0x804>
 80056c8:	2300      	movs	r3, #0
 80056ca:	e7f6      	b.n	80056ba <_dtoa_r+0x902>
 80056cc:	9b02      	ldr	r3, [sp, #8]
 80056ce:	e7f4      	b.n	80056ba <_dtoa_r+0x902>
 80056d0:	d085      	beq.n	80055de <_dtoa_r+0x826>
 80056d2:	4618      	mov	r0, r3
 80056d4:	301c      	adds	r0, #28
 80056d6:	e77d      	b.n	80055d4 <_dtoa_r+0x81c>
 80056d8:	40240000 	.word	0x40240000
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	dc38      	bgt.n	8005754 <_dtoa_r+0x99c>
 80056e2:	9b05      	ldr	r3, [sp, #20]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	dd35      	ble.n	8005754 <_dtoa_r+0x99c>
 80056e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80056ec:	f1b9 0f00 	cmp.w	r9, #0
 80056f0:	d10d      	bne.n	800570e <_dtoa_r+0x956>
 80056f2:	4631      	mov	r1, r6
 80056f4:	464b      	mov	r3, r9
 80056f6:	2205      	movs	r2, #5
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 fbe5 	bl	8005ec8 <__multadd>
 80056fe:	4601      	mov	r1, r0
 8005700:	4606      	mov	r6, r0
 8005702:	4658      	mov	r0, fp
 8005704:	f000 fdfc 	bl	8006300 <__mcmp>
 8005708:	2800      	cmp	r0, #0
 800570a:	f73f adbd 	bgt.w	8005288 <_dtoa_r+0x4d0>
 800570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005710:	9d00      	ldr	r5, [sp, #0]
 8005712:	ea6f 0a03 	mvn.w	sl, r3
 8005716:	f04f 0800 	mov.w	r8, #0
 800571a:	4631      	mov	r1, r6
 800571c:	4620      	mov	r0, r4
 800571e:	f000 fbb1 	bl	8005e84 <_Bfree>
 8005722:	2f00      	cmp	r7, #0
 8005724:	f43f aeb4 	beq.w	8005490 <_dtoa_r+0x6d8>
 8005728:	f1b8 0f00 	cmp.w	r8, #0
 800572c:	d005      	beq.n	800573a <_dtoa_r+0x982>
 800572e:	45b8      	cmp	r8, r7
 8005730:	d003      	beq.n	800573a <_dtoa_r+0x982>
 8005732:	4641      	mov	r1, r8
 8005734:	4620      	mov	r0, r4
 8005736:	f000 fba5 	bl	8005e84 <_Bfree>
 800573a:	4639      	mov	r1, r7
 800573c:	4620      	mov	r0, r4
 800573e:	f000 fba1 	bl	8005e84 <_Bfree>
 8005742:	e6a5      	b.n	8005490 <_dtoa_r+0x6d8>
 8005744:	2600      	movs	r6, #0
 8005746:	4637      	mov	r7, r6
 8005748:	e7e1      	b.n	800570e <_dtoa_r+0x956>
 800574a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800574c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005750:	4637      	mov	r7, r6
 8005752:	e599      	b.n	8005288 <_dtoa_r+0x4d0>
 8005754:	9b08      	ldr	r3, [sp, #32]
 8005756:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80fd 	beq.w	800595a <_dtoa_r+0xba2>
 8005760:	2d00      	cmp	r5, #0
 8005762:	dd05      	ble.n	8005770 <_dtoa_r+0x9b8>
 8005764:	4639      	mov	r1, r7
 8005766:	462a      	mov	r2, r5
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fd5d 	bl	8006228 <__lshift>
 800576e:	4607      	mov	r7, r0
 8005770:	9b06      	ldr	r3, [sp, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d05c      	beq.n	8005830 <_dtoa_r+0xa78>
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4620      	mov	r0, r4
 800577a:	f000 fb43 	bl	8005e04 <_Balloc>
 800577e:	4605      	mov	r5, r0
 8005780:	b928      	cbnz	r0, 800578e <_dtoa_r+0x9d6>
 8005782:	4b80      	ldr	r3, [pc, #512]	; (8005984 <_dtoa_r+0xbcc>)
 8005784:	4602      	mov	r2, r0
 8005786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800578a:	f7ff bb2e 	b.w	8004dea <_dtoa_r+0x32>
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	3202      	adds	r2, #2
 8005792:	0092      	lsls	r2, r2, #2
 8005794:	f107 010c 	add.w	r1, r7, #12
 8005798:	300c      	adds	r0, #12
 800579a:	f000 fb25 	bl	8005de8 <memcpy>
 800579e:	2201      	movs	r2, #1
 80057a0:	4629      	mov	r1, r5
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 fd40 	bl	8006228 <__lshift>
 80057a8:	9b00      	ldr	r3, [sp, #0]
 80057aa:	3301      	adds	r3, #1
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	9b00      	ldr	r3, [sp, #0]
 80057b0:	444b      	add	r3, r9
 80057b2:	9307      	str	r3, [sp, #28]
 80057b4:	9b02      	ldr	r3, [sp, #8]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	46b8      	mov	r8, r7
 80057bc:	9306      	str	r3, [sp, #24]
 80057be:	4607      	mov	r7, r0
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	4631      	mov	r1, r6
 80057c4:	3b01      	subs	r3, #1
 80057c6:	4658      	mov	r0, fp
 80057c8:	9302      	str	r3, [sp, #8]
 80057ca:	f7ff fa69 	bl	8004ca0 <quorem>
 80057ce:	4603      	mov	r3, r0
 80057d0:	3330      	adds	r3, #48	; 0x30
 80057d2:	9004      	str	r0, [sp, #16]
 80057d4:	4641      	mov	r1, r8
 80057d6:	4658      	mov	r0, fp
 80057d8:	9308      	str	r3, [sp, #32]
 80057da:	f000 fd91 	bl	8006300 <__mcmp>
 80057de:	463a      	mov	r2, r7
 80057e0:	4681      	mov	r9, r0
 80057e2:	4631      	mov	r1, r6
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 fda7 	bl	8006338 <__mdiff>
 80057ea:	68c2      	ldr	r2, [r0, #12]
 80057ec:	9b08      	ldr	r3, [sp, #32]
 80057ee:	4605      	mov	r5, r0
 80057f0:	bb02      	cbnz	r2, 8005834 <_dtoa_r+0xa7c>
 80057f2:	4601      	mov	r1, r0
 80057f4:	4658      	mov	r0, fp
 80057f6:	f000 fd83 	bl	8006300 <__mcmp>
 80057fa:	9b08      	ldr	r3, [sp, #32]
 80057fc:	4602      	mov	r2, r0
 80057fe:	4629      	mov	r1, r5
 8005800:	4620      	mov	r0, r4
 8005802:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005806:	f000 fb3d 	bl	8005e84 <_Bfree>
 800580a:	9b05      	ldr	r3, [sp, #20]
 800580c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800580e:	9d01      	ldr	r5, [sp, #4]
 8005810:	ea43 0102 	orr.w	r1, r3, r2
 8005814:	9b06      	ldr	r3, [sp, #24]
 8005816:	430b      	orrs	r3, r1
 8005818:	9b08      	ldr	r3, [sp, #32]
 800581a:	d10d      	bne.n	8005838 <_dtoa_r+0xa80>
 800581c:	2b39      	cmp	r3, #57	; 0x39
 800581e:	d029      	beq.n	8005874 <_dtoa_r+0xabc>
 8005820:	f1b9 0f00 	cmp.w	r9, #0
 8005824:	dd01      	ble.n	800582a <_dtoa_r+0xa72>
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	3331      	adds	r3, #49	; 0x31
 800582a:	9a02      	ldr	r2, [sp, #8]
 800582c:	7013      	strb	r3, [r2, #0]
 800582e:	e774      	b.n	800571a <_dtoa_r+0x962>
 8005830:	4638      	mov	r0, r7
 8005832:	e7b9      	b.n	80057a8 <_dtoa_r+0x9f0>
 8005834:	2201      	movs	r2, #1
 8005836:	e7e2      	b.n	80057fe <_dtoa_r+0xa46>
 8005838:	f1b9 0f00 	cmp.w	r9, #0
 800583c:	db06      	blt.n	800584c <_dtoa_r+0xa94>
 800583e:	9905      	ldr	r1, [sp, #20]
 8005840:	ea41 0909 	orr.w	r9, r1, r9
 8005844:	9906      	ldr	r1, [sp, #24]
 8005846:	ea59 0101 	orrs.w	r1, r9, r1
 800584a:	d120      	bne.n	800588e <_dtoa_r+0xad6>
 800584c:	2a00      	cmp	r2, #0
 800584e:	ddec      	ble.n	800582a <_dtoa_r+0xa72>
 8005850:	4659      	mov	r1, fp
 8005852:	2201      	movs	r2, #1
 8005854:	4620      	mov	r0, r4
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	f000 fce6 	bl	8006228 <__lshift>
 800585c:	4631      	mov	r1, r6
 800585e:	4683      	mov	fp, r0
 8005860:	f000 fd4e 	bl	8006300 <__mcmp>
 8005864:	2800      	cmp	r0, #0
 8005866:	9b01      	ldr	r3, [sp, #4]
 8005868:	dc02      	bgt.n	8005870 <_dtoa_r+0xab8>
 800586a:	d1de      	bne.n	800582a <_dtoa_r+0xa72>
 800586c:	07da      	lsls	r2, r3, #31
 800586e:	d5dc      	bpl.n	800582a <_dtoa_r+0xa72>
 8005870:	2b39      	cmp	r3, #57	; 0x39
 8005872:	d1d8      	bne.n	8005826 <_dtoa_r+0xa6e>
 8005874:	9a02      	ldr	r2, [sp, #8]
 8005876:	2339      	movs	r3, #57	; 0x39
 8005878:	7013      	strb	r3, [r2, #0]
 800587a:	462b      	mov	r3, r5
 800587c:	461d      	mov	r5, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005884:	2a39      	cmp	r2, #57	; 0x39
 8005886:	d050      	beq.n	800592a <_dtoa_r+0xb72>
 8005888:	3201      	adds	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e745      	b.n	800571a <_dtoa_r+0x962>
 800588e:	2a00      	cmp	r2, #0
 8005890:	dd03      	ble.n	800589a <_dtoa_r+0xae2>
 8005892:	2b39      	cmp	r3, #57	; 0x39
 8005894:	d0ee      	beq.n	8005874 <_dtoa_r+0xabc>
 8005896:	3301      	adds	r3, #1
 8005898:	e7c7      	b.n	800582a <_dtoa_r+0xa72>
 800589a:	9a01      	ldr	r2, [sp, #4]
 800589c:	9907      	ldr	r1, [sp, #28]
 800589e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80058a2:	428a      	cmp	r2, r1
 80058a4:	d02a      	beq.n	80058fc <_dtoa_r+0xb44>
 80058a6:	4659      	mov	r1, fp
 80058a8:	2300      	movs	r3, #0
 80058aa:	220a      	movs	r2, #10
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fb0b 	bl	8005ec8 <__multadd>
 80058b2:	45b8      	cmp	r8, r7
 80058b4:	4683      	mov	fp, r0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	f04f 020a 	mov.w	r2, #10
 80058be:	4641      	mov	r1, r8
 80058c0:	4620      	mov	r0, r4
 80058c2:	d107      	bne.n	80058d4 <_dtoa_r+0xb1c>
 80058c4:	f000 fb00 	bl	8005ec8 <__multadd>
 80058c8:	4680      	mov	r8, r0
 80058ca:	4607      	mov	r7, r0
 80058cc:	9b01      	ldr	r3, [sp, #4]
 80058ce:	3301      	adds	r3, #1
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	e775      	b.n	80057c0 <_dtoa_r+0xa08>
 80058d4:	f000 faf8 	bl	8005ec8 <__multadd>
 80058d8:	4639      	mov	r1, r7
 80058da:	4680      	mov	r8, r0
 80058dc:	2300      	movs	r3, #0
 80058de:	220a      	movs	r2, #10
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 faf1 	bl	8005ec8 <__multadd>
 80058e6:	4607      	mov	r7, r0
 80058e8:	e7f0      	b.n	80058cc <_dtoa_r+0xb14>
 80058ea:	f1b9 0f00 	cmp.w	r9, #0
 80058ee:	9a00      	ldr	r2, [sp, #0]
 80058f0:	bfcc      	ite	gt
 80058f2:	464d      	movgt	r5, r9
 80058f4:	2501      	movle	r5, #1
 80058f6:	4415      	add	r5, r2
 80058f8:	f04f 0800 	mov.w	r8, #0
 80058fc:	4659      	mov	r1, fp
 80058fe:	2201      	movs	r2, #1
 8005900:	4620      	mov	r0, r4
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	f000 fc90 	bl	8006228 <__lshift>
 8005908:	4631      	mov	r1, r6
 800590a:	4683      	mov	fp, r0
 800590c:	f000 fcf8 	bl	8006300 <__mcmp>
 8005910:	2800      	cmp	r0, #0
 8005912:	dcb2      	bgt.n	800587a <_dtoa_r+0xac2>
 8005914:	d102      	bne.n	800591c <_dtoa_r+0xb64>
 8005916:	9b01      	ldr	r3, [sp, #4]
 8005918:	07db      	lsls	r3, r3, #31
 800591a:	d4ae      	bmi.n	800587a <_dtoa_r+0xac2>
 800591c:	462b      	mov	r3, r5
 800591e:	461d      	mov	r5, r3
 8005920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005924:	2a30      	cmp	r2, #48	; 0x30
 8005926:	d0fa      	beq.n	800591e <_dtoa_r+0xb66>
 8005928:	e6f7      	b.n	800571a <_dtoa_r+0x962>
 800592a:	9a00      	ldr	r2, [sp, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d1a5      	bne.n	800587c <_dtoa_r+0xac4>
 8005930:	f10a 0a01 	add.w	sl, sl, #1
 8005934:	2331      	movs	r3, #49	; 0x31
 8005936:	e779      	b.n	800582c <_dtoa_r+0xa74>
 8005938:	4b13      	ldr	r3, [pc, #76]	; (8005988 <_dtoa_r+0xbd0>)
 800593a:	f7ff baaf 	b.w	8004e9c <_dtoa_r+0xe4>
 800593e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005940:	2b00      	cmp	r3, #0
 8005942:	f47f aa86 	bne.w	8004e52 <_dtoa_r+0x9a>
 8005946:	4b11      	ldr	r3, [pc, #68]	; (800598c <_dtoa_r+0xbd4>)
 8005948:	f7ff baa8 	b.w	8004e9c <_dtoa_r+0xe4>
 800594c:	f1b9 0f00 	cmp.w	r9, #0
 8005950:	dc03      	bgt.n	800595a <_dtoa_r+0xba2>
 8005952:	9b05      	ldr	r3, [sp, #20]
 8005954:	2b02      	cmp	r3, #2
 8005956:	f73f aec9 	bgt.w	80056ec <_dtoa_r+0x934>
 800595a:	9d00      	ldr	r5, [sp, #0]
 800595c:	4631      	mov	r1, r6
 800595e:	4658      	mov	r0, fp
 8005960:	f7ff f99e 	bl	8004ca0 <quorem>
 8005964:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005968:	f805 3b01 	strb.w	r3, [r5], #1
 800596c:	9a00      	ldr	r2, [sp, #0]
 800596e:	1aaa      	subs	r2, r5, r2
 8005970:	4591      	cmp	r9, r2
 8005972:	ddba      	ble.n	80058ea <_dtoa_r+0xb32>
 8005974:	4659      	mov	r1, fp
 8005976:	2300      	movs	r3, #0
 8005978:	220a      	movs	r2, #10
 800597a:	4620      	mov	r0, r4
 800597c:	f000 faa4 	bl	8005ec8 <__multadd>
 8005980:	4683      	mov	fp, r0
 8005982:	e7eb      	b.n	800595c <_dtoa_r+0xba4>
 8005984:	08006d13 	.word	0x08006d13
 8005988:	08006c6c 	.word	0x08006c6c
 800598c:	08006c90 	.word	0x08006c90

08005990 <__sflush_r>:
 8005990:	898a      	ldrh	r2, [r1, #12]
 8005992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005996:	4605      	mov	r5, r0
 8005998:	0710      	lsls	r0, r2, #28
 800599a:	460c      	mov	r4, r1
 800599c:	d458      	bmi.n	8005a50 <__sflush_r+0xc0>
 800599e:	684b      	ldr	r3, [r1, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dc05      	bgt.n	80059b0 <__sflush_r+0x20>
 80059a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	dc02      	bgt.n	80059b0 <__sflush_r+0x20>
 80059aa:	2000      	movs	r0, #0
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d0f9      	beq.n	80059aa <__sflush_r+0x1a>
 80059b6:	2300      	movs	r3, #0
 80059b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059bc:	682f      	ldr	r7, [r5, #0]
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	d032      	beq.n	8005a28 <__sflush_r+0x98>
 80059c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	075a      	lsls	r2, r3, #29
 80059c8:	d505      	bpl.n	80059d6 <__sflush_r+0x46>
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	1ac0      	subs	r0, r0, r3
 80059ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059d0:	b10b      	cbz	r3, 80059d6 <__sflush_r+0x46>
 80059d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059d4:	1ac0      	subs	r0, r0, r3
 80059d6:	2300      	movs	r3, #0
 80059d8:	4602      	mov	r2, r0
 80059da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059dc:	6a21      	ldr	r1, [r4, #32]
 80059de:	4628      	mov	r0, r5
 80059e0:	47b0      	blx	r6
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	d106      	bne.n	80059f6 <__sflush_r+0x66>
 80059e8:	6829      	ldr	r1, [r5, #0]
 80059ea:	291d      	cmp	r1, #29
 80059ec:	d82c      	bhi.n	8005a48 <__sflush_r+0xb8>
 80059ee:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <__sflush_r+0x108>)
 80059f0:	40ca      	lsrs	r2, r1
 80059f2:	07d6      	lsls	r6, r2, #31
 80059f4:	d528      	bpl.n	8005a48 <__sflush_r+0xb8>
 80059f6:	2200      	movs	r2, #0
 80059f8:	6062      	str	r2, [r4, #4]
 80059fa:	04d9      	lsls	r1, r3, #19
 80059fc:	6922      	ldr	r2, [r4, #16]
 80059fe:	6022      	str	r2, [r4, #0]
 8005a00:	d504      	bpl.n	8005a0c <__sflush_r+0x7c>
 8005a02:	1c42      	adds	r2, r0, #1
 8005a04:	d101      	bne.n	8005a0a <__sflush_r+0x7a>
 8005a06:	682b      	ldr	r3, [r5, #0]
 8005a08:	b903      	cbnz	r3, 8005a0c <__sflush_r+0x7c>
 8005a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a0e:	602f      	str	r7, [r5, #0]
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d0ca      	beq.n	80059aa <__sflush_r+0x1a>
 8005a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a18:	4299      	cmp	r1, r3
 8005a1a:	d002      	beq.n	8005a22 <__sflush_r+0x92>
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f000 fd7f 	bl	8006520 <_free_r>
 8005a22:	2000      	movs	r0, #0
 8005a24:	6360      	str	r0, [r4, #52]	; 0x34
 8005a26:	e7c1      	b.n	80059ac <__sflush_r+0x1c>
 8005a28:	6a21      	ldr	r1, [r4, #32]
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b0      	blx	r6
 8005a30:	1c41      	adds	r1, r0, #1
 8005a32:	d1c7      	bne.n	80059c4 <__sflush_r+0x34>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0c4      	beq.n	80059c4 <__sflush_r+0x34>
 8005a3a:	2b1d      	cmp	r3, #29
 8005a3c:	d001      	beq.n	8005a42 <__sflush_r+0xb2>
 8005a3e:	2b16      	cmp	r3, #22
 8005a40:	d101      	bne.n	8005a46 <__sflush_r+0xb6>
 8005a42:	602f      	str	r7, [r5, #0]
 8005a44:	e7b1      	b.n	80059aa <__sflush_r+0x1a>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	e7ad      	b.n	80059ac <__sflush_r+0x1c>
 8005a50:	690f      	ldr	r7, [r1, #16]
 8005a52:	2f00      	cmp	r7, #0
 8005a54:	d0a9      	beq.n	80059aa <__sflush_r+0x1a>
 8005a56:	0793      	lsls	r3, r2, #30
 8005a58:	680e      	ldr	r6, [r1, #0]
 8005a5a:	bf08      	it	eq
 8005a5c:	694b      	ldreq	r3, [r1, #20]
 8005a5e:	600f      	str	r7, [r1, #0]
 8005a60:	bf18      	it	ne
 8005a62:	2300      	movne	r3, #0
 8005a64:	eba6 0807 	sub.w	r8, r6, r7
 8005a68:	608b      	str	r3, [r1, #8]
 8005a6a:	f1b8 0f00 	cmp.w	r8, #0
 8005a6e:	dd9c      	ble.n	80059aa <__sflush_r+0x1a>
 8005a70:	6a21      	ldr	r1, [r4, #32]
 8005a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a74:	4643      	mov	r3, r8
 8005a76:	463a      	mov	r2, r7
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b0      	blx	r6
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	dc06      	bgt.n	8005a8e <__sflush_r+0xfe>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a8c:	e78e      	b.n	80059ac <__sflush_r+0x1c>
 8005a8e:	4407      	add	r7, r0
 8005a90:	eba8 0800 	sub.w	r8, r8, r0
 8005a94:	e7e9      	b.n	8005a6a <__sflush_r+0xda>
 8005a96:	bf00      	nop
 8005a98:	20400001 	.word	0x20400001

08005a9c <_fflush_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	b913      	cbnz	r3, 8005aac <_fflush_r+0x10>
 8005aa6:	2500      	movs	r5, #0
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	b118      	cbz	r0, 8005ab6 <_fflush_r+0x1a>
 8005aae:	6983      	ldr	r3, [r0, #24]
 8005ab0:	b90b      	cbnz	r3, 8005ab6 <_fflush_r+0x1a>
 8005ab2:	f000 f887 	bl	8005bc4 <__sinit>
 8005ab6:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <_fflush_r+0x6c>)
 8005ab8:	429c      	cmp	r4, r3
 8005aba:	d11b      	bne.n	8005af4 <_fflush_r+0x58>
 8005abc:	686c      	ldr	r4, [r5, #4]
 8005abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0ef      	beq.n	8005aa6 <_fflush_r+0xa>
 8005ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ac8:	07d0      	lsls	r0, r2, #31
 8005aca:	d404      	bmi.n	8005ad6 <_fflush_r+0x3a>
 8005acc:	0599      	lsls	r1, r3, #22
 8005ace:	d402      	bmi.n	8005ad6 <_fflush_r+0x3a>
 8005ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ad2:	f000 f91a 	bl	8005d0a <__retarget_lock_acquire_recursive>
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	4621      	mov	r1, r4
 8005ada:	f7ff ff59 	bl	8005990 <__sflush_r>
 8005ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ae0:	07da      	lsls	r2, r3, #31
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	d4e0      	bmi.n	8005aa8 <_fflush_r+0xc>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	059b      	lsls	r3, r3, #22
 8005aea:	d4dd      	bmi.n	8005aa8 <_fflush_r+0xc>
 8005aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aee:	f000 f90d 	bl	8005d0c <__retarget_lock_release_recursive>
 8005af2:	e7d9      	b.n	8005aa8 <_fflush_r+0xc>
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <_fflush_r+0x70>)
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d101      	bne.n	8005afe <_fflush_r+0x62>
 8005afa:	68ac      	ldr	r4, [r5, #8]
 8005afc:	e7df      	b.n	8005abe <_fflush_r+0x22>
 8005afe:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <_fflush_r+0x74>)
 8005b00:	429c      	cmp	r4, r3
 8005b02:	bf08      	it	eq
 8005b04:	68ec      	ldreq	r4, [r5, #12]
 8005b06:	e7da      	b.n	8005abe <_fflush_r+0x22>
 8005b08:	08006d44 	.word	0x08006d44
 8005b0c:	08006d64 	.word	0x08006d64
 8005b10:	08006d24 	.word	0x08006d24

08005b14 <std>:
 8005b14:	2300      	movs	r3, #0
 8005b16:	b510      	push	{r4, lr}
 8005b18:	4604      	mov	r4, r0
 8005b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b22:	6083      	str	r3, [r0, #8]
 8005b24:	8181      	strh	r1, [r0, #12]
 8005b26:	6643      	str	r3, [r0, #100]	; 0x64
 8005b28:	81c2      	strh	r2, [r0, #14]
 8005b2a:	6183      	str	r3, [r0, #24]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	2208      	movs	r2, #8
 8005b30:	305c      	adds	r0, #92	; 0x5c
 8005b32:	f7fe fa3f 	bl	8003fb4 <memset>
 8005b36:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <std+0x38>)
 8005b38:	6263      	str	r3, [r4, #36]	; 0x24
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <std+0x3c>)
 8005b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b3e:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <std+0x40>)
 8005b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <std+0x44>)
 8005b44:	6224      	str	r4, [r4, #32]
 8005b46:	6323      	str	r3, [r4, #48]	; 0x30
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08006695 	.word	0x08006695
 8005b50:	080066b7 	.word	0x080066b7
 8005b54:	080066ef 	.word	0x080066ef
 8005b58:	08006713 	.word	0x08006713

08005b5c <_cleanup_r>:
 8005b5c:	4901      	ldr	r1, [pc, #4]	; (8005b64 <_cleanup_r+0x8>)
 8005b5e:	f000 b8af 	b.w	8005cc0 <_fwalk_reent>
 8005b62:	bf00      	nop
 8005b64:	08005a9d 	.word	0x08005a9d

08005b68 <__sfmoreglue>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	1e4a      	subs	r2, r1, #1
 8005b6c:	2568      	movs	r5, #104	; 0x68
 8005b6e:	4355      	muls	r5, r2
 8005b70:	460e      	mov	r6, r1
 8005b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b76:	f000 fd23 	bl	80065c0 <_malloc_r>
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	b140      	cbz	r0, 8005b90 <__sfmoreglue+0x28>
 8005b7e:	2100      	movs	r1, #0
 8005b80:	e9c0 1600 	strd	r1, r6, [r0]
 8005b84:	300c      	adds	r0, #12
 8005b86:	60a0      	str	r0, [r4, #8]
 8005b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b8c:	f7fe fa12 	bl	8003fb4 <memset>
 8005b90:	4620      	mov	r0, r4
 8005b92:	bd70      	pop	{r4, r5, r6, pc}

08005b94 <__sfp_lock_acquire>:
 8005b94:	4801      	ldr	r0, [pc, #4]	; (8005b9c <__sfp_lock_acquire+0x8>)
 8005b96:	f000 b8b8 	b.w	8005d0a <__retarget_lock_acquire_recursive>
 8005b9a:	bf00      	nop
 8005b9c:	20000348 	.word	0x20000348

08005ba0 <__sfp_lock_release>:
 8005ba0:	4801      	ldr	r0, [pc, #4]	; (8005ba8 <__sfp_lock_release+0x8>)
 8005ba2:	f000 b8b3 	b.w	8005d0c <__retarget_lock_release_recursive>
 8005ba6:	bf00      	nop
 8005ba8:	20000348 	.word	0x20000348

08005bac <__sinit_lock_acquire>:
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <__sinit_lock_acquire+0x8>)
 8005bae:	f000 b8ac 	b.w	8005d0a <__retarget_lock_acquire_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	20000343 	.word	0x20000343

08005bb8 <__sinit_lock_release>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__sinit_lock_release+0x8>)
 8005bba:	f000 b8a7 	b.w	8005d0c <__retarget_lock_release_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	20000343 	.word	0x20000343

08005bc4 <__sinit>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	f7ff fff0 	bl	8005bac <__sinit_lock_acquire>
 8005bcc:	69a3      	ldr	r3, [r4, #24]
 8005bce:	b11b      	cbz	r3, 8005bd8 <__sinit+0x14>
 8005bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd4:	f7ff bff0 	b.w	8005bb8 <__sinit_lock_release>
 8005bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <__sinit+0x68>)
 8005be0:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <__sinit+0x6c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005be6:	42a3      	cmp	r3, r4
 8005be8:	bf04      	itt	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	61a3      	streq	r3, [r4, #24]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f000 f820 	bl	8005c34 <__sfp>
 8005bf4:	6060      	str	r0, [r4, #4]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 f81c 	bl	8005c34 <__sfp>
 8005bfc:	60a0      	str	r0, [r4, #8]
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 f818 	bl	8005c34 <__sfp>
 8005c04:	2200      	movs	r2, #0
 8005c06:	60e0      	str	r0, [r4, #12]
 8005c08:	2104      	movs	r1, #4
 8005c0a:	6860      	ldr	r0, [r4, #4]
 8005c0c:	f7ff ff82 	bl	8005b14 <std>
 8005c10:	68a0      	ldr	r0, [r4, #8]
 8005c12:	2201      	movs	r2, #1
 8005c14:	2109      	movs	r1, #9
 8005c16:	f7ff ff7d 	bl	8005b14 <std>
 8005c1a:	68e0      	ldr	r0, [r4, #12]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	2112      	movs	r1, #18
 8005c20:	f7ff ff78 	bl	8005b14 <std>
 8005c24:	2301      	movs	r3, #1
 8005c26:	61a3      	str	r3, [r4, #24]
 8005c28:	e7d2      	b.n	8005bd0 <__sinit+0xc>
 8005c2a:	bf00      	nop
 8005c2c:	08006c58 	.word	0x08006c58
 8005c30:	08005b5d 	.word	0x08005b5d

08005c34 <__sfp>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	4607      	mov	r7, r0
 8005c38:	f7ff ffac 	bl	8005b94 <__sfp_lock_acquire>
 8005c3c:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <__sfp+0x84>)
 8005c3e:	681e      	ldr	r6, [r3, #0]
 8005c40:	69b3      	ldr	r3, [r6, #24]
 8005c42:	b913      	cbnz	r3, 8005c4a <__sfp+0x16>
 8005c44:	4630      	mov	r0, r6
 8005c46:	f7ff ffbd 	bl	8005bc4 <__sinit>
 8005c4a:	3648      	adds	r6, #72	; 0x48
 8005c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	d503      	bpl.n	8005c5c <__sfp+0x28>
 8005c54:	6833      	ldr	r3, [r6, #0]
 8005c56:	b30b      	cbz	r3, 8005c9c <__sfp+0x68>
 8005c58:	6836      	ldr	r6, [r6, #0]
 8005c5a:	e7f7      	b.n	8005c4c <__sfp+0x18>
 8005c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c60:	b9d5      	cbnz	r5, 8005c98 <__sfp+0x64>
 8005c62:	4b16      	ldr	r3, [pc, #88]	; (8005cbc <__sfp+0x88>)
 8005c64:	60e3      	str	r3, [r4, #12]
 8005c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005c6c:	f000 f84c 	bl	8005d08 <__retarget_lock_init_recursive>
 8005c70:	f7ff ff96 	bl	8005ba0 <__sfp_lock_release>
 8005c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c7c:	6025      	str	r5, [r4, #0]
 8005c7e:	61a5      	str	r5, [r4, #24]
 8005c80:	2208      	movs	r2, #8
 8005c82:	4629      	mov	r1, r5
 8005c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c88:	f7fe f994 	bl	8003fb4 <memset>
 8005c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c94:	4620      	mov	r0, r4
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c98:	3468      	adds	r4, #104	; 0x68
 8005c9a:	e7d9      	b.n	8005c50 <__sfp+0x1c>
 8005c9c:	2104      	movs	r1, #4
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	f7ff ff62 	bl	8005b68 <__sfmoreglue>
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	6030      	str	r0, [r6, #0]
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d1d5      	bne.n	8005c58 <__sfp+0x24>
 8005cac:	f7ff ff78 	bl	8005ba0 <__sfp_lock_release>
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	e7ee      	b.n	8005c94 <__sfp+0x60>
 8005cb6:	bf00      	nop
 8005cb8:	08006c58 	.word	0x08006c58
 8005cbc:	ffff0001 	.word	0xffff0001

08005cc0 <_fwalk_reent>:
 8005cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	4688      	mov	r8, r1
 8005cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ccc:	2700      	movs	r7, #0
 8005cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8005cd6:	d505      	bpl.n	8005ce4 <_fwalk_reent+0x24>
 8005cd8:	6824      	ldr	r4, [r4, #0]
 8005cda:	2c00      	cmp	r4, #0
 8005cdc:	d1f7      	bne.n	8005cce <_fwalk_reent+0xe>
 8005cde:	4638      	mov	r0, r7
 8005ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce4:	89ab      	ldrh	r3, [r5, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d907      	bls.n	8005cfa <_fwalk_reent+0x3a>
 8005cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	d003      	beq.n	8005cfa <_fwalk_reent+0x3a>
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	47c0      	blx	r8
 8005cf8:	4307      	orrs	r7, r0
 8005cfa:	3568      	adds	r5, #104	; 0x68
 8005cfc:	e7e9      	b.n	8005cd2 <_fwalk_reent+0x12>
	...

08005d00 <_localeconv_r>:
 8005d00:	4800      	ldr	r0, [pc, #0]	; (8005d04 <_localeconv_r+0x4>)
 8005d02:	4770      	bx	lr
 8005d04:	20000160 	.word	0x20000160

08005d08 <__retarget_lock_init_recursive>:
 8005d08:	4770      	bx	lr

08005d0a <__retarget_lock_acquire_recursive>:
 8005d0a:	4770      	bx	lr

08005d0c <__retarget_lock_release_recursive>:
 8005d0c:	4770      	bx	lr

08005d0e <__swhatbuf_r>:
 8005d0e:	b570      	push	{r4, r5, r6, lr}
 8005d10:	460e      	mov	r6, r1
 8005d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d16:	2900      	cmp	r1, #0
 8005d18:	b096      	sub	sp, #88	; 0x58
 8005d1a:	4614      	mov	r4, r2
 8005d1c:	461d      	mov	r5, r3
 8005d1e:	da07      	bge.n	8005d30 <__swhatbuf_r+0x22>
 8005d20:	2300      	movs	r3, #0
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	89b3      	ldrh	r3, [r6, #12]
 8005d26:	061a      	lsls	r2, r3, #24
 8005d28:	d410      	bmi.n	8005d4c <__swhatbuf_r+0x3e>
 8005d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d2e:	e00e      	b.n	8005d4e <__swhatbuf_r+0x40>
 8005d30:	466a      	mov	r2, sp
 8005d32:	f000 fd45 	bl	80067c0 <_fstat_r>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	dbf2      	blt.n	8005d20 <__swhatbuf_r+0x12>
 8005d3a:	9a01      	ldr	r2, [sp, #4]
 8005d3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d44:	425a      	negs	r2, r3
 8005d46:	415a      	adcs	r2, r3
 8005d48:	602a      	str	r2, [r5, #0]
 8005d4a:	e7ee      	b.n	8005d2a <__swhatbuf_r+0x1c>
 8005d4c:	2340      	movs	r3, #64	; 0x40
 8005d4e:	2000      	movs	r0, #0
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	b016      	add	sp, #88	; 0x58
 8005d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d58 <__smakebuf_r>:
 8005d58:	898b      	ldrh	r3, [r1, #12]
 8005d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d5c:	079d      	lsls	r5, r3, #30
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	d507      	bpl.n	8005d74 <__smakebuf_r+0x1c>
 8005d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	6123      	str	r3, [r4, #16]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	6163      	str	r3, [r4, #20]
 8005d70:	b002      	add	sp, #8
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	ab01      	add	r3, sp, #4
 8005d76:	466a      	mov	r2, sp
 8005d78:	f7ff ffc9 	bl	8005d0e <__swhatbuf_r>
 8005d7c:	9900      	ldr	r1, [sp, #0]
 8005d7e:	4605      	mov	r5, r0
 8005d80:	4630      	mov	r0, r6
 8005d82:	f000 fc1d 	bl	80065c0 <_malloc_r>
 8005d86:	b948      	cbnz	r0, 8005d9c <__smakebuf_r+0x44>
 8005d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8c:	059a      	lsls	r2, r3, #22
 8005d8e:	d4ef      	bmi.n	8005d70 <__smakebuf_r+0x18>
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	81a3      	strh	r3, [r4, #12]
 8005d9a:	e7e3      	b.n	8005d64 <__smakebuf_r+0xc>
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <__smakebuf_r+0x7c>)
 8005d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	6020      	str	r0, [r4, #0]
 8005da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	9b00      	ldr	r3, [sp, #0]
 8005dac:	6163      	str	r3, [r4, #20]
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	6120      	str	r0, [r4, #16]
 8005db2:	b15b      	cbz	r3, 8005dcc <__smakebuf_r+0x74>
 8005db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db8:	4630      	mov	r0, r6
 8005dba:	f000 fd13 	bl	80067e4 <_isatty_r>
 8005dbe:	b128      	cbz	r0, 8005dcc <__smakebuf_r+0x74>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f023 0303 	bic.w	r3, r3, #3
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	89a0      	ldrh	r0, [r4, #12]
 8005dce:	4305      	orrs	r5, r0
 8005dd0:	81a5      	strh	r5, [r4, #12]
 8005dd2:	e7cd      	b.n	8005d70 <__smakebuf_r+0x18>
 8005dd4:	08005b5d 	.word	0x08005b5d

08005dd8 <malloc>:
 8005dd8:	4b02      	ldr	r3, [pc, #8]	; (8005de4 <malloc+0xc>)
 8005dda:	4601      	mov	r1, r0
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	f000 bbef 	b.w	80065c0 <_malloc_r>
 8005de2:	bf00      	nop
 8005de4:	2000000c 	.word	0x2000000c

08005de8 <memcpy>:
 8005de8:	440a      	add	r2, r1
 8005dea:	4291      	cmp	r1, r2
 8005dec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005df0:	d100      	bne.n	8005df4 <memcpy+0xc>
 8005df2:	4770      	bx	lr
 8005df4:	b510      	push	{r4, lr}
 8005df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	d1f9      	bne.n	8005df6 <memcpy+0xe>
 8005e02:	bd10      	pop	{r4, pc}

08005e04 <_Balloc>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e08:	4604      	mov	r4, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	b976      	cbnz	r6, 8005e2c <_Balloc+0x28>
 8005e0e:	2010      	movs	r0, #16
 8005e10:	f7ff ffe2 	bl	8005dd8 <malloc>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6260      	str	r0, [r4, #36]	; 0x24
 8005e18:	b920      	cbnz	r0, 8005e24 <_Balloc+0x20>
 8005e1a:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <_Balloc+0x78>)
 8005e1c:	4818      	ldr	r0, [pc, #96]	; (8005e80 <_Balloc+0x7c>)
 8005e1e:	2166      	movs	r1, #102	; 0x66
 8005e20:	f000 fc8e 	bl	8006740 <__assert_func>
 8005e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e28:	6006      	str	r6, [r0, #0]
 8005e2a:	60c6      	str	r6, [r0, #12]
 8005e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e2e:	68f3      	ldr	r3, [r6, #12]
 8005e30:	b183      	cbz	r3, 8005e54 <_Balloc+0x50>
 8005e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e3a:	b9b8      	cbnz	r0, 8005e6c <_Balloc+0x68>
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8005e42:	1d72      	adds	r2, r6, #5
 8005e44:	0092      	lsls	r2, r2, #2
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 fb5a 	bl	8006500 <_calloc_r>
 8005e4c:	b160      	cbz	r0, 8005e68 <_Balloc+0x64>
 8005e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e52:	e00e      	b.n	8005e72 <_Balloc+0x6e>
 8005e54:	2221      	movs	r2, #33	; 0x21
 8005e56:	2104      	movs	r1, #4
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 fb51 	bl	8006500 <_calloc_r>
 8005e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e60:	60f0      	str	r0, [r6, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e4      	bne.n	8005e32 <_Balloc+0x2e>
 8005e68:	2000      	movs	r0, #0
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	6802      	ldr	r2, [r0, #0]
 8005e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e72:	2300      	movs	r3, #0
 8005e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e78:	e7f7      	b.n	8005e6a <_Balloc+0x66>
 8005e7a:	bf00      	nop
 8005e7c:	08006c9d 	.word	0x08006c9d
 8005e80:	08006d84 	.word	0x08006d84

08005e84 <_Bfree>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e88:	4605      	mov	r5, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	b976      	cbnz	r6, 8005eac <_Bfree+0x28>
 8005e8e:	2010      	movs	r0, #16
 8005e90:	f7ff ffa2 	bl	8005dd8 <malloc>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6268      	str	r0, [r5, #36]	; 0x24
 8005e98:	b920      	cbnz	r0, 8005ea4 <_Bfree+0x20>
 8005e9a:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <_Bfree+0x3c>)
 8005e9c:	4809      	ldr	r0, [pc, #36]	; (8005ec4 <_Bfree+0x40>)
 8005e9e:	218a      	movs	r1, #138	; 0x8a
 8005ea0:	f000 fc4e 	bl	8006740 <__assert_func>
 8005ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ea8:	6006      	str	r6, [r0, #0]
 8005eaa:	60c6      	str	r6, [r0, #12]
 8005eac:	b13c      	cbz	r4, 8005ebe <_Bfree+0x3a>
 8005eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005eb0:	6862      	ldr	r2, [r4, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eb8:	6021      	str	r1, [r4, #0]
 8005eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	08006c9d 	.word	0x08006c9d
 8005ec4:	08006d84 	.word	0x08006d84

08005ec8 <__multadd>:
 8005ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ecc:	690e      	ldr	r6, [r1, #16]
 8005ece:	4607      	mov	r7, r0
 8005ed0:	4698      	mov	r8, r3
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	f101 0014 	add.w	r0, r1, #20
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6805      	ldr	r5, [r0, #0]
 8005edc:	b2a9      	uxth	r1, r5
 8005ede:	fb02 8101 	mla	r1, r2, r1, r8
 8005ee2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005ee6:	0c2d      	lsrs	r5, r5, #16
 8005ee8:	fb02 c505 	mla	r5, r2, r5, ip
 8005eec:	b289      	uxth	r1, r1
 8005eee:	3301      	adds	r3, #1
 8005ef0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005ef4:	429e      	cmp	r6, r3
 8005ef6:	f840 1b04 	str.w	r1, [r0], #4
 8005efa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005efe:	dcec      	bgt.n	8005eda <__multadd+0x12>
 8005f00:	f1b8 0f00 	cmp.w	r8, #0
 8005f04:	d022      	beq.n	8005f4c <__multadd+0x84>
 8005f06:	68a3      	ldr	r3, [r4, #8]
 8005f08:	42b3      	cmp	r3, r6
 8005f0a:	dc19      	bgt.n	8005f40 <__multadd+0x78>
 8005f0c:	6861      	ldr	r1, [r4, #4]
 8005f0e:	4638      	mov	r0, r7
 8005f10:	3101      	adds	r1, #1
 8005f12:	f7ff ff77 	bl	8005e04 <_Balloc>
 8005f16:	4605      	mov	r5, r0
 8005f18:	b928      	cbnz	r0, 8005f26 <__multadd+0x5e>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <__multadd+0x8c>)
 8005f1e:	480e      	ldr	r0, [pc, #56]	; (8005f58 <__multadd+0x90>)
 8005f20:	21b5      	movs	r1, #181	; 0xb5
 8005f22:	f000 fc0d 	bl	8006740 <__assert_func>
 8005f26:	6922      	ldr	r2, [r4, #16]
 8005f28:	3202      	adds	r2, #2
 8005f2a:	f104 010c 	add.w	r1, r4, #12
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	300c      	adds	r0, #12
 8005f32:	f7ff ff59 	bl	8005de8 <memcpy>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f7ff ffa3 	bl	8005e84 <_Bfree>
 8005f3e:	462c      	mov	r4, r5
 8005f40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005f44:	3601      	adds	r6, #1
 8005f46:	f8c3 8014 	str.w	r8, [r3, #20]
 8005f4a:	6126      	str	r6, [r4, #16]
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f52:	bf00      	nop
 8005f54:	08006d13 	.word	0x08006d13
 8005f58:	08006d84 	.word	0x08006d84

08005f5c <__hi0bits>:
 8005f5c:	0c03      	lsrs	r3, r0, #16
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	b9d3      	cbnz	r3, 8005f98 <__hi0bits+0x3c>
 8005f62:	0400      	lsls	r0, r0, #16
 8005f64:	2310      	movs	r3, #16
 8005f66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005f6a:	bf04      	itt	eq
 8005f6c:	0200      	lsleq	r0, r0, #8
 8005f6e:	3308      	addeq	r3, #8
 8005f70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005f74:	bf04      	itt	eq
 8005f76:	0100      	lsleq	r0, r0, #4
 8005f78:	3304      	addeq	r3, #4
 8005f7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005f7e:	bf04      	itt	eq
 8005f80:	0080      	lsleq	r0, r0, #2
 8005f82:	3302      	addeq	r3, #2
 8005f84:	2800      	cmp	r0, #0
 8005f86:	db05      	blt.n	8005f94 <__hi0bits+0x38>
 8005f88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f8c:	f103 0301 	add.w	r3, r3, #1
 8005f90:	bf08      	it	eq
 8005f92:	2320      	moveq	r3, #32
 8005f94:	4618      	mov	r0, r3
 8005f96:	4770      	bx	lr
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e7e4      	b.n	8005f66 <__hi0bits+0xa>

08005f9c <__lo0bits>:
 8005f9c:	6803      	ldr	r3, [r0, #0]
 8005f9e:	f013 0207 	ands.w	r2, r3, #7
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	d00b      	beq.n	8005fbe <__lo0bits+0x22>
 8005fa6:	07da      	lsls	r2, r3, #31
 8005fa8:	d424      	bmi.n	8005ff4 <__lo0bits+0x58>
 8005faa:	0798      	lsls	r0, r3, #30
 8005fac:	bf49      	itett	mi
 8005fae:	085b      	lsrmi	r3, r3, #1
 8005fb0:	089b      	lsrpl	r3, r3, #2
 8005fb2:	2001      	movmi	r0, #1
 8005fb4:	600b      	strmi	r3, [r1, #0]
 8005fb6:	bf5c      	itt	pl
 8005fb8:	600b      	strpl	r3, [r1, #0]
 8005fba:	2002      	movpl	r0, #2
 8005fbc:	4770      	bx	lr
 8005fbe:	b298      	uxth	r0, r3
 8005fc0:	b9b0      	cbnz	r0, 8005ff0 <__lo0bits+0x54>
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	2010      	movs	r0, #16
 8005fc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005fca:	bf04      	itt	eq
 8005fcc:	0a1b      	lsreq	r3, r3, #8
 8005fce:	3008      	addeq	r0, #8
 8005fd0:	071a      	lsls	r2, r3, #28
 8005fd2:	bf04      	itt	eq
 8005fd4:	091b      	lsreq	r3, r3, #4
 8005fd6:	3004      	addeq	r0, #4
 8005fd8:	079a      	lsls	r2, r3, #30
 8005fda:	bf04      	itt	eq
 8005fdc:	089b      	lsreq	r3, r3, #2
 8005fde:	3002      	addeq	r0, #2
 8005fe0:	07da      	lsls	r2, r3, #31
 8005fe2:	d403      	bmi.n	8005fec <__lo0bits+0x50>
 8005fe4:	085b      	lsrs	r3, r3, #1
 8005fe6:	f100 0001 	add.w	r0, r0, #1
 8005fea:	d005      	beq.n	8005ff8 <__lo0bits+0x5c>
 8005fec:	600b      	str	r3, [r1, #0]
 8005fee:	4770      	bx	lr
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	e7e8      	b.n	8005fc6 <__lo0bits+0x2a>
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	4770      	bx	lr
 8005ff8:	2020      	movs	r0, #32
 8005ffa:	4770      	bx	lr

08005ffc <__i2b>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	460c      	mov	r4, r1
 8006000:	2101      	movs	r1, #1
 8006002:	f7ff feff 	bl	8005e04 <_Balloc>
 8006006:	4602      	mov	r2, r0
 8006008:	b928      	cbnz	r0, 8006016 <__i2b+0x1a>
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <__i2b+0x24>)
 800600c:	4805      	ldr	r0, [pc, #20]	; (8006024 <__i2b+0x28>)
 800600e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006012:	f000 fb95 	bl	8006740 <__assert_func>
 8006016:	2301      	movs	r3, #1
 8006018:	6144      	str	r4, [r0, #20]
 800601a:	6103      	str	r3, [r0, #16]
 800601c:	bd10      	pop	{r4, pc}
 800601e:	bf00      	nop
 8006020:	08006d13 	.word	0x08006d13
 8006024:	08006d84 	.word	0x08006d84

08006028 <__multiply>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	4614      	mov	r4, r2
 800602e:	690a      	ldr	r2, [r1, #16]
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	429a      	cmp	r2, r3
 8006034:	bfb8      	it	lt
 8006036:	460b      	movlt	r3, r1
 8006038:	460d      	mov	r5, r1
 800603a:	bfbc      	itt	lt
 800603c:	4625      	movlt	r5, r4
 800603e:	461c      	movlt	r4, r3
 8006040:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006044:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006048:	68ab      	ldr	r3, [r5, #8]
 800604a:	6869      	ldr	r1, [r5, #4]
 800604c:	eb0a 0709 	add.w	r7, sl, r9
 8006050:	42bb      	cmp	r3, r7
 8006052:	b085      	sub	sp, #20
 8006054:	bfb8      	it	lt
 8006056:	3101      	addlt	r1, #1
 8006058:	f7ff fed4 	bl	8005e04 <_Balloc>
 800605c:	b930      	cbnz	r0, 800606c <__multiply+0x44>
 800605e:	4602      	mov	r2, r0
 8006060:	4b42      	ldr	r3, [pc, #264]	; (800616c <__multiply+0x144>)
 8006062:	4843      	ldr	r0, [pc, #268]	; (8006170 <__multiply+0x148>)
 8006064:	f240 115d 	movw	r1, #349	; 0x15d
 8006068:	f000 fb6a 	bl	8006740 <__assert_func>
 800606c:	f100 0614 	add.w	r6, r0, #20
 8006070:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006074:	4633      	mov	r3, r6
 8006076:	2200      	movs	r2, #0
 8006078:	4543      	cmp	r3, r8
 800607a:	d31e      	bcc.n	80060ba <__multiply+0x92>
 800607c:	f105 0c14 	add.w	ip, r5, #20
 8006080:	f104 0314 	add.w	r3, r4, #20
 8006084:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006088:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800608c:	9202      	str	r2, [sp, #8]
 800608e:	ebac 0205 	sub.w	r2, ip, r5
 8006092:	3a15      	subs	r2, #21
 8006094:	f022 0203 	bic.w	r2, r2, #3
 8006098:	3204      	adds	r2, #4
 800609a:	f105 0115 	add.w	r1, r5, #21
 800609e:	458c      	cmp	ip, r1
 80060a0:	bf38      	it	cc
 80060a2:	2204      	movcc	r2, #4
 80060a4:	9201      	str	r2, [sp, #4]
 80060a6:	9a02      	ldr	r2, [sp, #8]
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d808      	bhi.n	80060c0 <__multiply+0x98>
 80060ae:	2f00      	cmp	r7, #0
 80060b0:	dc55      	bgt.n	800615e <__multiply+0x136>
 80060b2:	6107      	str	r7, [r0, #16]
 80060b4:	b005      	add	sp, #20
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	f843 2b04 	str.w	r2, [r3], #4
 80060be:	e7db      	b.n	8006078 <__multiply+0x50>
 80060c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80060c4:	f1ba 0f00 	cmp.w	sl, #0
 80060c8:	d020      	beq.n	800610c <__multiply+0xe4>
 80060ca:	f105 0e14 	add.w	lr, r5, #20
 80060ce:	46b1      	mov	r9, r6
 80060d0:	2200      	movs	r2, #0
 80060d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80060d6:	f8d9 b000 	ldr.w	fp, [r9]
 80060da:	b2a1      	uxth	r1, r4
 80060dc:	fa1f fb8b 	uxth.w	fp, fp
 80060e0:	fb0a b101 	mla	r1, sl, r1, fp
 80060e4:	4411      	add	r1, r2
 80060e6:	f8d9 2000 	ldr.w	r2, [r9]
 80060ea:	0c24      	lsrs	r4, r4, #16
 80060ec:	0c12      	lsrs	r2, r2, #16
 80060ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80060f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80060f6:	b289      	uxth	r1, r1
 80060f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060fc:	45f4      	cmp	ip, lr
 80060fe:	f849 1b04 	str.w	r1, [r9], #4
 8006102:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006106:	d8e4      	bhi.n	80060d2 <__multiply+0xaa>
 8006108:	9901      	ldr	r1, [sp, #4]
 800610a:	5072      	str	r2, [r6, r1]
 800610c:	9a03      	ldr	r2, [sp, #12]
 800610e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006112:	3304      	adds	r3, #4
 8006114:	f1b9 0f00 	cmp.w	r9, #0
 8006118:	d01f      	beq.n	800615a <__multiply+0x132>
 800611a:	6834      	ldr	r4, [r6, #0]
 800611c:	f105 0114 	add.w	r1, r5, #20
 8006120:	46b6      	mov	lr, r6
 8006122:	f04f 0a00 	mov.w	sl, #0
 8006126:	880a      	ldrh	r2, [r1, #0]
 8006128:	f8be b002 	ldrh.w	fp, [lr, #2]
 800612c:	fb09 b202 	mla	r2, r9, r2, fp
 8006130:	4492      	add	sl, r2
 8006132:	b2a4      	uxth	r4, r4
 8006134:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006138:	f84e 4b04 	str.w	r4, [lr], #4
 800613c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006140:	f8be 2000 	ldrh.w	r2, [lr]
 8006144:	0c24      	lsrs	r4, r4, #16
 8006146:	fb09 2404 	mla	r4, r9, r4, r2
 800614a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800614e:	458c      	cmp	ip, r1
 8006150:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006154:	d8e7      	bhi.n	8006126 <__multiply+0xfe>
 8006156:	9a01      	ldr	r2, [sp, #4]
 8006158:	50b4      	str	r4, [r6, r2]
 800615a:	3604      	adds	r6, #4
 800615c:	e7a3      	b.n	80060a6 <__multiply+0x7e>
 800615e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1a5      	bne.n	80060b2 <__multiply+0x8a>
 8006166:	3f01      	subs	r7, #1
 8006168:	e7a1      	b.n	80060ae <__multiply+0x86>
 800616a:	bf00      	nop
 800616c:	08006d13 	.word	0x08006d13
 8006170:	08006d84 	.word	0x08006d84

08006174 <__pow5mult>:
 8006174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006178:	4615      	mov	r5, r2
 800617a:	f012 0203 	ands.w	r2, r2, #3
 800617e:	4606      	mov	r6, r0
 8006180:	460f      	mov	r7, r1
 8006182:	d007      	beq.n	8006194 <__pow5mult+0x20>
 8006184:	4c25      	ldr	r4, [pc, #148]	; (800621c <__pow5mult+0xa8>)
 8006186:	3a01      	subs	r2, #1
 8006188:	2300      	movs	r3, #0
 800618a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800618e:	f7ff fe9b 	bl	8005ec8 <__multadd>
 8006192:	4607      	mov	r7, r0
 8006194:	10ad      	asrs	r5, r5, #2
 8006196:	d03d      	beq.n	8006214 <__pow5mult+0xa0>
 8006198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800619a:	b97c      	cbnz	r4, 80061bc <__pow5mult+0x48>
 800619c:	2010      	movs	r0, #16
 800619e:	f7ff fe1b 	bl	8005dd8 <malloc>
 80061a2:	4602      	mov	r2, r0
 80061a4:	6270      	str	r0, [r6, #36]	; 0x24
 80061a6:	b928      	cbnz	r0, 80061b4 <__pow5mult+0x40>
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <__pow5mult+0xac>)
 80061aa:	481e      	ldr	r0, [pc, #120]	; (8006224 <__pow5mult+0xb0>)
 80061ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80061b0:	f000 fac6 	bl	8006740 <__assert_func>
 80061b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061b8:	6004      	str	r4, [r0, #0]
 80061ba:	60c4      	str	r4, [r0, #12]
 80061bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80061c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061c4:	b94c      	cbnz	r4, 80061da <__pow5mult+0x66>
 80061c6:	f240 2171 	movw	r1, #625	; 0x271
 80061ca:	4630      	mov	r0, r6
 80061cc:	f7ff ff16 	bl	8005ffc <__i2b>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80061d6:	4604      	mov	r4, r0
 80061d8:	6003      	str	r3, [r0, #0]
 80061da:	f04f 0900 	mov.w	r9, #0
 80061de:	07eb      	lsls	r3, r5, #31
 80061e0:	d50a      	bpl.n	80061f8 <__pow5mult+0x84>
 80061e2:	4639      	mov	r1, r7
 80061e4:	4622      	mov	r2, r4
 80061e6:	4630      	mov	r0, r6
 80061e8:	f7ff ff1e 	bl	8006028 <__multiply>
 80061ec:	4639      	mov	r1, r7
 80061ee:	4680      	mov	r8, r0
 80061f0:	4630      	mov	r0, r6
 80061f2:	f7ff fe47 	bl	8005e84 <_Bfree>
 80061f6:	4647      	mov	r7, r8
 80061f8:	106d      	asrs	r5, r5, #1
 80061fa:	d00b      	beq.n	8006214 <__pow5mult+0xa0>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	b938      	cbnz	r0, 8006210 <__pow5mult+0x9c>
 8006200:	4622      	mov	r2, r4
 8006202:	4621      	mov	r1, r4
 8006204:	4630      	mov	r0, r6
 8006206:	f7ff ff0f 	bl	8006028 <__multiply>
 800620a:	6020      	str	r0, [r4, #0]
 800620c:	f8c0 9000 	str.w	r9, [r0]
 8006210:	4604      	mov	r4, r0
 8006212:	e7e4      	b.n	80061de <__pow5mult+0x6a>
 8006214:	4638      	mov	r0, r7
 8006216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800621a:	bf00      	nop
 800621c:	08006ed8 	.word	0x08006ed8
 8006220:	08006c9d 	.word	0x08006c9d
 8006224:	08006d84 	.word	0x08006d84

08006228 <__lshift>:
 8006228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	460c      	mov	r4, r1
 800622e:	6849      	ldr	r1, [r1, #4]
 8006230:	6923      	ldr	r3, [r4, #16]
 8006232:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006236:	68a3      	ldr	r3, [r4, #8]
 8006238:	4607      	mov	r7, r0
 800623a:	4691      	mov	r9, r2
 800623c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006240:	f108 0601 	add.w	r6, r8, #1
 8006244:	42b3      	cmp	r3, r6
 8006246:	db0b      	blt.n	8006260 <__lshift+0x38>
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff fddb 	bl	8005e04 <_Balloc>
 800624e:	4605      	mov	r5, r0
 8006250:	b948      	cbnz	r0, 8006266 <__lshift+0x3e>
 8006252:	4602      	mov	r2, r0
 8006254:	4b28      	ldr	r3, [pc, #160]	; (80062f8 <__lshift+0xd0>)
 8006256:	4829      	ldr	r0, [pc, #164]	; (80062fc <__lshift+0xd4>)
 8006258:	f240 11d9 	movw	r1, #473	; 0x1d9
 800625c:	f000 fa70 	bl	8006740 <__assert_func>
 8006260:	3101      	adds	r1, #1
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	e7ee      	b.n	8006244 <__lshift+0x1c>
 8006266:	2300      	movs	r3, #0
 8006268:	f100 0114 	add.w	r1, r0, #20
 800626c:	f100 0210 	add.w	r2, r0, #16
 8006270:	4618      	mov	r0, r3
 8006272:	4553      	cmp	r3, sl
 8006274:	db33      	blt.n	80062de <__lshift+0xb6>
 8006276:	6920      	ldr	r0, [r4, #16]
 8006278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800627c:	f104 0314 	add.w	r3, r4, #20
 8006280:	f019 091f 	ands.w	r9, r9, #31
 8006284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800628c:	d02b      	beq.n	80062e6 <__lshift+0xbe>
 800628e:	f1c9 0e20 	rsb	lr, r9, #32
 8006292:	468a      	mov	sl, r1
 8006294:	2200      	movs	r2, #0
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	fa00 f009 	lsl.w	r0, r0, r9
 800629c:	4302      	orrs	r2, r0
 800629e:	f84a 2b04 	str.w	r2, [sl], #4
 80062a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a6:	459c      	cmp	ip, r3
 80062a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80062ac:	d8f3      	bhi.n	8006296 <__lshift+0x6e>
 80062ae:	ebac 0304 	sub.w	r3, ip, r4
 80062b2:	3b15      	subs	r3, #21
 80062b4:	f023 0303 	bic.w	r3, r3, #3
 80062b8:	3304      	adds	r3, #4
 80062ba:	f104 0015 	add.w	r0, r4, #21
 80062be:	4584      	cmp	ip, r0
 80062c0:	bf38      	it	cc
 80062c2:	2304      	movcc	r3, #4
 80062c4:	50ca      	str	r2, [r1, r3]
 80062c6:	b10a      	cbz	r2, 80062cc <__lshift+0xa4>
 80062c8:	f108 0602 	add.w	r6, r8, #2
 80062cc:	3e01      	subs	r6, #1
 80062ce:	4638      	mov	r0, r7
 80062d0:	612e      	str	r6, [r5, #16]
 80062d2:	4621      	mov	r1, r4
 80062d4:	f7ff fdd6 	bl	8005e84 <_Bfree>
 80062d8:	4628      	mov	r0, r5
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062de:	f842 0f04 	str.w	r0, [r2, #4]!
 80062e2:	3301      	adds	r3, #1
 80062e4:	e7c5      	b.n	8006272 <__lshift+0x4a>
 80062e6:	3904      	subs	r1, #4
 80062e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80062f0:	459c      	cmp	ip, r3
 80062f2:	d8f9      	bhi.n	80062e8 <__lshift+0xc0>
 80062f4:	e7ea      	b.n	80062cc <__lshift+0xa4>
 80062f6:	bf00      	nop
 80062f8:	08006d13 	.word	0x08006d13
 80062fc:	08006d84 	.word	0x08006d84

08006300 <__mcmp>:
 8006300:	b530      	push	{r4, r5, lr}
 8006302:	6902      	ldr	r2, [r0, #16]
 8006304:	690c      	ldr	r4, [r1, #16]
 8006306:	1b12      	subs	r2, r2, r4
 8006308:	d10e      	bne.n	8006328 <__mcmp+0x28>
 800630a:	f100 0314 	add.w	r3, r0, #20
 800630e:	3114      	adds	r1, #20
 8006310:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006314:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006318:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800631c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006320:	42a5      	cmp	r5, r4
 8006322:	d003      	beq.n	800632c <__mcmp+0x2c>
 8006324:	d305      	bcc.n	8006332 <__mcmp+0x32>
 8006326:	2201      	movs	r2, #1
 8006328:	4610      	mov	r0, r2
 800632a:	bd30      	pop	{r4, r5, pc}
 800632c:	4283      	cmp	r3, r0
 800632e:	d3f3      	bcc.n	8006318 <__mcmp+0x18>
 8006330:	e7fa      	b.n	8006328 <__mcmp+0x28>
 8006332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006336:	e7f7      	b.n	8006328 <__mcmp+0x28>

08006338 <__mdiff>:
 8006338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	460c      	mov	r4, r1
 800633e:	4606      	mov	r6, r0
 8006340:	4611      	mov	r1, r2
 8006342:	4620      	mov	r0, r4
 8006344:	4617      	mov	r7, r2
 8006346:	f7ff ffdb 	bl	8006300 <__mcmp>
 800634a:	1e05      	subs	r5, r0, #0
 800634c:	d110      	bne.n	8006370 <__mdiff+0x38>
 800634e:	4629      	mov	r1, r5
 8006350:	4630      	mov	r0, r6
 8006352:	f7ff fd57 	bl	8005e04 <_Balloc>
 8006356:	b930      	cbnz	r0, 8006366 <__mdiff+0x2e>
 8006358:	4b39      	ldr	r3, [pc, #228]	; (8006440 <__mdiff+0x108>)
 800635a:	4602      	mov	r2, r0
 800635c:	f240 2132 	movw	r1, #562	; 0x232
 8006360:	4838      	ldr	r0, [pc, #224]	; (8006444 <__mdiff+0x10c>)
 8006362:	f000 f9ed 	bl	8006740 <__assert_func>
 8006366:	2301      	movs	r3, #1
 8006368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800636c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	bfa4      	itt	ge
 8006372:	463b      	movge	r3, r7
 8006374:	4627      	movge	r7, r4
 8006376:	4630      	mov	r0, r6
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	bfa6      	itte	ge
 800637c:	461c      	movge	r4, r3
 800637e:	2500      	movge	r5, #0
 8006380:	2501      	movlt	r5, #1
 8006382:	f7ff fd3f 	bl	8005e04 <_Balloc>
 8006386:	b920      	cbnz	r0, 8006392 <__mdiff+0x5a>
 8006388:	4b2d      	ldr	r3, [pc, #180]	; (8006440 <__mdiff+0x108>)
 800638a:	4602      	mov	r2, r0
 800638c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006390:	e7e6      	b.n	8006360 <__mdiff+0x28>
 8006392:	693e      	ldr	r6, [r7, #16]
 8006394:	60c5      	str	r5, [r0, #12]
 8006396:	6925      	ldr	r5, [r4, #16]
 8006398:	f107 0114 	add.w	r1, r7, #20
 800639c:	f104 0914 	add.w	r9, r4, #20
 80063a0:	f100 0e14 	add.w	lr, r0, #20
 80063a4:	f107 0210 	add.w	r2, r7, #16
 80063a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80063ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80063b0:	46f2      	mov	sl, lr
 80063b2:	2700      	movs	r7, #0
 80063b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80063b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80063bc:	fa1f f883 	uxth.w	r8, r3
 80063c0:	fa17 f78b 	uxtah	r7, r7, fp
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	eba7 0808 	sub.w	r8, r7, r8
 80063ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80063ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80063d2:	fa1f f888 	uxth.w	r8, r8
 80063d6:	141f      	asrs	r7, r3, #16
 80063d8:	454d      	cmp	r5, r9
 80063da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80063de:	f84a 3b04 	str.w	r3, [sl], #4
 80063e2:	d8e7      	bhi.n	80063b4 <__mdiff+0x7c>
 80063e4:	1b2b      	subs	r3, r5, r4
 80063e6:	3b15      	subs	r3, #21
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	3304      	adds	r3, #4
 80063ee:	3415      	adds	r4, #21
 80063f0:	42a5      	cmp	r5, r4
 80063f2:	bf38      	it	cc
 80063f4:	2304      	movcc	r3, #4
 80063f6:	4419      	add	r1, r3
 80063f8:	4473      	add	r3, lr
 80063fa:	469e      	mov	lr, r3
 80063fc:	460d      	mov	r5, r1
 80063fe:	4565      	cmp	r5, ip
 8006400:	d30e      	bcc.n	8006420 <__mdiff+0xe8>
 8006402:	f10c 0203 	add.w	r2, ip, #3
 8006406:	1a52      	subs	r2, r2, r1
 8006408:	f022 0203 	bic.w	r2, r2, #3
 800640c:	3903      	subs	r1, #3
 800640e:	458c      	cmp	ip, r1
 8006410:	bf38      	it	cc
 8006412:	2200      	movcc	r2, #0
 8006414:	441a      	add	r2, r3
 8006416:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800641a:	b17b      	cbz	r3, 800643c <__mdiff+0x104>
 800641c:	6106      	str	r6, [r0, #16]
 800641e:	e7a5      	b.n	800636c <__mdiff+0x34>
 8006420:	f855 8b04 	ldr.w	r8, [r5], #4
 8006424:	fa17 f488 	uxtah	r4, r7, r8
 8006428:	1422      	asrs	r2, r4, #16
 800642a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800642e:	b2a4      	uxth	r4, r4
 8006430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006434:	f84e 4b04 	str.w	r4, [lr], #4
 8006438:	1417      	asrs	r7, r2, #16
 800643a:	e7e0      	b.n	80063fe <__mdiff+0xc6>
 800643c:	3e01      	subs	r6, #1
 800643e:	e7ea      	b.n	8006416 <__mdiff+0xde>
 8006440:	08006d13 	.word	0x08006d13
 8006444:	08006d84 	.word	0x08006d84

08006448 <__d2b>:
 8006448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800644c:	4689      	mov	r9, r1
 800644e:	2101      	movs	r1, #1
 8006450:	ec57 6b10 	vmov	r6, r7, d0
 8006454:	4690      	mov	r8, r2
 8006456:	f7ff fcd5 	bl	8005e04 <_Balloc>
 800645a:	4604      	mov	r4, r0
 800645c:	b930      	cbnz	r0, 800646c <__d2b+0x24>
 800645e:	4602      	mov	r2, r0
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <__d2b+0xb0>)
 8006462:	4826      	ldr	r0, [pc, #152]	; (80064fc <__d2b+0xb4>)
 8006464:	f240 310a 	movw	r1, #778	; 0x30a
 8006468:	f000 f96a 	bl	8006740 <__assert_func>
 800646c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006474:	bb35      	cbnz	r5, 80064c4 <__d2b+0x7c>
 8006476:	2e00      	cmp	r6, #0
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	d028      	beq.n	80064ce <__d2b+0x86>
 800647c:	4668      	mov	r0, sp
 800647e:	9600      	str	r6, [sp, #0]
 8006480:	f7ff fd8c 	bl	8005f9c <__lo0bits>
 8006484:	9900      	ldr	r1, [sp, #0]
 8006486:	b300      	cbz	r0, 80064ca <__d2b+0x82>
 8006488:	9a01      	ldr	r2, [sp, #4]
 800648a:	f1c0 0320 	rsb	r3, r0, #32
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	430b      	orrs	r3, r1
 8006494:	40c2      	lsrs	r2, r0
 8006496:	6163      	str	r3, [r4, #20]
 8006498:	9201      	str	r2, [sp, #4]
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	61a3      	str	r3, [r4, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf14      	ite	ne
 80064a2:	2202      	movne	r2, #2
 80064a4:	2201      	moveq	r2, #1
 80064a6:	6122      	str	r2, [r4, #16]
 80064a8:	b1d5      	cbz	r5, 80064e0 <__d2b+0x98>
 80064aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80064ae:	4405      	add	r5, r0
 80064b0:	f8c9 5000 	str.w	r5, [r9]
 80064b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064b8:	f8c8 0000 	str.w	r0, [r8]
 80064bc:	4620      	mov	r0, r4
 80064be:	b003      	add	sp, #12
 80064c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064c8:	e7d5      	b.n	8006476 <__d2b+0x2e>
 80064ca:	6161      	str	r1, [r4, #20]
 80064cc:	e7e5      	b.n	800649a <__d2b+0x52>
 80064ce:	a801      	add	r0, sp, #4
 80064d0:	f7ff fd64 	bl	8005f9c <__lo0bits>
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	6163      	str	r3, [r4, #20]
 80064d8:	2201      	movs	r2, #1
 80064da:	6122      	str	r2, [r4, #16]
 80064dc:	3020      	adds	r0, #32
 80064de:	e7e3      	b.n	80064a8 <__d2b+0x60>
 80064e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064e8:	f8c9 0000 	str.w	r0, [r9]
 80064ec:	6918      	ldr	r0, [r3, #16]
 80064ee:	f7ff fd35 	bl	8005f5c <__hi0bits>
 80064f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80064f6:	e7df      	b.n	80064b8 <__d2b+0x70>
 80064f8:	08006d13 	.word	0x08006d13
 80064fc:	08006d84 	.word	0x08006d84

08006500 <_calloc_r>:
 8006500:	b513      	push	{r0, r1, r4, lr}
 8006502:	434a      	muls	r2, r1
 8006504:	4611      	mov	r1, r2
 8006506:	9201      	str	r2, [sp, #4]
 8006508:	f000 f85a 	bl	80065c0 <_malloc_r>
 800650c:	4604      	mov	r4, r0
 800650e:	b118      	cbz	r0, 8006518 <_calloc_r+0x18>
 8006510:	9a01      	ldr	r2, [sp, #4]
 8006512:	2100      	movs	r1, #0
 8006514:	f7fd fd4e 	bl	8003fb4 <memset>
 8006518:	4620      	mov	r0, r4
 800651a:	b002      	add	sp, #8
 800651c:	bd10      	pop	{r4, pc}
	...

08006520 <_free_r>:
 8006520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006522:	2900      	cmp	r1, #0
 8006524:	d048      	beq.n	80065b8 <_free_r+0x98>
 8006526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800652a:	9001      	str	r0, [sp, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f1a1 0404 	sub.w	r4, r1, #4
 8006532:	bfb8      	it	lt
 8006534:	18e4      	addlt	r4, r4, r3
 8006536:	f000 f989 	bl	800684c <__malloc_lock>
 800653a:	4a20      	ldr	r2, [pc, #128]	; (80065bc <_free_r+0x9c>)
 800653c:	9801      	ldr	r0, [sp, #4]
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	4615      	mov	r5, r2
 8006542:	b933      	cbnz	r3, 8006552 <_free_r+0x32>
 8006544:	6063      	str	r3, [r4, #4]
 8006546:	6014      	str	r4, [r2, #0]
 8006548:	b003      	add	sp, #12
 800654a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800654e:	f000 b983 	b.w	8006858 <__malloc_unlock>
 8006552:	42a3      	cmp	r3, r4
 8006554:	d90b      	bls.n	800656e <_free_r+0x4e>
 8006556:	6821      	ldr	r1, [r4, #0]
 8006558:	1862      	adds	r2, r4, r1
 800655a:	4293      	cmp	r3, r2
 800655c:	bf04      	itt	eq
 800655e:	681a      	ldreq	r2, [r3, #0]
 8006560:	685b      	ldreq	r3, [r3, #4]
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	bf04      	itt	eq
 8006566:	1852      	addeq	r2, r2, r1
 8006568:	6022      	streq	r2, [r4, #0]
 800656a:	602c      	str	r4, [r5, #0]
 800656c:	e7ec      	b.n	8006548 <_free_r+0x28>
 800656e:	461a      	mov	r2, r3
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b10b      	cbz	r3, 8006578 <_free_r+0x58>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d9fa      	bls.n	800656e <_free_r+0x4e>
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	1855      	adds	r5, r2, r1
 800657c:	42a5      	cmp	r5, r4
 800657e:	d10b      	bne.n	8006598 <_free_r+0x78>
 8006580:	6824      	ldr	r4, [r4, #0]
 8006582:	4421      	add	r1, r4
 8006584:	1854      	adds	r4, r2, r1
 8006586:	42a3      	cmp	r3, r4
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	d1dd      	bne.n	8006548 <_free_r+0x28>
 800658c:	681c      	ldr	r4, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	6053      	str	r3, [r2, #4]
 8006592:	4421      	add	r1, r4
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	e7d7      	b.n	8006548 <_free_r+0x28>
 8006598:	d902      	bls.n	80065a0 <_free_r+0x80>
 800659a:	230c      	movs	r3, #12
 800659c:	6003      	str	r3, [r0, #0]
 800659e:	e7d3      	b.n	8006548 <_free_r+0x28>
 80065a0:	6825      	ldr	r5, [r4, #0]
 80065a2:	1961      	adds	r1, r4, r5
 80065a4:	428b      	cmp	r3, r1
 80065a6:	bf04      	itt	eq
 80065a8:	6819      	ldreq	r1, [r3, #0]
 80065aa:	685b      	ldreq	r3, [r3, #4]
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	bf04      	itt	eq
 80065b0:	1949      	addeq	r1, r1, r5
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	6054      	str	r4, [r2, #4]
 80065b6:	e7c7      	b.n	8006548 <_free_r+0x28>
 80065b8:	b003      	add	sp, #12
 80065ba:	bd30      	pop	{r4, r5, pc}
 80065bc:	200001fc 	.word	0x200001fc

080065c0 <_malloc_r>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	1ccd      	adds	r5, r1, #3
 80065c4:	f025 0503 	bic.w	r5, r5, #3
 80065c8:	3508      	adds	r5, #8
 80065ca:	2d0c      	cmp	r5, #12
 80065cc:	bf38      	it	cc
 80065ce:	250c      	movcc	r5, #12
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	4606      	mov	r6, r0
 80065d4:	db01      	blt.n	80065da <_malloc_r+0x1a>
 80065d6:	42a9      	cmp	r1, r5
 80065d8:	d903      	bls.n	80065e2 <_malloc_r+0x22>
 80065da:	230c      	movs	r3, #12
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	2000      	movs	r0, #0
 80065e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e2:	f000 f933 	bl	800684c <__malloc_lock>
 80065e6:	4921      	ldr	r1, [pc, #132]	; (800666c <_malloc_r+0xac>)
 80065e8:	680a      	ldr	r2, [r1, #0]
 80065ea:	4614      	mov	r4, r2
 80065ec:	b99c      	cbnz	r4, 8006616 <_malloc_r+0x56>
 80065ee:	4f20      	ldr	r7, [pc, #128]	; (8006670 <_malloc_r+0xb0>)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	b923      	cbnz	r3, 80065fe <_malloc_r+0x3e>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4630      	mov	r0, r6
 80065f8:	f000 f83c 	bl	8006674 <_sbrk_r>
 80065fc:	6038      	str	r0, [r7, #0]
 80065fe:	4629      	mov	r1, r5
 8006600:	4630      	mov	r0, r6
 8006602:	f000 f837 	bl	8006674 <_sbrk_r>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d123      	bne.n	8006652 <_malloc_r+0x92>
 800660a:	230c      	movs	r3, #12
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	4630      	mov	r0, r6
 8006610:	f000 f922 	bl	8006858 <__malloc_unlock>
 8006614:	e7e3      	b.n	80065de <_malloc_r+0x1e>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	1b5b      	subs	r3, r3, r5
 800661a:	d417      	bmi.n	800664c <_malloc_r+0x8c>
 800661c:	2b0b      	cmp	r3, #11
 800661e:	d903      	bls.n	8006628 <_malloc_r+0x68>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	441c      	add	r4, r3
 8006624:	6025      	str	r5, [r4, #0]
 8006626:	e004      	b.n	8006632 <_malloc_r+0x72>
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	42a2      	cmp	r2, r4
 800662c:	bf0c      	ite	eq
 800662e:	600b      	streq	r3, [r1, #0]
 8006630:	6053      	strne	r3, [r2, #4]
 8006632:	4630      	mov	r0, r6
 8006634:	f000 f910 	bl	8006858 <__malloc_unlock>
 8006638:	f104 000b 	add.w	r0, r4, #11
 800663c:	1d23      	adds	r3, r4, #4
 800663e:	f020 0007 	bic.w	r0, r0, #7
 8006642:	1ac2      	subs	r2, r0, r3
 8006644:	d0cc      	beq.n	80065e0 <_malloc_r+0x20>
 8006646:	1a1b      	subs	r3, r3, r0
 8006648:	50a3      	str	r3, [r4, r2]
 800664a:	e7c9      	b.n	80065e0 <_malloc_r+0x20>
 800664c:	4622      	mov	r2, r4
 800664e:	6864      	ldr	r4, [r4, #4]
 8006650:	e7cc      	b.n	80065ec <_malloc_r+0x2c>
 8006652:	1cc4      	adds	r4, r0, #3
 8006654:	f024 0403 	bic.w	r4, r4, #3
 8006658:	42a0      	cmp	r0, r4
 800665a:	d0e3      	beq.n	8006624 <_malloc_r+0x64>
 800665c:	1a21      	subs	r1, r4, r0
 800665e:	4630      	mov	r0, r6
 8006660:	f000 f808 	bl	8006674 <_sbrk_r>
 8006664:	3001      	adds	r0, #1
 8006666:	d1dd      	bne.n	8006624 <_malloc_r+0x64>
 8006668:	e7cf      	b.n	800660a <_malloc_r+0x4a>
 800666a:	bf00      	nop
 800666c:	200001fc 	.word	0x200001fc
 8006670:	20000200 	.word	0x20000200

08006674 <_sbrk_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d06      	ldr	r5, [pc, #24]	; (8006690 <_sbrk_r+0x1c>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	f7fa fcd2 	bl	8001028 <_sbrk>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_sbrk_r+0x1a>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_sbrk_r+0x1a>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	2000034c 	.word	0x2000034c

08006694 <__sread>:
 8006694:	b510      	push	{r4, lr}
 8006696:	460c      	mov	r4, r1
 8006698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669c:	f000 fa3c 	bl	8006b18 <_read_r>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	bfab      	itete	ge
 80066a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066a6:	89a3      	ldrhlt	r3, [r4, #12]
 80066a8:	181b      	addge	r3, r3, r0
 80066aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066ae:	bfac      	ite	ge
 80066b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80066b2:	81a3      	strhlt	r3, [r4, #12]
 80066b4:	bd10      	pop	{r4, pc}

080066b6 <__swrite>:
 80066b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ba:	461f      	mov	r7, r3
 80066bc:	898b      	ldrh	r3, [r1, #12]
 80066be:	05db      	lsls	r3, r3, #23
 80066c0:	4605      	mov	r5, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	4616      	mov	r6, r2
 80066c6:	d505      	bpl.n	80066d4 <__swrite+0x1e>
 80066c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066cc:	2302      	movs	r3, #2
 80066ce:	2200      	movs	r2, #0
 80066d0:	f000 f898 	bl	8006804 <_lseek_r>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	4632      	mov	r2, r6
 80066e2:	463b      	mov	r3, r7
 80066e4:	4628      	mov	r0, r5
 80066e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ea:	f000 b817 	b.w	800671c <_write_r>

080066ee <__sseek>:
 80066ee:	b510      	push	{r4, lr}
 80066f0:	460c      	mov	r4, r1
 80066f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f6:	f000 f885 	bl	8006804 <_lseek_r>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	bf15      	itete	ne
 8006700:	6560      	strne	r0, [r4, #84]	; 0x54
 8006702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800670a:	81a3      	strheq	r3, [r4, #12]
 800670c:	bf18      	it	ne
 800670e:	81a3      	strhne	r3, [r4, #12]
 8006710:	bd10      	pop	{r4, pc}

08006712 <__sclose>:
 8006712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006716:	f000 b831 	b.w	800677c <_close_r>
	...

0800671c <_write_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	; (800673c <_write_r+0x20>)
 8006720:	4604      	mov	r4, r0
 8006722:	4608      	mov	r0, r1
 8006724:	4611      	mov	r1, r2
 8006726:	2200      	movs	r2, #0
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fa fc40 	bl	8000fb0 <_write>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_write_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_write_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	2000034c 	.word	0x2000034c

08006740 <__assert_func>:
 8006740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006742:	4614      	mov	r4, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <__assert_func+0x2c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4605      	mov	r5, r0
 800674c:	68d8      	ldr	r0, [r3, #12]
 800674e:	b14c      	cbz	r4, 8006764 <__assert_func+0x24>
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <__assert_func+0x30>)
 8006752:	9100      	str	r1, [sp, #0]
 8006754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006758:	4906      	ldr	r1, [pc, #24]	; (8006774 <__assert_func+0x34>)
 800675a:	462b      	mov	r3, r5
 800675c:	f000 f81e 	bl	800679c <fiprintf>
 8006760:	f000 f9f9 	bl	8006b56 <abort>
 8006764:	4b04      	ldr	r3, [pc, #16]	; (8006778 <__assert_func+0x38>)
 8006766:	461c      	mov	r4, r3
 8006768:	e7f3      	b.n	8006752 <__assert_func+0x12>
 800676a:	bf00      	nop
 800676c:	2000000c 	.word	0x2000000c
 8006770:	08006ee4 	.word	0x08006ee4
 8006774:	08006ef1 	.word	0x08006ef1
 8006778:	08006f1f 	.word	0x08006f1f

0800677c <_close_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d06      	ldr	r5, [pc, #24]	; (8006798 <_close_r+0x1c>)
 8006780:	2300      	movs	r3, #0
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	602b      	str	r3, [r5, #0]
 8006788:	f000 fa30 	bl	8006bec <_close>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_close_r+0x1a>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_close_r+0x1a>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	2000034c 	.word	0x2000034c

0800679c <fiprintf>:
 800679c:	b40e      	push	{r1, r2, r3}
 800679e:	b503      	push	{r0, r1, lr}
 80067a0:	4601      	mov	r1, r0
 80067a2:	ab03      	add	r3, sp, #12
 80067a4:	4805      	ldr	r0, [pc, #20]	; (80067bc <fiprintf+0x20>)
 80067a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067aa:	6800      	ldr	r0, [r0, #0]
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	f000 f883 	bl	80068b8 <_vfiprintf_r>
 80067b2:	b002      	add	sp, #8
 80067b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b8:	b003      	add	sp, #12
 80067ba:	4770      	bx	lr
 80067bc:	2000000c 	.word	0x2000000c

080067c0 <_fstat_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d07      	ldr	r5, [pc, #28]	; (80067e0 <_fstat_r+0x20>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	f7fa fc03 	bl	8000fd8 <_fstat>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d102      	bne.n	80067dc <_fstat_r+0x1c>
 80067d6:	682b      	ldr	r3, [r5, #0]
 80067d8:	b103      	cbz	r3, 80067dc <_fstat_r+0x1c>
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	2000034c 	.word	0x2000034c

080067e4 <_isatty_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d06      	ldr	r5, [pc, #24]	; (8006800 <_isatty_r+0x1c>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	f7fa fc02 	bl	8000ff8 <_isatty>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_isatty_r+0x1a>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_isatty_r+0x1a>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	2000034c 	.word	0x2000034c

08006804 <_lseek_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	; (8006824 <_lseek_r+0x20>)
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	2200      	movs	r2, #0
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fa fbfb 	bl	800100e <_lseek>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_lseek_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_lseek_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	2000034c 	.word	0x2000034c

08006828 <__ascii_mbtowc>:
 8006828:	b082      	sub	sp, #8
 800682a:	b901      	cbnz	r1, 800682e <__ascii_mbtowc+0x6>
 800682c:	a901      	add	r1, sp, #4
 800682e:	b142      	cbz	r2, 8006842 <__ascii_mbtowc+0x1a>
 8006830:	b14b      	cbz	r3, 8006846 <__ascii_mbtowc+0x1e>
 8006832:	7813      	ldrb	r3, [r2, #0]
 8006834:	600b      	str	r3, [r1, #0]
 8006836:	7812      	ldrb	r2, [r2, #0]
 8006838:	1e10      	subs	r0, r2, #0
 800683a:	bf18      	it	ne
 800683c:	2001      	movne	r0, #1
 800683e:	b002      	add	sp, #8
 8006840:	4770      	bx	lr
 8006842:	4610      	mov	r0, r2
 8006844:	e7fb      	b.n	800683e <__ascii_mbtowc+0x16>
 8006846:	f06f 0001 	mvn.w	r0, #1
 800684a:	e7f8      	b.n	800683e <__ascii_mbtowc+0x16>

0800684c <__malloc_lock>:
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <__malloc_lock+0x8>)
 800684e:	f7ff ba5c 	b.w	8005d0a <__retarget_lock_acquire_recursive>
 8006852:	bf00      	nop
 8006854:	20000344 	.word	0x20000344

08006858 <__malloc_unlock>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <__malloc_unlock+0x8>)
 800685a:	f7ff ba57 	b.w	8005d0c <__retarget_lock_release_recursive>
 800685e:	bf00      	nop
 8006860:	20000344 	.word	0x20000344

08006864 <__sfputc_r>:
 8006864:	6893      	ldr	r3, [r2, #8]
 8006866:	3b01      	subs	r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	b410      	push	{r4}
 800686c:	6093      	str	r3, [r2, #8]
 800686e:	da08      	bge.n	8006882 <__sfputc_r+0x1e>
 8006870:	6994      	ldr	r4, [r2, #24]
 8006872:	42a3      	cmp	r3, r4
 8006874:	db01      	blt.n	800687a <__sfputc_r+0x16>
 8006876:	290a      	cmp	r1, #10
 8006878:	d103      	bne.n	8006882 <__sfputc_r+0x1e>
 800687a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800687e:	f7fe b94f 	b.w	8004b20 <__swbuf_r>
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	1c58      	adds	r0, r3, #1
 8006886:	6010      	str	r0, [r2, #0]
 8006888:	7019      	strb	r1, [r3, #0]
 800688a:	4608      	mov	r0, r1
 800688c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006890:	4770      	bx	lr

08006892 <__sfputs_r>:
 8006892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006894:	4606      	mov	r6, r0
 8006896:	460f      	mov	r7, r1
 8006898:	4614      	mov	r4, r2
 800689a:	18d5      	adds	r5, r2, r3
 800689c:	42ac      	cmp	r4, r5
 800689e:	d101      	bne.n	80068a4 <__sfputs_r+0x12>
 80068a0:	2000      	movs	r0, #0
 80068a2:	e007      	b.n	80068b4 <__sfputs_r+0x22>
 80068a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a8:	463a      	mov	r2, r7
 80068aa:	4630      	mov	r0, r6
 80068ac:	f7ff ffda 	bl	8006864 <__sfputc_r>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d1f3      	bne.n	800689c <__sfputs_r+0xa>
 80068b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068b8 <_vfiprintf_r>:
 80068b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068bc:	460d      	mov	r5, r1
 80068be:	b09d      	sub	sp, #116	; 0x74
 80068c0:	4614      	mov	r4, r2
 80068c2:	4698      	mov	r8, r3
 80068c4:	4606      	mov	r6, r0
 80068c6:	b118      	cbz	r0, 80068d0 <_vfiprintf_r+0x18>
 80068c8:	6983      	ldr	r3, [r0, #24]
 80068ca:	b90b      	cbnz	r3, 80068d0 <_vfiprintf_r+0x18>
 80068cc:	f7ff f97a 	bl	8005bc4 <__sinit>
 80068d0:	4b89      	ldr	r3, [pc, #548]	; (8006af8 <_vfiprintf_r+0x240>)
 80068d2:	429d      	cmp	r5, r3
 80068d4:	d11b      	bne.n	800690e <_vfiprintf_r+0x56>
 80068d6:	6875      	ldr	r5, [r6, #4]
 80068d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	d405      	bmi.n	80068ea <_vfiprintf_r+0x32>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	059a      	lsls	r2, r3, #22
 80068e2:	d402      	bmi.n	80068ea <_vfiprintf_r+0x32>
 80068e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e6:	f7ff fa10 	bl	8005d0a <__retarget_lock_acquire_recursive>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	071b      	lsls	r3, r3, #28
 80068ee:	d501      	bpl.n	80068f4 <_vfiprintf_r+0x3c>
 80068f0:	692b      	ldr	r3, [r5, #16]
 80068f2:	b9eb      	cbnz	r3, 8006930 <_vfiprintf_r+0x78>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7fe f964 	bl	8004bc4 <__swsetup_r>
 80068fc:	b1c0      	cbz	r0, 8006930 <_vfiprintf_r+0x78>
 80068fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006900:	07dc      	lsls	r4, r3, #31
 8006902:	d50e      	bpl.n	8006922 <_vfiprintf_r+0x6a>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006908:	b01d      	add	sp, #116	; 0x74
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	4b7b      	ldr	r3, [pc, #492]	; (8006afc <_vfiprintf_r+0x244>)
 8006910:	429d      	cmp	r5, r3
 8006912:	d101      	bne.n	8006918 <_vfiprintf_r+0x60>
 8006914:	68b5      	ldr	r5, [r6, #8]
 8006916:	e7df      	b.n	80068d8 <_vfiprintf_r+0x20>
 8006918:	4b79      	ldr	r3, [pc, #484]	; (8006b00 <_vfiprintf_r+0x248>)
 800691a:	429d      	cmp	r5, r3
 800691c:	bf08      	it	eq
 800691e:	68f5      	ldreq	r5, [r6, #12]
 8006920:	e7da      	b.n	80068d8 <_vfiprintf_r+0x20>
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	0598      	lsls	r0, r3, #22
 8006926:	d4ed      	bmi.n	8006904 <_vfiprintf_r+0x4c>
 8006928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800692a:	f7ff f9ef 	bl	8005d0c <__retarget_lock_release_recursive>
 800692e:	e7e9      	b.n	8006904 <_vfiprintf_r+0x4c>
 8006930:	2300      	movs	r3, #0
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	2320      	movs	r3, #32
 8006936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800693a:	f8cd 800c 	str.w	r8, [sp, #12]
 800693e:	2330      	movs	r3, #48	; 0x30
 8006940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b04 <_vfiprintf_r+0x24c>
 8006944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006948:	f04f 0901 	mov.w	r9, #1
 800694c:	4623      	mov	r3, r4
 800694e:	469a      	mov	sl, r3
 8006950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006954:	b10a      	cbz	r2, 800695a <_vfiprintf_r+0xa2>
 8006956:	2a25      	cmp	r2, #37	; 0x25
 8006958:	d1f9      	bne.n	800694e <_vfiprintf_r+0x96>
 800695a:	ebba 0b04 	subs.w	fp, sl, r4
 800695e:	d00b      	beq.n	8006978 <_vfiprintf_r+0xc0>
 8006960:	465b      	mov	r3, fp
 8006962:	4622      	mov	r2, r4
 8006964:	4629      	mov	r1, r5
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ff93 	bl	8006892 <__sfputs_r>
 800696c:	3001      	adds	r0, #1
 800696e:	f000 80aa 	beq.w	8006ac6 <_vfiprintf_r+0x20e>
 8006972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006974:	445a      	add	r2, fp
 8006976:	9209      	str	r2, [sp, #36]	; 0x24
 8006978:	f89a 3000 	ldrb.w	r3, [sl]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80a2 	beq.w	8006ac6 <_vfiprintf_r+0x20e>
 8006982:	2300      	movs	r3, #0
 8006984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800698c:	f10a 0a01 	add.w	sl, sl, #1
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9307      	str	r3, [sp, #28]
 8006994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006998:	931a      	str	r3, [sp, #104]	; 0x68
 800699a:	4654      	mov	r4, sl
 800699c:	2205      	movs	r2, #5
 800699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a2:	4858      	ldr	r0, [pc, #352]	; (8006b04 <_vfiprintf_r+0x24c>)
 80069a4:	f7f9 fc1c 	bl	80001e0 <memchr>
 80069a8:	9a04      	ldr	r2, [sp, #16]
 80069aa:	b9d8      	cbnz	r0, 80069e4 <_vfiprintf_r+0x12c>
 80069ac:	06d1      	lsls	r1, r2, #27
 80069ae:	bf44      	itt	mi
 80069b0:	2320      	movmi	r3, #32
 80069b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b6:	0713      	lsls	r3, r2, #28
 80069b8:	bf44      	itt	mi
 80069ba:	232b      	movmi	r3, #43	; 0x2b
 80069bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c0:	f89a 3000 	ldrb.w	r3, [sl]
 80069c4:	2b2a      	cmp	r3, #42	; 0x2a
 80069c6:	d015      	beq.n	80069f4 <_vfiprintf_r+0x13c>
 80069c8:	9a07      	ldr	r2, [sp, #28]
 80069ca:	4654      	mov	r4, sl
 80069cc:	2000      	movs	r0, #0
 80069ce:	f04f 0c0a 	mov.w	ip, #10
 80069d2:	4621      	mov	r1, r4
 80069d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d8:	3b30      	subs	r3, #48	; 0x30
 80069da:	2b09      	cmp	r3, #9
 80069dc:	d94e      	bls.n	8006a7c <_vfiprintf_r+0x1c4>
 80069de:	b1b0      	cbz	r0, 8006a0e <_vfiprintf_r+0x156>
 80069e0:	9207      	str	r2, [sp, #28]
 80069e2:	e014      	b.n	8006a0e <_vfiprintf_r+0x156>
 80069e4:	eba0 0308 	sub.w	r3, r0, r8
 80069e8:	fa09 f303 	lsl.w	r3, r9, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	46a2      	mov	sl, r4
 80069f2:	e7d2      	b.n	800699a <_vfiprintf_r+0xe2>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	1d19      	adds	r1, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	9103      	str	r1, [sp, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfbb      	ittet	lt
 8006a00:	425b      	neglt	r3, r3
 8006a02:	f042 0202 	orrlt.w	r2, r2, #2
 8006a06:	9307      	strge	r3, [sp, #28]
 8006a08:	9307      	strlt	r3, [sp, #28]
 8006a0a:	bfb8      	it	lt
 8006a0c:	9204      	strlt	r2, [sp, #16]
 8006a0e:	7823      	ldrb	r3, [r4, #0]
 8006a10:	2b2e      	cmp	r3, #46	; 0x2e
 8006a12:	d10c      	bne.n	8006a2e <_vfiprintf_r+0x176>
 8006a14:	7863      	ldrb	r3, [r4, #1]
 8006a16:	2b2a      	cmp	r3, #42	; 0x2a
 8006a18:	d135      	bne.n	8006a86 <_vfiprintf_r+0x1ce>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	1d1a      	adds	r2, r3, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	9203      	str	r2, [sp, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bfb8      	it	lt
 8006a26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006a2a:	3402      	adds	r4, #2
 8006a2c:	9305      	str	r3, [sp, #20]
 8006a2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b14 <_vfiprintf_r+0x25c>
 8006a32:	7821      	ldrb	r1, [r4, #0]
 8006a34:	2203      	movs	r2, #3
 8006a36:	4650      	mov	r0, sl
 8006a38:	f7f9 fbd2 	bl	80001e0 <memchr>
 8006a3c:	b140      	cbz	r0, 8006a50 <_vfiprintf_r+0x198>
 8006a3e:	2340      	movs	r3, #64	; 0x40
 8006a40:	eba0 000a 	sub.w	r0, r0, sl
 8006a44:	fa03 f000 	lsl.w	r0, r3, r0
 8006a48:	9b04      	ldr	r3, [sp, #16]
 8006a4a:	4303      	orrs	r3, r0
 8006a4c:	3401      	adds	r4, #1
 8006a4e:	9304      	str	r3, [sp, #16]
 8006a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a54:	482c      	ldr	r0, [pc, #176]	; (8006b08 <_vfiprintf_r+0x250>)
 8006a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	f7f9 fbc0 	bl	80001e0 <memchr>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d03f      	beq.n	8006ae4 <_vfiprintf_r+0x22c>
 8006a64:	4b29      	ldr	r3, [pc, #164]	; (8006b0c <_vfiprintf_r+0x254>)
 8006a66:	bb1b      	cbnz	r3, 8006ab0 <_vfiprintf_r+0x1f8>
 8006a68:	9b03      	ldr	r3, [sp, #12]
 8006a6a:	3307      	adds	r3, #7
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	3308      	adds	r3, #8
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a76:	443b      	add	r3, r7
 8006a78:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7a:	e767      	b.n	800694c <_vfiprintf_r+0x94>
 8006a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a80:	460c      	mov	r4, r1
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7a5      	b.n	80069d2 <_vfiprintf_r+0x11a>
 8006a86:	2300      	movs	r3, #0
 8006a88:	3401      	adds	r4, #1
 8006a8a:	9305      	str	r3, [sp, #20]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f04f 0c0a 	mov.w	ip, #10
 8006a92:	4620      	mov	r0, r4
 8006a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a98:	3a30      	subs	r2, #48	; 0x30
 8006a9a:	2a09      	cmp	r2, #9
 8006a9c:	d903      	bls.n	8006aa6 <_vfiprintf_r+0x1ee>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0c5      	beq.n	8006a2e <_vfiprintf_r+0x176>
 8006aa2:	9105      	str	r1, [sp, #20]
 8006aa4:	e7c3      	b.n	8006a2e <_vfiprintf_r+0x176>
 8006aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aaa:	4604      	mov	r4, r0
 8006aac:	2301      	movs	r3, #1
 8006aae:	e7f0      	b.n	8006a92 <_vfiprintf_r+0x1da>
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	4b16      	ldr	r3, [pc, #88]	; (8006b10 <_vfiprintf_r+0x258>)
 8006ab8:	a904      	add	r1, sp, #16
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7fd fb22 	bl	8004104 <_printf_float>
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	1c78      	adds	r0, r7, #1
 8006ac4:	d1d6      	bne.n	8006a74 <_vfiprintf_r+0x1bc>
 8006ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac8:	07d9      	lsls	r1, r3, #31
 8006aca:	d405      	bmi.n	8006ad8 <_vfiprintf_r+0x220>
 8006acc:	89ab      	ldrh	r3, [r5, #12]
 8006ace:	059a      	lsls	r2, r3, #22
 8006ad0:	d402      	bmi.n	8006ad8 <_vfiprintf_r+0x220>
 8006ad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad4:	f7ff f91a 	bl	8005d0c <__retarget_lock_release_recursive>
 8006ad8:	89ab      	ldrh	r3, [r5, #12]
 8006ada:	065b      	lsls	r3, r3, #25
 8006adc:	f53f af12 	bmi.w	8006904 <_vfiprintf_r+0x4c>
 8006ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae2:	e711      	b.n	8006908 <_vfiprintf_r+0x50>
 8006ae4:	ab03      	add	r3, sp, #12
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <_vfiprintf_r+0x258>)
 8006aec:	a904      	add	r1, sp, #16
 8006aee:	4630      	mov	r0, r6
 8006af0:	f7fd fdac 	bl	800464c <_printf_i>
 8006af4:	e7e4      	b.n	8006ac0 <_vfiprintf_r+0x208>
 8006af6:	bf00      	nop
 8006af8:	08006d44 	.word	0x08006d44
 8006afc:	08006d64 	.word	0x08006d64
 8006b00:	08006d24 	.word	0x08006d24
 8006b04:	08006f2a 	.word	0x08006f2a
 8006b08:	08006f34 	.word	0x08006f34
 8006b0c:	08004105 	.word	0x08004105
 8006b10:	08006893 	.word	0x08006893
 8006b14:	08006f30 	.word	0x08006f30

08006b18 <_read_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4d07      	ldr	r5, [pc, #28]	; (8006b38 <_read_r+0x20>)
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4611      	mov	r1, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	602a      	str	r2, [r5, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f7fa fa24 	bl	8000f74 <_read>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_read_r+0x1e>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_read_r+0x1e>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	2000034c 	.word	0x2000034c

08006b3c <__ascii_wctomb>:
 8006b3c:	b149      	cbz	r1, 8006b52 <__ascii_wctomb+0x16>
 8006b3e:	2aff      	cmp	r2, #255	; 0xff
 8006b40:	bf85      	ittet	hi
 8006b42:	238a      	movhi	r3, #138	; 0x8a
 8006b44:	6003      	strhi	r3, [r0, #0]
 8006b46:	700a      	strbls	r2, [r1, #0]
 8006b48:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006b4c:	bf98      	it	ls
 8006b4e:	2001      	movls	r0, #1
 8006b50:	4770      	bx	lr
 8006b52:	4608      	mov	r0, r1
 8006b54:	4770      	bx	lr

08006b56 <abort>:
 8006b56:	b508      	push	{r3, lr}
 8006b58:	2006      	movs	r0, #6
 8006b5a:	f000 f82b 	bl	8006bb4 <raise>
 8006b5e:	2001      	movs	r0, #1
 8006b60:	f7fa f9fe 	bl	8000f60 <_exit>

08006b64 <_raise_r>:
 8006b64:	291f      	cmp	r1, #31
 8006b66:	b538      	push	{r3, r4, r5, lr}
 8006b68:	4604      	mov	r4, r0
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	d904      	bls.n	8006b78 <_raise_r+0x14>
 8006b6e:	2316      	movs	r3, #22
 8006b70:	6003      	str	r3, [r0, #0]
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b7a:	b112      	cbz	r2, 8006b82 <_raise_r+0x1e>
 8006b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b80:	b94b      	cbnz	r3, 8006b96 <_raise_r+0x32>
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f830 	bl	8006be8 <_getpid_r>
 8006b88:	462a      	mov	r2, r5
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b92:	f000 b817 	b.w	8006bc4 <_kill_r>
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d00a      	beq.n	8006bb0 <_raise_r+0x4c>
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	d103      	bne.n	8006ba6 <_raise_r+0x42>
 8006b9e:	2316      	movs	r3, #22
 8006ba0:	6003      	str	r3, [r0, #0]
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	e7e7      	b.n	8006b76 <_raise_r+0x12>
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bac:	4628      	mov	r0, r5
 8006bae:	4798      	blx	r3
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e7e0      	b.n	8006b76 <_raise_r+0x12>

08006bb4 <raise>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	; (8006bc0 <raise+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f7ff bfd3 	b.w	8006b64 <_raise_r>
 8006bbe:	bf00      	nop
 8006bc0:	2000000c 	.word	0x2000000c

08006bc4 <_kill_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d07      	ldr	r5, [pc, #28]	; (8006be4 <_kill_r+0x20>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	f7fa f9b5 	bl	8000f40 <_kill>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d102      	bne.n	8006be0 <_kill_r+0x1c>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	b103      	cbz	r3, 8006be0 <_kill_r+0x1c>
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	bd38      	pop	{r3, r4, r5, pc}
 8006be2:	bf00      	nop
 8006be4:	2000034c 	.word	0x2000034c

08006be8 <_getpid_r>:
 8006be8:	f7fa b9a2 	b.w	8000f30 <_getpid>

08006bec <_close>:
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <_close+0xc>)
 8006bee:	2258      	movs	r2, #88	; 0x58
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf6:	4770      	bx	lr
 8006bf8:	2000034c 	.word	0x2000034c

08006bfc <_init>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr

08006c08 <_fini>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr
